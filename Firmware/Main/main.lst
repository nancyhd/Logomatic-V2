   1              		.file	"main.c"
   9              	.Ltext0:
  10              		.align	2
  11              		.global	feed
  13              	feed:
  14              	.LFB4:
  15              		.file 1 "main.c"
   1:main.c        **** /*********************************************************************************
   2:main.c        ****  * Logomatic V2 Firmware
   3:main.c        ****  * Sparkfun Electronics 2008
   4:main.c        ****  * ******************************************************************************/
   5:main.c        **** 
   6:main.c        **** /*******************************************************
   7:main.c        ****  * 		     Header Files
   8:main.c        ****  ******************************************************/
   9:main.c        **** #include <stdio.h>
  10:main.c        **** #include <string.h>
  11:main.c        **** #include "LPC21xx.h"
  12:main.c        **** #include "string_printf.h"
  13:main.c        **** //#include "system.h"
  14:main.c        **** 
  15:main.c        **** //UART0 Debugging
  16:main.c        **** #include "serial.h"
  17:main.c        **** #include "rprintf.h"
  18:main.c        **** 
  19:main.c        **** //SPI
  20:main.c        **** #include "SPI1.h"
  21:main.c        **** 
  22:main.c        **** //Needed for main function calls
  23:main.c        **** #include "main_msc.h"
  24:main.c        **** #include "fat16.h"
  25:main.c        **** #include "armVIC.h"
  26:main.c        **** #include "itoa.h"
  27:main.c        **** #include "rootdir.h"
  28:main.c        **** #include "sd_raw.h"
  29:main.c        **** 
  30:main.c        **** 
  31:main.c        **** /*******************************************************
  32:main.c        ****  * 		     Global Variables
  33:main.c        ****  ******************************************************/
  34:main.c        **** 
  35:main.c        **** #define ON	1
  36:main.c        **** #define OFF	0
  37:main.c        **** 
  38:main.c        **** char RX_array1[512];
  39:main.c        **** char RX_array2[512];
  40:main.c        **** char log_array1 = 0;
  41:main.c        **** char log_array2 = 0;
  42:main.c        **** short RX_in = 0;
  43:main.c        **** char get_frame = 0;
  44:main.c        **** 
  45:main.c        **** signed int stringSize;
  46:main.c        **** struct fat16_file_struct* handle;
  47:main.c        **** struct fat16_file_struct * fd;
  48:main.c        **** char stringBuf[256];
  49:main.c        **** 
  50:main.c        **** // Default Settings
  51:main.c        **** static char mode = 0;
  52:main.c        **** static char asc = 'N';
  53:main.c        **** static int baud = 9600;
  54:main.c        **** static int freq = 100;
  55:main.c        **** static char trig = '$';
  56:main.c        **** static short frame = 100;
  57:main.c        **** static char ad1_7 = 'N';
  58:main.c        **** static char ad1_6 = 'N';
  59:main.c        **** static char ad1_3 = 'N';
  60:main.c        **** static char ad1_2 = 'N';
  61:main.c        **** static char ad0_4 = 'N';
  62:main.c        **** static char ad0_3 = 'N';
  63:main.c        **** static char ad0_2 = 'N';
  64:main.c        **** static char ad0_1 = 'N';
  65:main.c        **** 
  66:main.c        **** 
  67:main.c        **** /*******************************************************
  68:main.c        ****  * 		 Function Declarations
  69:main.c        ****  ******************************************************/
  70:main.c        **** 
  71:main.c        **** void Initialize(void);
  72:main.c        **** 
  73:main.c        **** void setup_uart0(int newbaud, char want_ints);
  74:main.c        **** 
  75:main.c        **** void mode_0(void);
  76:main.c        **** void mode_1(void);
  77:main.c        **** void mode_2(void);
  78:main.c        **** void mode_action(void);
  79:main.c        **** 
  80:main.c        **** void Log_init(void);
  81:main.c        **** void test(void);
  82:main.c        **** void stat(int statnum, int onoff);
  83:main.c        **** void AD_conversion(int regbank);
  84:main.c        **** 
  85:main.c        **** void feed(void);
  86:main.c        **** 
  87:main.c        **** static void IRQ_Routine(void) __attribute__ ((interrupt("IRQ")));
  88:main.c        **** static void UART0ISR(void); //__attribute__ ((interrupt("IRQ")));
  89:main.c        **** static void UART0ISR_2(void); //__attribute__ ((interrupt("IRQ")));
  90:main.c        **** static void MODE2ISR(void); //__attribute__ ((interrupt("IRQ")));
  91:main.c        **** 
  92:main.c        **** void FIQ_Routine(void) __attribute__ ((interrupt("FIQ")));
  93:main.c        **** void SWI_Routine(void) __attribute__ ((interrupt("SWI")));
  94:main.c        **** void UNDEF_Routine(void) __attribute__ ((interrupt("UNDEF")));
  95:main.c        **** 
  96:main.c        **** void fat_initialize(void);
  97:main.c        **** 
  98:main.c        **** void delay_ms(int count);
  99:main.c        **** 
 100:main.c        **** 
 101:main.c        **** /*******************************************************
 102:main.c        ****  * 		     	MAIN
 103:main.c        ****  ******************************************************/
 104:main.c        **** 
 105:main.c        **** int main (void)
 106:main.c        **** {
 107:main.c        **** 	int i;
 108:main.c        **** 	char name[32];
 109:main.c        **** 	int count = 0;
 110:main.c        **** 	
 111:main.c        **** 	enableFIQ();
 112:main.c        **** 	
 113:main.c        **** 	Initialize();
 114:main.c        **** 	
 115:main.c        **** 	fat_initialize();		
 116:main.c        **** 
 117:main.c        **** 	setup_uart0(9600, 0);
 118:main.c        **** 
 119:main.c        **** 	// Flash Status Lights
 120:main.c        **** 	for(i = 0; i < 5; i++)
 121:main.c        **** 	{
 122:main.c        **** 		stat(0,ON);
 123:main.c        **** 		delay_ms(50);
 124:main.c        **** 		stat(0,OFF);
 125:main.c        **** 		stat(1,ON);
 126:main.c        **** 		delay_ms(50);
 127:main.c        **** 		stat(1,OFF);
 128:main.c        **** 	}
 129:main.c        **** 
 130:main.c        **** 	SPI1_Init();
 131:main.c        **** 	SPI1_Write(0xAA);
 132:main.c        **** 	SPI1_Write(0x55);
 133:main.c        **** 	
 134:main.c        **** 	Log_init();
 135:main.c        **** 
 136:main.c        **** 	count++;
 137:main.c        **** 	string_printf(name,"LOGtest2%02d.txt",count);
 138:main.c        **** 	while(root_file_exists(name))
 139:main.c        **** 	{
 140:main.c        **** 		count++;
 141:main.c        **** 		if(count == 250) 
 142:main.c        **** 		{
 143:main.c        **** 			rprintf("Too Many Logs!\n\r");
 144:main.c        **** 			while(1)
 145:main.c        **** 			{
 146:main.c        **** 				stat(0,ON);
 147:main.c        **** 				stat(1,ON);
 148:main.c        **** 				delay_ms(1000);
 149:main.c        **** 				stat(0,OFF);
 150:main.c        **** 				stat(1,OFF);
 151:main.c        **** 				delay_ms(1000);
 152:main.c        **** 			}
 153:main.c        **** 
 154:main.c        **** 		}
 155:main.c        **** 		string_printf(name,"LOG%02d.txt",count);
 156:main.c        **** 	}
 157:main.c        **** 	
 158:main.c        **** 	handle = root_open_new(name);
 159:main.c        **** 		
 160:main.c        **** 
 161:main.c        **** 	sd_raw_sync();	
 162:main.c        **** 		
 163:main.c        **** 	if(mode == 0){ mode_0(); }
 164:main.c        **** 	else if(mode == 1){ mode_1(); }
 165:main.c        **** 	else if(mode == 2){ mode_2(); }
 166:main.c        **** 
 167:main.c        ****     	return 0;
 168:main.c        **** }
 169:main.c        **** 
 170:main.c        **** 
 171:main.c        **** /*******************************************************
 172:main.c        ****  * 		     Initialize
 173:main.c        ****  ******************************************************/
 174:main.c        **** 
 175:main.c        **** #define PLOCK 0x400
 176:main.c        **** 
 177:main.c        **** void Initialize(void)
 178:main.c        **** {
 179:main.c        **** 	rprintf_devopen(putc_serial0);
 180:main.c        **** 	
 181:main.c        **** 	PINSEL0 = 0xCF351505;
 182:main.c        **** 	PINSEL1 = 0x15441801;
 183:main.c        **** 	IODIR0 |= 0x00000884;
 184:main.c        **** 	IOSET0 = 0x00000080;
 185:main.c        **** 
 186:main.c        **** 	S0SPCR = 0x08;  // SPI clk to be pclk/8
 187:main.c        **** 	S0SPCR = 0x30;  // master, msb, first clk edge, active high, no ints
 188:main.c        **** 
 189:main.c        **** }
 190:main.c        **** 
 191:main.c        **** void feed(void)
 192:main.c        **** {
  16              	@ Function supports interworking.
  17              		@ args = 0, pretend = 0, frame = 0
  18              		@ frame_needed = 0, uses_anonymous_args = 0
  19              		@ link register save eliminated.
  20              		.loc 1 193 0
 193:main.c        **** = 512)
  21              	r3, .L3
  22 0000 10309FE5 		mvn	r2, #85
  23 0004 5520E0E3 		strb	r2, [r3, #140]
  24 0008 8C20C3E5 		.loc 1 194 0
 194:main.c        **** {
  25              		r2, r2, #171
  26 000c AB2082E2 		.loc 1 192 0
  27              		@ lr needed for prologue
  28              		.loc 1 194 0
  29              		strb	r2, [r3, #140]
  30 0010 8C20C3E5 		.loc 1 195 0
 195:main.c        **** 	RX_array2[RX_in-512] = U0RBR;
  31              	
  32 0014 1EFF2FE1 	.L4:
  33              		.align	2
  34              	.L3:
  35              		.word	-534790144
  36 0018 00C01FE0 	.LFE4:
  38              		.align	2
  40              	UART0ISR:
  41              	.LFB5:
  42              		.loc 1 198 0
 196:main.c        **** 	RX_in++;
 197:main.c        **** 
 198:main.c        **** 		if(RX_in == 1024)
  43              	 supports interworking.
  44              		@ args = 0, pretend = 0, frame = 0
  45              		@ frame_needed = 0, uses_anonymous_args = 0
  46              		.loc 1 202 0
 199:main.c        **** 
 200:main.c        **** 			log_array2 = 1;
 201:main.c        **** 			RX_in = 0;
 202:main.c        **** 		}
  47              		ip, .L12
  48 001c 90C09FE5 		ldrh	r3, [ip, #0]
  49 0020 B030DCE1 		ldrsh	r1, [ip, #0]
  50 0024 F010DCE1 		.loc 1 212 0
 203:main.c        **** 
 204:main.c        **** 
 205:main.c        **** 	temp = U0IIR; // Have to read this to clear the interrupt 
 206:main.c        **** 
 207:main.c        **** 	VICVectAddr = 0;
 208:main.c        **** 	
 209:main.c        **** }
 210:main.c        **** 
 211:main.c        **** static void UART0ISR_2(void)
 212:main.c        **** {
  51              		r2, .L12+4
  52 0028 88209FE5 		add	r3, r3, #1
  53 002c 013083E2 		.loc 1 198 0
  54              		str	lr, [sp, #-4]!
  55 0030 04E02DE5 	.LCFI0:
  56              		.loc 1 202 0
  57              		cmp	r1, #512
  58 0034 020C51E3 		.loc 1 212 0
  59              		add	lr, r1, r2
  60 0038 02E081E0 		.loc 1 206 0
  61              		mov	r2, r3, asl #16
  62 003c 0328A0E1 		mov	r0, r2, lsr #16
  63 0040 2208A0E1 		.loc 1 202 0
  64              		bge	.L6
  65 0044 090000AA 		.loc 1 204 0
  66              		ldr	r3, .L12+8
  67 0048 6C309FE5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
  68 004c 0020D3E5 		ldr	r3, .L12+12
  69 0050 68309FE5 		.loc 1 208 0
  70              		cmp	r0, #512
  71 0054 020C50E3 		.loc 1 204 0
  72              		strb	r2, [r3, r1]
  73 0058 0120C3E7 		.loc 1 206 0
  74              		strh	r0, [ip, #0]	@ movhi
  75 005c B000CCE1 		.loc 1 208 0
  76              		ldreq	r3, .L12+16
  77 0060 5C309F05 		moveq	r2, #1
  78 0064 0120A003 		streqb	r2, [r3, #0]
  79 0068 0020C305 		b	.L8
  80 006c 090000EA 	.L6:
  81              		.loc 1 212 0
  82              		ldr	r3, .L12+8
  83 0070 44309FE5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  84 0074 0030D3E5 		.loc 1 215 0
 213:main.c        **** p;
 214:main.c        **** 	temp = U0RBR;
 215:main.c        **** 
  85              		r3, [lr, #-512]
  86 0078 010B50E3 		.loc 1 217 0
  87              		ldreq	r3, .L12+20
  88 007c 00324EE5 		moveq	r2, #1
 216:main.c        **** (temp == trig){ get_frame = 1; }
 217:main.c        **** 	
  89              	eqb	r2, [r3, #0]
  90 0080 40309F05 		.loc 1 218 0
  91 0084 0120A003 		moveq	r3, #0	@ movhi
  92 0088 0020C305 		.loc 1 213 0
 218:main.c        **** f(get_frame)
  93              	h	r0, [ip, #0]	@ movhi
  94 008c 0030A003 		.loc 1 218 0
  95              		streqh	r3, [ip, #0]	@ movhi
  96 0090 B000CCE1 	.L8:
  97              		.loc 1 223 0
  98 0094 B030CC01 		ldr	r3, .L12+8
  99              		.loc 1 225 0
 219:main.c        **** {
 220:main.c        **** 		if(RX_in < frame)
 221:main.c        **** 		{
 222:main.c        **** 			RX_array1[RX_in] = temp;
 223:main.c        **** 			RX_in++;
 100              	, #0
 101 0098 1C309FE5 		.loc 1 223 0
 224:main.c        **** f(RX_in == frame)
 225:main.c        **** 			{
 102              	drb	r3, [r3, #8]	@ zero_extendqisi2
 103 009c 0020A0E3 		.loc 1 225 0
 104              		mvn	r3, #0
 105 00a0 0830D3E5 		str	r2, [r3, #-4047]
 106              		.loc 1 227 0
 107 00a4 0030E0E3 		ldr	lr, [sp], #4
 108 00a8 CF2F03E5 		bx	lr
 226:main.c        **** 		RX_array1[RX_in] = 10; // delimiters
 227:main.c        **** 				RX_array1[RX_in + 1] = 13;
 109              	.align	2
 110 00ac 04E09DE4 	.L12:
 111 00b0 1EFF2FE1 		.word	RX_in
 112              		.word	RX_array2
 113              		.word	-536821760
 114              		.word	RX_array1
 115 00b4 00000000 		.word	log_array1
 116 00b8 00000000 		.word	log_array2
 117 00bc 00C000E0 	.LFE5:
 119 00c4 00000000 		.align	2
 121              	UART0ISR_2:
 122              	.LFB6:
 123              		.loc 1 230 0
 124              		@ Function supports interworking.
 125              		@ args = 0, pretend = 0, frame = 0
 126              		@ frame_needed = 0, uses_anonymous_args = 0
 228:main.c        **** 		log_array1 = 1;
 229:main.c        **** 				get_frame = 0;
 230:main.c        **** 			}
 127              	5, r6, r7, r8, lr}
 128              	.LCFI1:
 129              		.loc 1 232 0
 130              		ldr	r3, .L24
 131 00cc F0412DE9 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 132              		.loc 1 234 0
 231:main.c        **** 
 232:main.c        **** 		else if(RX_in >= frame)
 133              	3, .L24+4
 134 00d0 10319FE5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 135 00d4 0020D3E5 		.loc 1 232 0
 233:main.c        **** 	{
 234:main.c        **** 			RX_array2[RX_in - frame] = temp;
 136              	d	r4, r2, #255
 137 00d8 0C319FE5 	.LVL0:
 138 00dc 0030D3E5 		.loc 1 234 0
 139              		cmp	r3, r4
 140 00e0 FF4002E2 		ldr	r2, .L24+8
 141              		moveq	r3, #1
 142              		streqb	r3, [r2, #0]
 143 00e4 040053E1 		beq	.L17
 144 00e8 00219FE5 		.loc 1 236 0
 145 00ec 0130A003 		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 146 00f0 0030C205 		cmp	r3, #0
 147 00f4 0200000A 		beq	.L18
 235:main.c        **** 	RX_in++;
 236:main.c        **** 
 148              	1 238 0
 149 00f8 0030D2E5 		ldr	r7, .L24+12
 150 00fc 000053E3 		ldr	r3, .L24+16
 151 0100 3100000A 		ldrsh	r1, [r3, #0]
 152              		ldrh	r3, [r7, #0]
 237:main.c        **** 	if(RX_in == 2*frame)
 238:main.c        **** 			{
 153              	r3, r3, #1
 154 0104 E8709FE5 		ldrsh	r0, [r7, #0]
 155 0108 E8309FE5 		.loc 1 254 0
 156 010c F010D3E1 		mov	r2, r3, asl #16
 157 0110 B030D7E1 		mov	r2, r2, lsr #16
 158 0114 013083E2 		.loc 1 256 0
 159 0118 F000D7E1 		mov	r3, r2, asl #16
 239:main.c        **** 		RX_array2[RX_in - frame] = 10; // delimiters
 240:main.c        **** 				RX_array2[RX_in + 1 - frame] = 13;
 241:main.c        **** 				log_array2 = 1;
 242:main.c        **** 				get_frame = 0;
 243:main.c        **** 				RX_in = 0;
 244:main.c        **** 			}
 245:main.c        **** 		}
 246:main.c        **** 	}
 247:main.c        **** 
 248:main.c        **** 	temp = U0IIR; // have to read this to clear the interrupt
 249:main.c        **** 
 250:main.c        **** 	VICVectAddr = 0;
 251:main.c        **** }
 252:main.c        **** 		
 253:main.c        **** static void MODE2ISR(void)
 254:main.c        **** {
 160              	 238 0
 161 011c 0328A0E1 		cmp	r0, r1
 162 0120 2228A0E1 		.loc 1 243 0
 255:main.c        **** emp2 = 0, ind = 0;
 256:main.c        **** 	int j;
 163              	v	ip, r3
 164 0124 0238A0E1 		.loc 1 240 0
 165              		ldr	r5, .L24+20
 166 0128 010050E1 		.loc 1 253 0
 167              		ldr	r6, .L24+24
 168 012c 03C0A0E1 		rsb	r8, r1, r0
 169              		.loc 1 241 0
 170 0130 C4509FE5 		mov	lr, r2
 171              		.loc 1 256 0
 172 0134 C4609FE5 		mov	r3, r3, asr #16
 173 0138 008061E0 		.loc 1 238 0
 174              		bge	.L19
 175 013c 02E0A0E1 		.loc 1 243 0
 176              		cmp	r1, ip, asr #16
 177 0140 4338A0E1 		.loc 1 240 0
 178              		strb	r4, [r5, r0]
 179 0144 0F0000AA 		.loc 1 246 0
 180              		add	ip, r1, r5
 181 0148 4C0851E1 		.loc 1 241 0
 182              		strh	r2, [r7, #0]	@ movhi
 183 014c 0040C5E7 		.loc 1 243 0
 184              		bne	.L18
 185 0150 05C081E0 		.loc 1 247 0
 186              		ldr	r3, .L24+28
 187 0154 B020C7E1 		mov	r2, #1
 188              		strb	r2, [r3, #0]
 189 0158 1B00001A 		.loc 1 248 0
 190              		ldr	r3, .L24+8
 191 015c A0309FE5 		mov	r2, #0
 192 0160 0120A0E3 		strb	r2, [r3, #0]
 193 0164 0020C3E5 		.loc 1 245 0
 194              		mov	r3, #10
 195 0168 80309FE5 		strb	r3, [r5, r1]
 196 016c 0020A0E3 		.loc 1 246 0
 197 0170 0020C3E5 		add	r3, r3, #3
 198              		strb	r3, [ip, #1]
 199 0174 0A30A0E3 		b	.L18
 200 0178 0130C5E7 	.L19:
 201              		.loc 1 258 0
 202 017c 033083E2 		rsb	r0, r1, r3
 203 0180 0130CCE5 		.loc 1 256 0
 204 0184 100000EA 		cmp	r3, r1, asl #1
 205              		.loc 1 259 0
 257:main.c        **** hort a;
 258:main.c        **** 	char q[50], temp_buff[4];
 206              	.loc 1 253 0
 207 0188 030061E0 		strb	r4, [r6, r8]
 208              		.loc 1 254 0
 209 018c 810053E1 		strh	r2, [r7, #0]	@ movhi
 259:main.c        **** 	T0IR = 1; // reset TMR0 interrupt
 210              	c 1 256 0
 211 0190 06C080E0 		bne	.L18
 260:main.c        **** 
 261:main.c        **** 	for(j = 0; j < 50; j++)
 212              	loc 1 260 0
 213 0194 0010A0E3 		ldr	r3, .L24+32
 214              		mov	r2, #1
 215 0198 0840C6E7 		strb	r2, [r3, #0]
 216              		.loc 1 258 0
 217 019c B020C7E1 		mov	r3, #10
 218              		strb	r3, [r6, r0]
 219 01a0 0900001A 		.loc 1 259 0
 220              		add	r3, r3, #3
 221 01a4 5C309FE5 		strb	r3, [ip, #1]
 222 01a8 0120A0E3 		.loc 1 261 0
 223 01ac 0020C3E5 		ldr	r3, .L24+8
 224              		.loc 1 262 0
 225 01b0 0A30A0E3 		strh	r1, [r7, #0]	@ movhi
 226 01b4 0030C6E7 		.loc 1 261 0
 227              		strb	r1, [r3, #0]
 228 01b8 033083E2 	.L18:
 229 01bc 0130CCE5 		.loc 1 267 0
 230              		ldr	r3, .L24
 231 01c0 28309FE5 		.loc 1 269 0
 262:main.c        **** {
 232              	267 0
 233 01c4 B010C7E1 		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 234              		.loc 1 269 0
 235 01c8 0010C3E5 		mvn	r3, #0
 236              		str	r2, [r3, #-4047]
 263:main.c        **** 	q[j] = 0;
 264:main.c        **** 	}
 265:main.c        **** 
 266:main.c        **** 
 267:main.c        **** 	// Get AD1.3
 237              	 1 270 0
 238 01cc 14309FE5 		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 268:main.c        **** d1_3 == 'Y')
 269:main.c        **** 	{
 239              	x	lr
 240 01d0 0020A0E3 	.L25:
 241              		.align	2
 242 01d4 0830D3E5 	.L24:
 243              		.word	-536821760
 244 01d8 0030E0E3 		.word	trig
 245 01dc CF2F03E5 		.word	get_frame
 270:main.c        **** AD1CR = 0x00020FF08; // AD1.3
 246              	RX_in
 247 01e0 F041BDE8 		.word	frame
 248 01e4 1EFF2FE1 		.word	RX_array1
 249              		.word	RX_array2
 250              		.word	log_array1
 251              		.word	log_array2
 252 01e8 00C000E0 	.LFE6:
 254 01f0 00000000 		.align	2
 255 01f4 00000000 		.global	SWI_Routine
 257 01fc 00000000 	SWI_Routine:
 258 0200 00000000 	.LFB9:
 259 0204 00000000 		.loc 1 842 0
 260 0208 00000000 		@ ARM Exception Handler.
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              		@ link register save eliminated.
 264              		@ lr needed for prologue
 265              	.L28:
 266              		b	.L28
 267              	.LFE9:
 271:main.c        **** 	AD1CR |= 0x01000000; // start conversion
 272:main.c        **** 		while((temp & 0x80000000) == 0)
 273:main.c        **** 		{
 274:main.c        **** 			temp = AD1DR;
 275:main.c        **** 		}
 276:main.c        **** 		temp &= 0x0000FFC0;
 277:main.c        **** 		temp2 = temp / 0x00000040;
 278:main.c        **** 
 279:main.c        **** 		AD1CR = 0x00000000;
 280:main.c        **** 
 281:main.c        **** 		if(asc == 'Y')
 282:main.c        **** 		{
 283:main.c        **** 			itoa(temp2, 10, temp_buff);
 284:main.c        **** 			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
 285:main.c        **** 			{
 286:main.c        **** 				q[ind] = temp_buff[0];
 287:main.c        **** 				ind++;
 288:main.c        **** 			}
 289:main.c        **** 			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
 290:main.c        **** 			{
 291:main.c        **** 				q[ind] = temp_buff[1];
 292:main.c        **** 				ind++;
 293:main.c        **** 			}
 294:main.c        **** 			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
 295:main.c        **** 			{
 296:main.c        **** 				q[ind] = temp_buff[2];
 297:main.c        **** 				ind++;
 298:main.c        **** 			}
 299:main.c        **** 			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
 300:main.c        **** 			{
 301:main.c        **** 				q[ind] = temp_buff[3];
 302:main.c        **** 				ind++;
 303:main.c        **** 			}
 304:main.c        **** 
 305:main.c        **** 			q[ind] = 0;
 306:main.c        **** 			ind++;
 307:main.c        **** 			temp = 0; 
 308:main.c        **** 			temp2 = 0;
 309:main.c        **** 			temp_buff[0] = 0;
 310:main.c        **** 			temp_buff[1] = 0;
 311:main.c        **** 			temp_buff[2] = 0;
 312:main.c        **** 			temp_buff[3] = 0;
 313:main.c        **** 
 314:main.c        **** 		}
 315:main.c        **** 
 316:main.c        **** 		else if(asc == 'N')
 317:main.c        **** 		{
 318:main.c        **** 			a = ((short)temp2 & 0xFF00) / 0x00000100;
 319:main.c        **** 			q[ind] = (char)a;
 320:main.c        **** 			
 321:main.c        **** 			q[ind+1]  = (char)temp2 & 0xFF;
 322:main.c        **** 			ind += 2;
 323:main.c        **** 			temp = 0;
 324:main.c        **** 		}
 325:main.c        **** 	}
 326:main.c        **** 	// Get AD0.3
 327:main.c        **** 	if(ad0_3 == 'Y')
 328:main.c        **** 	{
 329:main.c        **** 		AD0CR = 0x00020FF08; // AD0.3
 330:main.c        **** 		AD0CR |= 0x01000000; // start conversion
 331:main.c        **** 		while((temp & 0x80000000) == 0)
 332:main.c        **** 		{
 333:main.c        **** 			temp = AD0DR;
 334:main.c        **** 		}
 335:main.c        **** 		temp &= 0x0000FFC0;
 336:main.c        **** 		temp2 = temp / 0x00000040;
 337:main.c        **** 
 338:main.c        **** 		AD0CR = 0x00000000;
 339:main.c        **** 
 340:main.c        **** 		if(asc == 'Y')
 341:main.c        **** 		{
 342:main.c        **** 			itoa(temp2, 10, temp_buff);
 343:main.c        **** 			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
 344:main.c        **** 			{
 345:main.c        **** 				q[ind] = temp_buff[0];
 346:main.c        **** 				ind++;
 347:main.c        **** 			}
 348:main.c        **** 			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
 349:main.c        **** 			{
 350:main.c        **** 				q[ind] = temp_buff[1];
 351:main.c        **** 				ind++;
 352:main.c        **** 			}
 353:main.c        **** 			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
 354:main.c        **** 			{
 355:main.c        **** 				q[ind] = temp_buff[2];
 356:main.c        **** 				ind++;
 357:main.c        **** 			}
 358:main.c        **** 			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
 359:main.c        **** 			{
 360:main.c        **** 				q[ind] = temp_buff[3];
 361:main.c        **** 				ind++;
 362:main.c        **** 			}
 363:main.c        **** 
 364:main.c        **** 			q[ind] = 0;
 365:main.c        **** 			ind++;
 366:main.c        **** 			temp = 0; 
 367:main.c        **** 			temp2 = 0;
 368:main.c        **** 			temp_buff[0] = 0;
 369:main.c        **** 			temp_buff[1] = 0;
 370:main.c        **** 			temp_buff[2] = 0;
 371:main.c        **** 			temp_buff[3] = 0;
 372:main.c        **** 
 373:main.c        **** 		}
 374:main.c        **** 
 375:main.c        **** 		else if(asc == 'N')
 376:main.c        **** 		{
 377:main.c        **** 			a = ((short)temp2 & 0xFF00) / 0x00000100;
 378:main.c        **** 			q[ind] = (char)a;
 379:main.c        **** 			
 380:main.c        **** 			q[ind+1]  = (char)temp2 & 0xFF;
 381:main.c        **** 			ind += 2;
 382:main.c        **** 			temp = 0;
 383:main.c        **** 		}
 384:main.c        **** 	}
 385:main.c        **** 	// Get AD0.2
 386:main.c        **** 	if(ad0_2 == 'Y')
 387:main.c        **** 	{
 388:main.c        **** 		AD0CR = 0x00020FF04; // AD1.2
 389:main.c        **** 		AD0CR |= 0x01000000; // start conversion
 390:main.c        **** 		while((temp & 0x80000000) == 0)
 391:main.c        **** 		{
 392:main.c        **** 			temp = AD0DR;
 393:main.c        **** 		}
 394:main.c        **** 		temp &= 0x0000FFC0;
 395:main.c        **** 		temp2 = temp / 0x00000040;
 396:main.c        **** 
 397:main.c        **** 		AD0CR = 0x00000000;
 398:main.c        **** 
 399:main.c        **** 		if(asc == 'Y')
 400:main.c        **** 		{
 401:main.c        **** 			itoa(temp2, 10, temp_buff);
 402:main.c        **** 			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
 403:main.c        **** 			{
 404:main.c        **** 				q[ind] = temp_buff[0];
 405:main.c        **** 				ind++;
 406:main.c        **** 			}
 407:main.c        **** 			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
 408:main.c        **** 			{
 409:main.c        **** 				q[ind] = temp_buff[1];
 410:main.c        **** 				ind++;
 411:main.c        **** 			}
 412:main.c        **** 			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
 413:main.c        **** 			{
 414:main.c        **** 				q[ind] = temp_buff[2];
 415:main.c        **** 				ind++;
 416:main.c        **** 			}
 417:main.c        **** 			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
 418:main.c        **** 			{
 419:main.c        **** 				q[ind] = temp_buff[3];
 420:main.c        **** 				ind++;
 421:main.c        **** 			}
 422:main.c        **** 
 423:main.c        **** 			q[ind] = 0;
 424:main.c        **** 			ind++;
 425:main.c        **** 			temp = 0; 
 426:main.c        **** 			temp2 = 0;
 427:main.c        **** 			temp_buff[0] = 0;
 428:main.c        **** 			temp_buff[1] = 0;
 429:main.c        **** 			temp_buff[2] = 0;
 430:main.c        **** 			temp_buff[3] = 0;
 431:main.c        **** 
 432:main.c        **** 		}
 433:main.c        **** 
 434:main.c        **** 		else if(asc == 'N')
 435:main.c        **** 		{
 436:main.c        **** 			a = ((short)temp2 & 0xFF00) / 0x00000100;
 437:main.c        **** 			q[ind] = (char)a;
 438:main.c        **** 			
 439:main.c        **** 			q[ind+1]  = (char)temp2 & 0xFF;
 440:main.c        **** 			ind += 2;
 441:main.c        **** 			temp = 0;
 442:main.c        **** 		}
 443:main.c        **** 	}
 444:main.c        **** 	// Get AD0.1
 445:main.c        **** 	if(ad0_1 == 'Y')
 446:main.c        **** 	{
 447:main.c        **** 		AD0CR = 0x00020FF02; // AD0.1
 448:main.c        **** 		AD0CR |= 0x01000000; // start conversion
 449:main.c        **** 		while((temp & 0x80000000) == 0)
 450:main.c        **** 		{
 451:main.c        **** 			temp = AD0DR;
 452:main.c        **** 		}
 453:main.c        **** 		temp &= 0x0000FFC0;
 454:main.c        **** 		temp2 = temp / 0x00000040;
 455:main.c        **** 
 456:main.c        **** 		AD0CR = 0x00000000;
 457:main.c        **** 
 458:main.c        **** 		if(asc == 'Y')
 459:main.c        **** 		{
 460:main.c        **** 			itoa(temp2, 10, temp_buff);
 461:main.c        **** 			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
 462:main.c        **** 			{
 463:main.c        **** 				q[ind] = temp_buff[0];
 464:main.c        **** 				ind++;
 465:main.c        **** 			}
 466:main.c        **** 			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
 467:main.c        **** 			{
 468:main.c        **** 				q[ind] = temp_buff[1];
 469:main.c        **** 				ind++;
 470:main.c        **** 			}
 471:main.c        **** 			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
 472:main.c        **** 			{
 473:main.c        **** 				q[ind] = temp_buff[2];
 474:main.c        **** 				ind++;
 475:main.c        **** 			}
 476:main.c        **** 			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
 477:main.c        **** 			{
 478:main.c        **** 				q[ind] = temp_buff[3];
 479:main.c        **** 				ind++;
 480:main.c        **** 			}
 481:main.c        **** 
 482:main.c        **** 			q[ind] = 0;
 483:main.c        **** 			ind++;
 484:main.c        **** 			temp = 0; 
 485:main.c        **** 			temp2 = 0;
 486:main.c        **** 			temp_buff[0] = 0;
 487:main.c        **** 			temp_buff[1] = 0;
 488:main.c        **** 			temp_buff[2] = 0;
 489:main.c        **** 			temp_buff[3] = 0;
 490:main.c        **** 
 491:main.c        **** 		}
 492:main.c        **** 
 493:main.c        **** 		else if(asc == 'N')
 494:main.c        **** 		{
 495:main.c        **** 			a = ((short)temp2 & 0xFF00) / 0x00000100;
 496:main.c        **** 			q[ind] = (char)a;
 497:main.c        **** 			
 498:main.c        **** 			q[ind+1]  = (char)temp2 & 0xFF;
 499:main.c        **** 			ind += 2;
 500:main.c        **** 			temp = 0;
 501:main.c        **** 		}
 502:main.c        **** 	}
 503:main.c        **** 	// Get AD1.2
 504:main.c        **** 	if(ad1_2 == 'Y')
 505:main.c        **** 	{
 506:main.c        **** 		AD1CR = 0x00020FF04; // AD1.2
 507:main.c        **** 		AD1CR |= 0x01000000; // start conversion
 508:main.c        **** 		while((temp & 0x80000000) == 0)
 509:main.c        **** 		{
 510:main.c        **** 			temp = AD1DR;
 511:main.c        **** 		}
 512:main.c        **** 		temp &= 0x0000FFC0;
 513:main.c        **** 		temp2 = temp / 0x00000040;
 514:main.c        **** 
 515:main.c        **** 		AD1CR = 0x00000000;
 516:main.c        **** 
 517:main.c        **** 		if(asc == 'Y')
 518:main.c        **** 		{
 519:main.c        **** 			itoa(temp2, 10, temp_buff);
 520:main.c        **** 			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
 521:main.c        **** 			{
 522:main.c        **** 				q[ind] = temp_buff[0];
 523:main.c        **** 				ind++;
 524:main.c        **** 			}
 525:main.c        **** 			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
 526:main.c        **** 			{
 527:main.c        **** 				q[ind] = temp_buff[1];
 528:main.c        **** 				ind++;
 529:main.c        **** 			}
 530:main.c        **** 			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
 531:main.c        **** 			{
 532:main.c        **** 				q[ind] = temp_buff[2];
 533:main.c        **** 				ind++;
 534:main.c        **** 			}
 535:main.c        **** 			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
 536:main.c        **** 			{
 537:main.c        **** 				q[ind] = temp_buff[3];
 538:main.c        **** 				ind++;
 539:main.c        **** 			}
 540:main.c        **** 
 541:main.c        **** 			q[ind] = 0;
 542:main.c        **** 			ind++;
 543:main.c        **** 			temp = 0; 
 544:main.c        **** 			temp2 = 0;
 545:main.c        **** 			temp_buff[0] = 0;
 546:main.c        **** 			temp_buff[1] = 0;
 547:main.c        **** 			temp_buff[2] = 0;
 548:main.c        **** 			temp_buff[3] = 0;
 549:main.c        **** 
 550:main.c        **** 		}
 551:main.c        **** 
 552:main.c        **** 		else if(asc == 'N')
 553:main.c        **** 		{
 554:main.c        **** 			a = ((short)temp2 & 0xFF00) / 0x00000100;
 555:main.c        **** 			q[ind] = (char)a;
 556:main.c        **** 			
 557:main.c        **** 			q[ind+1]  = (char)temp2 & 0xFF;
 558:main.c        **** 			ind += 2;
 559:main.c        **** 			temp = 0;
 560:main.c        **** 		}
 561:main.c        **** 	}
 562:main.c        **** 	// Get AD0.4
 563:main.c        **** 	if(ad0_4 == 'Y')
 564:main.c        **** 	{
 565:main.c        **** 		AD0CR = 0x00020FF10; // AD0.4
 566:main.c        **** 		AD0CR |= 0x01000000; // start conversion
 567:main.c        **** 		while((temp & 0x80000000) == 0)
 568:main.c        **** 		{
 569:main.c        **** 			temp = AD0DR;
 570:main.c        **** 		}
 571:main.c        **** 		temp &= 0x0000FFC0;
 572:main.c        **** 		temp2 = temp / 0x00000040;
 573:main.c        **** 
 574:main.c        **** 		AD0CR = 0x00000000;
 575:main.c        **** 
 576:main.c        **** 		if(asc == 'Y')
 577:main.c        **** 		{
 578:main.c        **** 			itoa(temp2, 10, temp_buff);
 579:main.c        **** 			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
 580:main.c        **** 			{
 581:main.c        **** 				q[ind] = temp_buff[0];
 582:main.c        **** 				ind++;
 583:main.c        **** 			}
 584:main.c        **** 			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
 585:main.c        **** 			{
 586:main.c        **** 				q[ind] = temp_buff[1];
 587:main.c        **** 				ind++;
 588:main.c        **** 			}
 589:main.c        **** 			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
 590:main.c        **** 			{
 591:main.c        **** 				q[ind] = temp_buff[2];
 592:main.c        **** 				ind++;
 593:main.c        **** 			}
 594:main.c        **** 			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
 595:main.c        **** 			{
 596:main.c        **** 				q[ind] = temp_buff[3];
 597:main.c        **** 				ind++;
 598:main.c        **** 			}
 599:main.c        **** 
 600:main.c        **** 			q[ind] = 0;
 601:main.c        **** 			ind++;
 602:main.c        **** 			temp = 0; 
 603:main.c        **** 			temp2 = 0;
 604:main.c        **** 			temp_buff[0] = 0;
 605:main.c        **** 			temp_buff[1] = 0;
 606:main.c        **** 			temp_buff[2] = 0;
 607:main.c        **** 			temp_buff[3] = 0;
 608:main.c        **** 
 609:main.c        **** 		}
 610:main.c        **** 
 611:main.c        **** 		else if(asc == 'N')
 612:main.c        **** 		{
 613:main.c        **** 			a = ((short)temp2 & 0xFF00) / 0x00000100;
 614:main.c        **** 			q[ind] = (char)a;
 615:main.c        **** 			
 616:main.c        **** 			q[ind+1]  = (char)temp2 & 0xFF;
 617:main.c        **** 			ind += 2;
 618:main.c        **** 			temp = 0;
 619:main.c        **** 		}
 620:main.c        **** 	}
 621:main.c        **** 	// Get AD1.7
 622:main.c        **** 	if(ad1_7 == 'Y')
 623:main.c        **** 	{
 624:main.c        **** 		AD1CR = 0x00020FF80; // AD1.7
 625:main.c        **** 		AD1CR |= 0x01000000; // start conversion
 626:main.c        **** 		while((temp & 0x80000000) == 0)
 627:main.c        **** 		{
 628:main.c        **** 			temp = AD1DR;
 629:main.c        **** 		}
 630:main.c        **** 		temp &= 0x0000FFC0;
 631:main.c        **** 		temp2 = temp / 0x00000040;
 632:main.c        **** 
 633:main.c        **** 		AD1CR = 0x00000000;
 634:main.c        **** 
 635:main.c        **** 		if(asc == 'Y')
 636:main.c        **** 		{
 637:main.c        **** 			itoa(temp2, 10, temp_buff);
 638:main.c        **** 			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
 639:main.c        **** 			{
 640:main.c        **** 				q[ind] = temp_buff[0];
 641:main.c        **** 				ind++;
 642:main.c        **** 			}
 643:main.c        **** 			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
 644:main.c        **** 			{
 645:main.c        **** 				q[ind] = temp_buff[1];
 646:main.c        **** 				ind++;
 647:main.c        **** 			}
 648:main.c        **** 			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
 649:main.c        **** 			{
 650:main.c        **** 				q[ind] = temp_buff[2];
 651:main.c        **** 				ind++;
 652:main.c        **** 			}
 653:main.c        **** 			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
 654:main.c        **** 			{
 655:main.c        **** 				q[ind] = temp_buff[3];
 656:main.c        **** 				ind++;
 657:main.c        **** 			}
 658:main.c        **** 
 659:main.c        **** 			q[ind] = 0;
 660:main.c        **** 			ind++;
 661:main.c        **** 			temp = 0; 
 662:main.c        **** 			temp2 = 0;
 663:main.c        **** 			temp_buff[0] = 0;
 664:main.c        **** 			temp_buff[1] = 0;
 665:main.c        **** 			temp_buff[2] = 0;
 666:main.c        **** 			temp_buff[3] = 0;
 667:main.c        **** 
 668:main.c        **** 		}
 669:main.c        **** 
 670:main.c        **** 		else if(asc == 'N')
 671:main.c        **** 		{
 672:main.c        **** 			a = ((short)temp2 & 0xFF00) / 0x00000100;
 673:main.c        **** 			q[ind] = (char)a;
 674:main.c        **** 			
 675:main.c        **** 			q[ind+1]  = (char)temp2 & 0xFF;
 676:main.c        **** 			ind += 2;
 677:main.c        **** 			temp = 0;
 678:main.c        **** 		}
 679:main.c        **** 	}
 680:main.c        **** 	// Get AD1.6
 681:main.c        **** 	if(ad1_6 == 'Y')
 682:main.c        **** 	{
 683:main.c        **** 		AD1CR = 0x00020FF40; // AD1.3
 684:main.c        **** 		AD1CR |= 0x01000000; // start conversion
 685:main.c        **** 		while((temp & 0x80000000) == 0)
 686:main.c        **** 		{
 687:main.c        **** 			temp = AD1DR;
 688:main.c        **** 		}
 689:main.c        **** 		temp &= 0x0000FFC0;
 690:main.c        **** 		temp2 = temp / 0x00000040;
 691:main.c        **** 
 692:main.c        **** 		AD1CR = 0x00000000;
 693:main.c        **** 
 694:main.c        **** 		if(asc == 'Y')
 695:main.c        **** 		{
 696:main.c        **** 			itoa(temp2, 10, temp_buff);
 697:main.c        **** 			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
 698:main.c        **** 			{
 699:main.c        **** 				q[ind] = temp_buff[0];
 700:main.c        **** 				ind++;
 701:main.c        **** 			}
 702:main.c        **** 			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
 703:main.c        **** 			{
 704:main.c        **** 				q[ind] = temp_buff[1];
 705:main.c        **** 				ind++;
 706:main.c        **** 			}
 707:main.c        **** 			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
 708:main.c        **** 			{
 709:main.c        **** 				q[ind] = temp_buff[2];
 710:main.c        **** 				ind++;
 711:main.c        **** 			}
 712:main.c        **** 			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
 713:main.c        **** 			{
 714:main.c        **** 				q[ind] = temp_buff[3];
 715:main.c        **** 				ind++;
 716:main.c        **** 			}
 717:main.c        **** 
 718:main.c        **** 			q[ind] = 0;
 719:main.c        **** 			ind++;
 720:main.c        **** 			temp = 0; 
 721:main.c        **** 			temp2 = 0;
 722:main.c        **** 			temp_buff[0] = 0;
 723:main.c        **** 			temp_buff[1] = 0;
 724:main.c        **** 			temp_buff[2] = 0;
 725:main.c        **** 			temp_buff[3] = 0;
 726:main.c        **** 
 727:main.c        **** 		}
 728:main.c        **** 
 729:main.c        **** 		else if(asc == 'N')
 730:main.c        **** 		{
 731:main.c        **** 			a = ((short)temp2 & 0xFF00) / 0x00000100;
 732:main.c        **** 			q[ind] = (char)a;
 733:main.c        **** 			
 734:main.c        **** 			q[ind+1]  = (char)temp2 & 0xFF;
 735:main.c        **** 			ind += 2;
 736:main.c        **** 			temp = 0;
 737:main.c        **** 		}
 738:main.c        **** 	}
 739:main.c        **** 	
 740:main.c        **** 	for(j = 0; j < ind; j++)
 741:main.c        **** 	{
 742:main.c        **** 		if(RX_in < 512)
 743:main.c        **** 		{
 744:main.c        **** 			RX_array1[RX_in] = q[j];
 745:main.c        **** 			RX_in++;
 746:main.c        **** 
 747:main.c        **** 			if(RX_in == 512) log_array1 = 1;
 748:main.c        **** 		}
 749:main.c        **** 		else if(RX_in >= 512)
 750:main.c        **** 		{
 751:main.c        **** 			RX_array2[RX_in - 512] = q[j];
 752:main.c        **** 			RX_in++;
 753:main.c        **** 
 754:main.c        **** 			if(RX_in == 1024)
 755:main.c        **** 			{
 756:main.c        **** 				log_array2 = 1;
 757:main.c        **** 				RX_in = 0;
 758:main.c        **** 			}
 759:main.c        **** 		}
 760:main.c        **** 	}
 761:main.c        **** 	if(RX_in < 512)
 762:main.c        **** 	{
 763:main.c        **** 		if(asc == 'N') { RX_array1[RX_in] = '$'; }
 764:main.c        **** 		else if(asc == 'Y'){ RX_array1[RX_in] = 13; }
 765:main.c        **** 		RX_in++;
 766:main.c        **** 
 767:main.c        **** 		if(RX_in == 512) log_array1 = 1;
 768:main.c        **** 	}
 769:main.c        **** 	else if(RX_in >= 512)
 770:main.c        **** 	{
 771:main.c        **** 		
 772:main.c        **** 		if(asc == 'N') RX_array2[RX_in - 512] = '$';
 773:main.c        **** 		else if(asc == 'Y'){ RX_array2[RX_in - 512] = 13; }
 774:main.c        **** 		RX_in++;
 775:main.c        **** 		
 776:main.c        **** 		if(RX_in == 1024)
 777:main.c        **** 		{
 778:main.c        **** 			log_array2 = 1;
 779:main.c        **** 			RX_in = 0;
 780:main.c        **** 		}
 781:main.c        **** 	}
 782:main.c        **** 	if(RX_in < 512)
 783:main.c        **** 	{
 784:main.c        **** 		if(asc == 'N') RX_array1[RX_in] = '$';
 785:main.c        **** 		else if(asc == 'Y'){ RX_array1[RX_in] = 10; }
 786:main.c        **** 		RX_in++;
 787:main.c        **** 
 788:main.c        **** 		if(RX_in == 512) log_array1 = 1;
 789:main.c        **** 	}
 790:main.c        **** 	else if(RX_in >= 512)
 791:main.c        **** 	{
 792:main.c        **** 		
 793:main.c        **** 		if(asc == 'N') RX_array2[RX_in - 512] = '$';
 794:main.c        **** 		else if(asc == 'Y'){ RX_array2[RX_in - 512] = 10; }
 795:main.c        **** 		RX_in++;
 796:main.c        **** 		
 797:main.c        **** 		if(RX_in == 1024)
 798:main.c        **** 		{
 799:main.c        **** 			log_array2 = 1;
 800:main.c        **** 			RX_in = 0;
 801:main.c        **** 		}
 802:main.c        **** 	}
 803:main.c        **** 
 804:main.c        **** 	VICVectAddr= 0;
 805:main.c        **** }
 806:main.c        **** 
 807:main.c        **** void FIQ_Routine(void)
 808:main.c        **** {
 809:main.c        **** 	char a;
 810:main.c        **** 	int j;
 811:main.c        **** 
 812:main.c        **** 	stat(0,ON);
 813:main.c        **** 	for(j = 0; j < 5000000; j++);
 814:main.c        **** 	stat(0,OFF);
 815:main.c        **** 	a = U0RBR;
 816:main.c        **** 
 817:main.c        **** 	a = U0IIR;  // have to read this to clear the interrupt
 818:main.c        **** }
 819:main.c        **** 
 820:main.c        **** void SWI_Routine(void)
 821:main.c        **** {
 822:main.c        **** 	while(1);
 823:main.c        **** }
 824:main.c        **** 
 825:main.c        **** void UNDEF_Routine(void)
 826:main.c        **** {
 827:main.c        **** 	stat(0,ON);
 828:main.c        **** }
 829:main.c        **** 
 830:main.c        **** void setup_uart0(int newbaud, char want_ints)
 831:main.c        **** {
 832:main.c        **** 	baud = newbaud;
 833:main.c        **** 	U0LCR = 0x83;   // 8 bits, no parity, 1 stop bit, DLAB = 1
 834:main.c        **** 	
 835:main.c        **** 	if(baud == 1200)
 836:main.c        **** 	{
 837:main.c        **** 		U0DLM = 0x0C;
 838:main.c        **** 		U0DLL = 0x00;
 839:main.c        **** 	}
 840:main.c        **** 	else if(baud == 2400)
 841:main.c        **** 	{
 842:main.c        **** 		U0DLM = 0x06;
 268              	SWI_Routine
 269              		.align	2
 270              		.global	stat
 272              	stat:
 273              	.LFB12:
 274              		.loc 1 925 0
 275 020c FEFFFFEA 		@ Function supports interworking.
 276              		@ args = 0, pretend = 0, frame = 0
 277              		@ frame_needed = 0, uses_anonymous_args = 0
 278              		@ link register save eliminated.
 279              	.LVL1:
 280              		.loc 1 926 0
 281              		cmp	r0, #0
 282              		.loc 1 925 0
 843:main.c        **** 
 844:main.c        **** 	else if(baud == 9600)
 845:main.c        **** 	{
 846:main.c        **** 		U0DLM = 0x01;
 847:main.c        **** 		U0DLL = 0x80;
 848:main.c        **** 	}
 849:main.c        **** 	else if(baud == 19200)
 850:main.c        **** 	{
 851:main.c        **** 		U0DLM = 0x00;
 852:main.c        **** 		U0DLL = 0xC0;
 853:main.c        **** 	}
 854:main.c        **** 	else if(baud == 38400)
 855:main.c        **** 	{
 856:main.c        **** 		U0DLM = 0x00;
 857:main.c        **** 		U0DLL = 0x60;
 858:main.c        **** 	}
 859:main.c        **** 	else if(baud == 57600)
 860:main.c        **** 	{
 861:main.c        **** 		U0DLM = 0x00;
 862:main.c        **** 		U0DLL = 0x40;
 863:main.c        **** 	}
 864:main.c        **** 	else if(baud == 115200)
 865:main.c        **** 	{
 866:main.c        **** 		U0DLM = 0x00;
 867:main.c        **** 		U0DLL = 0x20;
 868:main.c        **** 	}
 869:main.c        **** 
 870:main.c        **** 	U0FCR = 0x01;
 871:main.c        **** 	U0LCR = 0x03;   
 872:main.c        **** 
 873:main.c        **** 	if(want_ints == 1)
 874:main.c        **** 	{
 875:main.c        **** 		enableIRQ();
 876:main.c        **** 		VICIntSelect &= ~0x00000040;
 877:main.c        **** 		VICIntEnable |= 0x00000040;
 878:main.c        **** 		VICVectCntl1 = 0x26;
 879:main.c        **** 		VICVectAddr1 = (unsigned int)UART0ISR;
 880:main.c        **** 		U0IER = 0x01;
 881:main.c        **** 	}
 882:main.c        **** 	else if(want_ints == 2)
 883:main.c        **** 	{
 884:main.c        **** 		enableIRQ();
 885:main.c        **** 		VICIntSelect &= ~0x00000040;
 886:main.c        **** 		VICIntEnable |= 0x00000040;
 887:main.c        **** 		VICVectCntl2 = 0x26;
 888:main.c        **** 		VICVectAddr2 = (unsigned int)UART0ISR_2;
 889:main.c        **** 		U0IER = 0X01;
 890:main.c        **** 	}
 891:main.c        **** 	else if(want_ints == 0)
 892:main.c        **** 	{
 893:main.c        **** 		VICIntEnClr = 0x00000040;
 894:main.c        **** 		U0IER = 0x00;
 895:main.c        **** 	}
 896:main.c        **** }
 897:main.c        **** void stat(int statnum, int onoff)
 898:main.c        **** {
 899:main.c        **** 	if(statnum) // Stat 1
 900:main.c        **** 	{
 901:main.c        **** 		if(onoff){ IOCLR0 = 0x00000800; } // On
 902:main.c        **** 		else { IOSET0 = 0x00000800; } // Off
 903:main.c        **** 	}
 904:main.c        **** 	else // Stat 0 
 905:main.c        **** 	{
 906:main.c        **** 		if(onoff){ IOCLR0 = 0x00000004; } // On
 907:main.c        **** 		else { IOSET0 = 0x00000004; } // Off
 908:main.c        **** 	}
 909:main.c        **** }
 910:main.c        **** 
 911:main.c        **** void Log_init(void)
 912:main.c        **** {
 913:main.c        **** 	int x, mark = 0, ind = 0;
 914:main.c        **** 	char temp, temp2 = 0, safety = 0;
 915:main.c        **** //	signed char handle;
 916:main.c        **** 
 917:main.c        **** 	if(root_file_exists("LOGCON.txt"))
 918:main.c        **** 	{
 919:main.c        **** 		//rprintf("\n\rFound LOGcon.txt\n");
 920:main.c        **** 		fd = root_open("LOGCON.txt");
 921:main.c        **** 		stringSize = fat16_read_file(fd, (unsigned char *)stringBuf, 512);
 922:main.c        **** 		stringBuf[stringSize] = '\0';
 923:main.c        **** 		fat16_close_file(fd);
 924:main.c        **** 	}
 925:main.c        **** 	else
 283              	r prologue
 284              		.loc 1 926 0
 285              		beq	.L31
 286              		.loc 1 928 0
 287              		cmp	r1, #0
 288              		movne	r2, #2048
 926:main.c        **** OGCON.txt");
 289              	1 929 0
 290 0210 000050E3 		moveq	r2, #2048
 291              		.loc 1 928 0
 292              		beq	.L40
 293              		b	.L39
 294 0214 0400000A 	.L31:
 927:main.c        **** 	if(fd == NULL)
 928:main.c        **** 		{
 295              	1 933 0
 296 0218 000051E3 		cmp	r1, #0
 297 021c 022BA013 		.loc 1 934 0
 929:main.c        ****  	rprintf("Error creating LOGCON.txt, locking up...\n\r");
 298              	veq	r2, #4
 299 0220 022BA003 		.loc 1 933 0
 300              		beq	.L40
 301 0224 0700000A 		mov	r2, #4
 302 0228 030000EA 	.L39:
 303              		ldr	r3, .L41
 930:main.c        **** 	 	while(1)
 931:main.c        **** 			{
 932:main.c        **** 				stat(0,ON);
 933:main.c        **** 				delay_ms(50);
 304              	2, [r3, #12]
 305 022c 000051E3 		bx	lr
 934:main.c        **** stat(0,OFF);
 306              	40:
 307 0230 0420A003 		.loc 1 934 0
 308              		ldr	r3, .L41
 309 0234 0300000A 		str	r2, [r3, #4]
 310 0238 0420A0E3 		bx	lr
 311              	.L42:
 312 023c 10309FE5 		.align	2
 313 0240 0C2083E5 	.L41:
 314 0244 1EFF2FE1 		.word	-536707072
 315              	.LFE12:
 317 0248 04309FE5 		.align	2
 318 024c 042083E5 		.global	UNDEF_Routine
 320              	UNDEF_Routine:
 321              	.LFB10:
 322              		.loc 1 847 0
 323 0254 008002E0 		@ ARM Exception Handler.
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326              		stmfd	sp!, {r0, r1, r2, r3, ip, lr}
 327              	.LCFI2:
 328              		.loc 1 848 0
 329              		mov	r0, #0
 330              		mov	r1, #1
 331              		bl	stat
 332              		.loc 1 849 0
 333              		ldmfd	sp!, {r0, r1, r2, r3, ip, lr}
 334              		movs	pc, lr
 335 0258 0F502DE9 	.LFE10:
 337              		.align	2
 338 025c 0000A0E3 		.global	FIQ_Routine
 340 0264 FEFFFFEB 	FIQ_Routine:
 341              	.LFB8:
 342 0268 0F50BDE8 		.loc 1 829 0
 343 026c 0EF0B0E1 		@ Fast Interrupt Service Routine.
 344              		@ args = 0, pretend = 0, frame = 0
 345              		@ frame_needed = 0, uses_anonymous_args = 0
 346              		sub	lr, lr, #4
 347              		stmfd	sp!, {r0, r1, r2, r3, lr}
 348              	.LCFI3:
 349              		.loc 1 833 0
 350              		mov	r0, #0
 351              		mov	r1, #1
 352              		bl	stat
 353              		.loc 1 835 0
 354              		mov	r0, #0
 355 0270 04E04EE2 		mov	r1, r0
 356 0274 0F402DE9 		bl	stat
 357              		.loc 1 836 0
 358              		ldr	r3, .L47
 359 0278 0000A0E3 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 360 027c 0110A0E3 		.loc 1 838 0
 361 0280 FEFFFFEB 		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 362              		.loc 1 839 0
 363 0284 0000A0E3 		ldmfd	sp!, {r0, r1, r2, r3, lr}
 364 0288 0010A0E1 		subs	pc, lr, #4
 365 028c FEFFFFEB 	.L48:
 366              		.align	2
 367 0290 0C309FE5 	.L47:
 368 0294 0020D3E5 		.word	-536821760
 369              	.LFE8:
 371              		.align	2
 372 029c 0F40BDE8 		.global	delay_ms
 374              	delay_ms:
 375              	.LFB21:
 376              		.loc 1 1327 0
 377 02a4 00C000E0 		@ Function supports interworking.
 378              		@ args = 0, pretend = 0, frame = 0
 379              		@ frame_needed = 0, uses_anonymous_args = 0
 380              		@ link register save eliminated.
 381              	.LVL2:
 382              		.loc 1 1329 0
 383              		ldr	r3, .L54
 384              		mul	r0, r3, r0
 935:main.c        **** 			stat(1,ON);
 936:main.c        **** 				delay_ms(50);
 937:main.c        **** 				stat(1,OFF);
 938:main.c        **** 			}
 939:main.c        **** 		}
 940:main.c        **** 
 941:main.c        **** 		strcpy(stringBuf, "MODE = 0\r\nASCII = N\r\nBaud = 4\r\nFrequency = 100\r\nTrigger Character = $\
 942:main.c        **** 		stringSize = strlen(stringBuf);
 943:main.c        **** 		fat16_write_file(fd, (unsigned char*)stringBuf, stringSize);
 944:main.c        **** 		sd_raw_sync();
 945:main.c        **** 	}
 946:main.c        **** 
 947:main.c        **** 	for(x = 0; x < stringSize; x++)
 948:main.c        **** 	{
 949:main.c        **** 		temp = stringBuf[x];
 950:main.c        **** 		if(temp == 10)
 951:main.c        **** 		{
 952:main.c        **** 			mark = x;
 953:main.c        **** 			ind++;
 954:main.c        **** 			if(ind == 1)
 955:main.c        **** 			{
 956:main.c        **** 				mode = stringBuf[mark-2]-48; // 0 = auto uart, 1 = trigger uart, 2 = adc
 957:main.c        **** 				rprintf("mode = %d\n\r",mode);
 958:main.c        **** 			}
 959:main.c        **** 			else if(ind == 2)
 960:main.c        **** 			{
 961:main.c        **** 				asc = stringBuf[mark-2]; // default is 'N'
 962:main.c        **** 				rprintf("asc = %c\n\r",asc);
 963:main.c        **** 			}
 964:main.c        **** 			else if(ind == 3)
 965:main.c        **** 			{
 966:main.c        **** 				if(stringBuf[mark-2] == '1'){ baud = 1200; }
 967:main.c        **** 				else if(stringBuf[mark-2] == '2'){ baud = 2400; }
 968:main.c        **** 				else if(stringBuf[mark-2] == '3'){ baud = 4800; }
 969:main.c        **** 				else if(stringBuf[mark-2] == '4'){ baud = 9600; }
 970:main.c        **** 				else if(stringBuf[mark-2] == '5'){ baud = 19200; }
 971:main.c        **** 				else if(stringBuf[mark-2] == '6'){ baud = 38400; }
 972:main.c        **** 				else if(stringBuf[mark-2] == '7'){ baud = 57600; }
 973:main.c        **** 				else if(stringBuf[mark-2] == '8'){ baud = 115200; }
 974:main.c        **** 
 975:main.c        **** 				rprintf("baud = %d\n\r",baud);
 976:main.c        **** 			}
 977:main.c        **** 			else if(ind == 4)
 978:main.c        **** 			{
 979:main.c        **** 				freq = (stringBuf[mark-2]-48) + (stringBuf[mark-3]-48) * 10;
 980:main.c        **** 				if((stringBuf[mark-4] >= 48) && (stringBuf[mark-4] < 58))
 981:main.c        **** 				{
 982:main.c        **** 					freq+= (stringBuf[mark-4]-48) * 100;
 983:main.c        **** 					if((stringBuf[mark-5] >= 48) && (stringBuf[mark-5] < 58)){ freq += (stringBuf[mark-5]-48)*1000
 984:main.c        **** 				}
 985:main.c        **** 				rprintf("freq = %d\n\r",freq);
 986:main.c        **** 			}
 987:main.c        **** 			else if(ind == 5)
 988:main.c        **** 			{
 989:main.c        **** 				trig = stringBuf[mark-2]; // default is $
 990:main.c        **** 				
 991:main.c        **** 				rprintf("trig = %c\n\r",trig);
 992:main.c        **** 			}
 993:main.c        **** 			else if(ind == 6)
 994:main.c        **** 			{
 995:main.c        **** 				frame = (stringBuf[mark-2]-48) + (stringBuf[mark-3]-48) * 10 + (stringBuf[mark-4]-48)*100;
 996:main.c        **** 				if(frame > 510){ frame = 510; } // up to 510 characters
 997:main.c        **** 				rprintf("frame = %d\n\r",frame);
 998:main.c        **** 			}
 999:main.c        **** 			else if(ind == 7)
1000:main.c        **** 			{
1001:main.c        **** 				ad1_3 = stringBuf[mark-2]; // default is 'N'
1002:main.c        **** 				if(ad1_3 == 'Y'){ temp2++; }
1003:main.c        **** 				rprintf("ad1_3 = %c\n\r",ad1_3);
1004:main.c        **** 			}
1005:main.c        **** 			else if(ind == 8)
1006:main.c        **** 			{
1007:main.c        **** 				ad0_3 = stringBuf[mark-2]; // default is 'N'
1008:main.c        **** 				if(ad0_3 == 'Y'){ temp2++; }
1009:main.c        **** 				rprintf("ad0_3 = %c\n\r",ad0_3);
1010:main.c        **** 			}
1011:main.c        **** 			else if(ind == 9)
1012:main.c        **** 			{
1013:main.c        **** 				ad0_2 = stringBuf[mark-2]; // default is 'N'
1014:main.c        **** 				if(ad0_2 == 'Y'){ temp2++; }
1015:main.c        **** 				rprintf("ad0_2 = %c\n\r",ad0_2);
1016:main.c        **** 			}
1017:main.c        **** 			else if(ind == 10)
1018:main.c        **** 			{
1019:main.c        **** 				ad0_1 = stringBuf[mark-2]; // default is 'N'
1020:main.c        **** 				if(ad0_1 == 'Y'){ temp2++; }
1021:main.c        **** 				rprintf("ad0_1 = %c\n\r",ad0_1);
1022:main.c        **** 			}
1023:main.c        **** 			else if(ind == 11)
1024:main.c        **** 			{
1025:main.c        **** 				ad1_2 = stringBuf[mark-2]; // default is 'N'
1026:main.c        **** 				if(ad1_2 == 'Y'){ temp2++; }
1027:main.c        **** 				rprintf("ad1_2 = %c\n\r",ad1_2);
1028:main.c        **** 			}
1029:main.c        **** 			else if(ind == 12)
1030:main.c        **** 			{
1031:main.c        **** 				ad0_4 = stringBuf[mark-2]; // default is 'N'
1032:main.c        **** 				if(ad0_4 == 'Y'){ temp2++; }
1033:main.c        **** 				rprintf("ad0_4 = %c\n\r",ad0_4);
1034:main.c        **** 			}
1035:main.c        **** 			else if(ind == 13)
1036:main.c        **** 			{
1037:main.c        **** 				ad1_7 = stringBuf[mark-2]; // default is 'N'
1038:main.c        **** 				if(ad1_7 == 'Y'){ temp2++; }
1039:main.c        **** 				rprintf("ad1_7 = %c\n\r",ad1_7);
1040:main.c        **** 			}
1041:main.c        **** 			else if(ind == 14)
1042:main.c        **** 			{
1043:main.c        **** 				ad1_6 = stringBuf[mark-2]; // default is 'N'
1044:main.c        **** 				if(ad1_6 == 'Y'){ temp2++; }
1045:main.c        **** 				rprintf("ad1_6 = %c\n\r",ad1_6);
1046:main.c        **** 			}
1047:main.c        **** 			else if(ind == 15)
1048:main.c        **** 			{
1049:main.c        **** 				safety = stringBuf[mark-2]; // default is 'Y'
1050:main.c        **** 				rprintf("safety = %c\n\r",safety);
1051:main.c        **** 			}
1052:main.c        **** 		}
1053:main.c        **** 	}
1054:main.c        **** 
1055:main.c        **** 	if(safety == 'Y')
1056:main.c        **** 	{
1057:main.c        **** 		if((temp2 ==10) && (freq > 150)){ freq = 150; }
1058:main.c        **** 		else if((temp2 == 9) && (freq > 166)){ freq = 166; }
1059:main.c        **** 		else if((temp2 == 8) && (freq > 187)){ freq = 187; }
1060:main.c        **** 		else if((temp2 == 7) && (freq > 214)){ freq = 214; }
1061:main.c        **** 		else if((temp2 == 6) && (freq > 250)){ freq = 250; }
1062:main.c        **** 		else if((temp2 == 5) && (freq > 300)){ freq = 300; }
1063:main.c        **** 		else if((temp2 == 4) && (freq > 375)){ freq = 375; }
1064:main.c        **** 		else if((temp2 == 3) && (freq > 500)){ freq = 500; }
1065:main.c        **** 		else if((temp2 == 2) && (freq > 750)){ freq = 750; }
1066:main.c        **** 		else if((temp2 == 1) && (freq > 1500)){ freq = 1500; }
1067:main.c        **** 		else if((temp2 == 0)){ freq = 100; }
1068:main.c        **** 	}
1069:main.c        **** 	
1070:main.c        **** 	if(safety == 'T'){ test(); }
1071:main.c        **** 
1072:main.c        **** }
1073:main.c        **** 
1074:main.c        **** 
1075:main.c        **** void mode_0(void) // Auto UART mode
1076:main.c        **** {
1077:main.c        **** 	rprintf("MODE 0\n\r");
1078:main.c        **** 	setup_uart0(baud,1);
1079:main.c        **** 	stringSize = 512;
1080:main.c        **** 	mode_action();
1081:main.c        **** 	//rprintf("Exit mode 0\n\r");
1082:main.c        **** 
1083:main.c        **** }
1084:main.c        **** 
1085:main.c        **** void mode_1(void)
1086:main.c        **** {
1087:main.c        **** 	rprintf("MODE 1\n\r");	
1088:main.c        **** 
1089:main.c        **** 	setup_uart0(baud,2);
1090:main.c        **** 	stringSize = frame + 2;
1091:main.c        **** 
1092:main.c        **** 	mode_action();
1093:main.c        **** }
1094:main.c        **** 
1095:main.c        **** void mode_2(void)
1096:main.c        **** {
1097:main.c        **** 	rprintf("MODE 2\n\r");	
1098:main.c        **** 	enableIRQ();
1099:main.c        **** 	// Timer0  interrupt is an IRQ interrupt
1100:main.c        **** 	VICIntSelect &= ~0x00000010;
1101:main.c        **** 	// Enable Timer0 interrupt
1102:main.c        **** 	VICIntEnable |= 0x00000010;
1103:main.c        **** 	// Use slot 2 for UART0 interrupt
1104:main.c        **** 	VICVectCntl2 = 0x24;
1105:main.c        **** 	// Set the address of ISR for slot 1
1106:main.c        **** 	VICVectAddr2 = (unsigned int)MODE2ISR;
1107:main.c        **** 
1108:main.c        **** 	T0TCR = 0x00000002;	// Reset counter and prescaler
1109:main.c        **** 	T0MCR = 0x00000003;	// On match reset the counter and generate interrupt
1110:main.c        **** 	T0MR0 = 58982400 / freq;
1111:main.c        **** 
1112:main.c        **** 	T0PR = 0x00000000;
1113:main.c        **** 
1114:main.c        **** 	T0TCR = 0x00000001; // enable timer
1115:main.c        **** 
1116:main.c        **** 	stringSize = 512;
1117:main.c        **** 	mode_action();
1118:main.c        **** }
1119:main.c        **** 
1120:main.c        **** void mode_action(void)
1121:main.c        **** {
1122:main.c        **** 	int j;
1123:main.c        **** 	while(1)
1124:main.c        **** 	{
1125:main.c        **** 		
1126:main.c        **** 		if(log_array1 == 1)
1127:main.c        **** 		{
1128:main.c        **** 			stat(0,ON);
1129:main.c        **** 				
1130:main.c        **** 			if(fat16_write_file(handle,(unsigned char *)RX_array1, stringSize) < 0)
1131:main.c        **** 			{
1132:main.c        **** 				while(1)
1133:main.c        **** 				{
1134:main.c        **** 					stat(0,ON);
1135:main.c        **** 					for(j = 0; j < 500000; j++)
1136:main.c        **** 					stat(0,OFF);
1137:main.c        **** 					stat(1,ON);
1138:main.c        **** 					for(j = 0; j < 500000; j++)
1139:main.c        **** 					stat(1,OFF);
1140:main.c        **** 				}
1141:main.c        **** 			}
1142:main.c        **** 			
1143:main.c        **** 			sd_raw_sync();
1144:main.c        **** 			stat(0,OFF);
1145:main.c        **** 			log_array1 = 0;
1146:main.c        **** 		}
1147:main.c        **** 
1148:main.c        **** 		if(log_array2 == 1)
1149:main.c        **** 		{
1150:main.c        **** 			stat(1,ON);
1151:main.c        **** 			
1152:main.c        **** 			if(fat16_write_file(handle,(unsigned char *)RX_array2, stringSize) < 0)
1153:main.c        **** 			{
1154:main.c        **** 				while(1)
1155:main.c        **** 				{
1156:main.c        **** 					stat(0,ON);
1157:main.c        **** 					for(j = 0; j < 500000; j++)
1158:main.c        **** 					stat(0,OFF);
1159:main.c        **** 					stat(1,ON);
1160:main.c        **** 					for(j = 0; j < 500000; j++)
1161:main.c        **** 					stat(1,OFF);
1162:main.c        **** 				}
1163:main.c        **** 			}
1164:main.c        **** 			
1165:main.c        **** 			sd_raw_sync();
1166:main.c        **** 			stat(1,OFF);
1167:main.c        **** 			log_array2 = 0;
1168:main.c        **** 		}
1169:main.c        **** 
1170:main.c        **** 		if((IOPIN0 & 0x00000008) == 0) // if button pushed, log file & quit
1171:main.c        **** 		{
1172:main.c        **** 			VICIntEnClr = 0xFFFFFFFF;
1173:main.c        **** 
1174:main.c        **** 			if(RX_in < 512)
1175:main.c        **** 			{
1176:main.c        **** 				fat16_write_file(handle, (unsigned char *)RX_array1, RX_in);
1177:main.c        **** 				sd_raw_sync();
1178:main.c        **** 			}
1179:main.c        **** 			else if(RX_in >= 512)
1180:main.c        **** 			{
1181:main.c        **** 				fat16_write_file(handle, (unsigned char *)RX_array2, RX_in - 512);
1182:main.c        **** 				sd_raw_sync();
1183:main.c        **** 			}
1184:main.c        **** 			while(1)
1185:main.c        **** 			{
1186:main.c        **** 				stat(0,ON);
1187:main.c        **** 				for(j = 0; j < 500000; j++);
1188:main.c        **** 				stat(0,OFF);
1189:main.c        **** 				stat(1,ON);
1190:main.c        **** 				for(j = 0; j < 500000; j++);
1191:main.c        **** 				stat(1,OFF);
1192:main.c        **** 			}
1193:main.c        **** 		}
1194:main.c        **** 	}
1195:main.c        **** 
1196:main.c        **** }
1197:main.c        **** 
1198:main.c        **** void test(void)
1199:main.c        **** {
1200:main.c        **** 
1201:main.c        **** 	rprintf("\n\rLogomatic V2 Test Code:\n\r");
1202:main.c        **** 	rprintf("ADC Test will begin in 5 seconds, hit stop button to terminate the test.\r\n\n");
1203:main.c        **** 
1204:main.c        **** 	delay_ms(5000);
1205:main.c        **** 
1206:main.c        **** 	while((IOPIN0 & 0x00000008) == 0x00000008)
1207:main.c        **** 	{
1208:main.c        **** 		// Get AD1.3
1209:main.c        **** 		AD1CR = 0x0020FF08;
1210:main.c        **** 		AD_conversion(1);
1211:main.c        **** 
1212:main.c        **** 		// Get AD0.3
1213:main.c        **** 		AD0CR = 0x0020FF08;
1214:main.c        **** 		AD_conversion(0);
1215:main.c        **** 		
1216:main.c        **** 		// Get AD0.2
1217:main.c        **** 		AD0CR = 0x0020FF04;
1218:main.c        **** 		AD_conversion(0);
1219:main.c        **** 
1220:main.c        **** 		// Get AD0.1
1221:main.c        **** 		AD0CR = 0x0020FF02;
1222:main.c        **** 		AD_conversion(0);
1223:main.c        **** 
1224:main.c        **** 		// Get AD1.2
1225:main.c        **** 		AD1CR = 0x0020FF04;
1226:main.c        **** 		AD_conversion(1);
1227:main.c        **** 		
1228:main.c        **** 		// Get AD0.4
1229:main.c        **** 		AD0CR = 0x0020FF10;
1230:main.c        **** 		AD_conversion(0);
1231:main.c        **** 
1232:main.c        **** 		// Get AD1.7
1233:main.c        **** 		AD1CR = 0x0020FF80;
1234:main.c        **** 		AD_conversion(1);
1235:main.c        **** 
1236:main.c        **** 		// Get AD1.6
1237:main.c        **** 		AD1CR = 0x0020FF40;
1238:main.c        **** 		AD_conversion(1);
1239:main.c        **** 
1240:main.c        **** 		delay_ms(1000);
1241:main.c        **** 		rprintf("\n\r");
1242:main.c        **** 	}
1243:main.c        **** 
1244:main.c        **** 	rprintf("\n\rTest complete, locking up...\n\r");
1245:main.c        **** 	while(1);
1246:main.c        **** 		
1247:main.c        **** }
1248:main.c        **** 
1249:main.c        **** void AD_conversion(int regbank)
1250:main.c        **** {
1251:main.c        **** 	int temp = 0, temp2;
1252:main.c        **** 
1253:main.c        **** 	if(!regbank) // bank 0
1254:main.c        **** 	{
1255:main.c        **** 		AD0CR |= 0x01000000; // start conversion
1256:main.c        **** 		while((temp & 0x80000000) == 0)
1257:main.c        **** 		{
1258:main.c        **** 			temp = AD0DR;
1259:main.c        **** 		}
1260:main.c        **** 		temp &= 0x0000FFC0;
1261:main.c        **** 		temp2 = temp / 0x00000040;
1262:main.c        **** 
1263:main.c        **** 		AD0CR = 0x00000000;
1264:main.c        **** 	}
1265:main.c        **** 	else	    // bank 1
1266:main.c        **** 	{
1267:main.c        **** 		AD1CR |= 0x01000000; // start conversion
1268:main.c        **** 		while((temp & 0x80000000) == 0)
1269:main.c        **** 		{
1270:main.c        **** 			temp = AD1DR;
1271:main.c        **** 		}
1272:main.c        **** 		temp &= 0x0000FFC0;
1273:main.c        **** 		temp2 = temp / 0x00000040;
1274:main.c        **** 
1275:main.c        **** 		AD1CR = 0x00000000;
1276:main.c        **** 	}
1277:main.c        **** 
1278:main.c        **** 	rprintf("%d", temp2);
1279:main.c        **** 	rprintf("   ");
1280:main.c        **** 	
1281:main.c        **** }
1282:main.c        **** 
1283:main.c        **** void fat_initialize(void)
1284:main.c        **** {
1285:main.c        **** 	if(!sd_raw_init())
1286:main.c        **** 	{
1287:main.c        **** 		rprintf("SD Init Error\n\r");
1288:main.c        **** 		while(1);
1289:main.c        **** 	}
1290:main.c        **** 
1291:main.c        **** 	if(openroot())
1292:main.c        **** 	{ 
1293:main.c        **** 		rprintf("SD OpenRoot Error\n\r");
1294:main.c        **** 	}
1295:main.c        **** }
1296:main.c        **** 
1297:main.c        **** void delay_ms(int count)
1298:main.c        **** {
1299:main.c        **** 	int i;
1300:main.c        **** 	count *= 10000;
1301:main.c        **** 	for(i = 0; i < count; i++)
1302:main.c        **** 		asm volatile ("nop");
1303:main.c        **** }
1304:main.c        **** ...
 385              	:
 386              		.loc 1 1331 0
 387              		nop
 388              		.loc 1 1330 0
 389              		add	r3, r3, #1
 390              	.L50:
 391              		cmp	r3, r0
 392 02a8 1C309FE5 		blt	.L51
 393 02ac 930000E0 		.loc 1 1332 0
 394              		bx	lr
 395 02b0 0030A0E3 	.L55:
 396              		.align	2
 397              	.L54:
 398              		.word	10000
 399 02b4 010000EA 	.LFE21:
 401              		.section	.rodata.str1.4,"aMS",%progbits,1
 402 02b8 0000A0E1 		.align	2
 403              	.LC0:
 404 02bc 013083E2 		.ascii	"%d\000"
 405              		.align	2
 406 02c0 000053E1 	.LC1:
 407 02c4 FBFFFFBA 		.ascii	"   \000"
 408              		.text
 409 02c8 1EFF2FE1 		.align	2
 410              		.global	AD_conversion
 412              	AD_conversion:
 413 02cc 10270000 	.LFB19:
 414              		.loc 1 1279 0
 415              		@ Function supports interworking.
 416              		@ args = 0, pretend = 0, frame = 0
 417              		@ frame_needed = 0, uses_anonymous_args = 0
 418              	.LVL5:
 419 0000 256400   		.loc 1 1282 0
 420 0003 00       		cmp	r0, #0
 421              		.loc 1 1279 0
 422 0004 20202000 		str	lr, [sp, #-4]!
 423              	.LCFI4:
 424              		.loc 1 1282 0
 425              		bne	.L57
 426              		.loc 1 1284 0
 427              		ldr	r2, .L69
 428              		ldr	r3, [r2, #0]
 429              		orr	r3, r3, #16777216
 430              		str	r3, [r2, #0]
 431              	.L59:
 432              		.loc 1 1287 0
 433              		ldr	r0, .L69
 434              	.LVL6:
 435 02d0 000050E3 		ldr	r2, [r0, #4]
 436              		.loc 1 1285 0
 437 02d4 04E02DE5 		cmp	r2, #0
 438              		bge	.L59
 439              		.loc 1 1290 0
 440 02d8 0D00001A 		ldr	r3, .L69+4
 441              		and	r3, r2, r3
 442 02dc 7C209FE5 		mov	r1, r3, asr #6
 443 02e0 003092E5 	.LVL7:
 444 02e4 013483E3 		.loc 1 1292 0
 445 02e8 003082E5 		mov	r3, #0
 446              		str	r3, [r0, #0]
 447              		b	.L61
 448 02ec 6C009FE5 	.LVL8:
 449              	.L57:
 450 02f0 042090E5 		.loc 1 1296 0
 451              		ldr	r2, .L69+8
 452 02f4 000052E3 		ldr	r3, [r2, #0]
 453 02f8 FBFFFFAA 		orr	r3, r3, #16777216
 454              		str	r3, [r2, #0]
 455 02fc 60309FE5 	.L62:
 456 0300 033002E0 		.loc 1 1299 0
 457 0304 4313A0E1 		ldr	r0, .L69+8
 458              	.LVL9:
 459              		ldr	r1, [r0, #4]
 460 0308 0030A0E3 		.loc 1 1297 0
 461 030c 003080E5 		cmp	r1, #0
 462 0310 0C0000EA 		bge	.L62
 463              		.loc 1 1302 0
 464              		ldr	r3, .L69+4
 465              		.loc 1 1304 0
 466 0314 4C209FE5 		mov	r2, #0
 467 0318 003092E5 		.loc 1 1302 0
 468 031c 013483E3 		and	r3, r1, r3
 469 0320 003082E5 		.loc 1 1304 0
 470              		str	r2, [r0, #0]
 471              		.loc 1 1302 0
 472 0324 3C009FE5 		mov	r1, r3, asr #6
 473              	.LVL10:
 474 0328 041090E5 	.L61:
 475              		.loc 1 1307 0
 476 032c 000051E3 		ldr	r0, .L69+12
 477 0330 FBFFFFAA 		bl	rprintf
 478              	.LVL11:
 479 0334 28309FE5 		.loc 1 1308 0
 480              		ldr	r0, .L69+16
 481 0338 0020A0E3 		bl	rprintf
 482              		.loc 1 1310 0
 483 033c 033001E0 		ldr	lr, [sp], #4
 484              		bx	lr
 485 0340 002080E5 	.L70:
 486              		.align	2
 487 0344 4313A0E1 	.L69:
 488              		.word	-536657920
 489              		.word	65472
 490              		.word	-536477696
 491 0348 1C009FE5 		.word	.LC0
 492 034c FEFFFFEB 		.word	.LC1
 493              	.LFE19:
 495 0350 18009FE5 		.section	.rodata.str1.4
 496 0354 FEFFFFEB 		.align	2
 497              	.LC2:
 498 0358 04E09DE4 		.ascii	"\012\015Logomatic V2 Test Code:\012\015\000"
 499 035c 1EFF2FE1 		.align	2
 500              	.LC3:
 501              		.ascii	"ADC Test will begin in 5 seconds, hit stop button t"
 502              		.ascii	"o terminate the test.\015\012\012\000"
 503 0360 004003E0 		.align	2
 504 0364 C0FF0000 	.LC4:
 505 0368 000006E0 		.ascii	"\012\015\000"
 506 036c 00000000 		.align	2
 507 0370 04000000 	.LC5:
 508              		.ascii	"\012\015Test complete, locking up...\012\015\000"
 509              		.text
 510              		.align	2
 511              		.global	test
 513 0008 0A0D4C6F 	test:
 513      676F6D61 
 513      74696320 
 513      56322054 
 513      65737420 
 514              	.LFB18:
 515              		.loc 1 1228 0
 516 0024 41444320 		@ Function supports interworking.
 516      54657374 
 516      2077696C 
 516      6C206265 
 516      67696E20 
 517 0057 6F207465 		@ args = 0, pretend = 0, frame = 0
 517      726D696E 
 517      61746520 
 517      74686520 
 517      74657374 
 518              		@ frame_needed = 0, uses_anonymous_args = 0
 519              		stmfd	sp!, {r4, r5, r6, r7, lr}
 520 0070 0A0D00   	.LCFI5:
 521 0073 00       		.loc 1 1230 0
 522              		ldr	r0, .L77
 523 0074 0A0D5465 		bl	rprintf
 523      73742063 
 523      6F6D706C 
 523      6574652C 
 523      206C6F63 
 524              		.loc 1 1231 0
 525              		ldr	r0, .L77+4
 526              		bl	rprintf
 527              		.loc 1 1233 0
 528              		ldr	r0, .L77+8
 529              		bl	delay_ms
 530              		b	.L72
 531              	.L73:
 532              		.loc 1 1238 0
 533              		str	r6, [r5, #0]
 534 0374 F0402DE9 		.loc 1 1239 0
 535              		bl	AD_conversion
 536              		.loc 1 1243 0
 537 0378 C0009FE5 		mov	r0, #0
 538 037c FEFFFFEB 		.loc 1 1242 0
 539              		str	r6, [r4, #0]
 540 0380 BC009FE5 		.loc 1 1243 0
 541 0384 FEFFFFEB 		bl	AD_conversion
 542              		.loc 1 1247 0
 543 0388 B8009FE5 		mov	r0, #0
 544 038c FEFFFFEB 		.loc 1 1246 0
 545 0390 1E0000EA 		str	r7, [r4, #0]
 546              		.loc 1 1247 0
 547              		bl	AD_conversion
 548 0394 006085E5 		.loc 1 1250 0
 549              		ldr	r3, .L77+12
 550 0398 FEFFFFEB 		.loc 1 1251 0
 551              		mov	r0, #0
 552 039c 0000A0E3 		.loc 1 1250 0
 553              		str	r3, [r4, #0]
 554 03a0 006084E5 		.loc 1 1251 0
 555              		bl	AD_conversion
 556 03a4 FEFFFFEB 		.loc 1 1255 0
 557              		mov	r0, #1
 558 03a8 0000A0E3 		.loc 1 1254 0
 559              		str	r7, [r5, #0]
 560 03ac 007084E5 		.loc 1 1255 0
 561              		bl	AD_conversion
 562 03b0 FEFFFFEB 		.loc 1 1258 0
 563              		ldr	r3, .L77+16
 564 03b4 90309FE5 		.loc 1 1259 0
 565              		mov	r0, #0
 566 03b8 0000A0E3 		.loc 1 1258 0
 567              		str	r3, [r4, #0]
 568 03bc 003084E5 		.loc 1 1259 0
 569              		bl	AD_conversion
 570 03c0 FEFFFFEB 		.loc 1 1262 0
 571              		ldr	r3, .L77+20
 572 03c4 0100A0E3 		.loc 1 1263 0
 573              		mov	r0, #1
 574 03c8 007085E5 		.loc 1 1262 0
 575              		str	r3, [r5, #0]
 576 03cc FEFFFFEB 		.loc 1 1263 0
 577              		bl	AD_conversion
 578 03d0 78309FE5 		.loc 1 1266 0
 579              		ldr	r3, .L77+24
 580 03d4 0000A0E3 		.loc 1 1267 0
 581              		mov	r0, #1
 582 03d8 003084E5 		.loc 1 1266 0
 583              		str	r3, [r5, #0]
 584 03dc FEFFFFEB 		.loc 1 1267 0
 585              		bl	AD_conversion
 586 03e0 6C309FE5 		.loc 1 1269 0
 587              		mov	r0, #1000
 588 03e4 0100A0E3 		bl	delay_ms
 589              		.loc 1 1270 0
 590 03e8 003085E5 		ldr	r0, .L77+28
 591              		bl	rprintf
 592 03ec FEFFFFEB 	.L72:
 593              		.loc 1 1235 0
 594 03f0 60309FE5 		ldr	r3, .L77+32
 595              		ldr	r3, [r3, #0]
 596 03f4 0100A0E3 		tst	r3, #8
 597              		.loc 1 1238 0
 598 03f8 003085E5 		ldr	r5, .L77+36
 599              		ldr	r6, .L77+40
 600 03fc FEFFFFEB 		.loc 1 1242 0
 601              		ldr	r4, .L77+44
 602 0400 FA0FA0E3 		.loc 1 1239 0
 603 0404 FEFFFFEB 		mov	r0, #1
 604              		.loc 1 1246 0
 605 0408 4C009FE5 		ldr	r7, .L77+48
 606 040c FEFFFFEB 		.loc 1 1235 0
 607              		bne	.L73
 608              		.loc 1 1273 0
 609 0410 48309FE5 		ldr	r0, .L77+52
 610 0414 003093E5 		bl	rprintf
 611 0418 080013E3 	.L75:
 612              		b	.L75
 613 041c 40509FE5 	.L78:
 614 0420 40609FE5 		.align	2
 615              	.L77:
 616 0424 40409FE5 		.word	.LC2
 617              		.word	.LC3
 618 0428 0100A0E3 		.word	5000
 619              		.word	2162434
 620 042c 3C709FE5 		.word	2162448
 621              		.word	2162560
 622 0430 D7FFFF1A 		.word	2162496
 623              		.word	.LC4
 624 0434 38009FE5 		.word	-536707072
 625 0438 FEFFFFEB 		.word	-536477696
 626              		.word	2162440
 627 043c FEFFFFEA 		.word	-536657920
 628              		.word	2162436
 629              		.word	.LC5
 630              	.LFE18:
 632 0444 24000000 		.section	.rodata.str1.4
 633 0448 88130000 		.align	2
 634 044c 02FF2000 	.LC6:
 635 0450 10FF2000 		.ascii	"SD Init Error\012\015\000"
 636 0454 80FF2000 		.align	2
 637 0458 40FF2000 	.LC7:
 638 045c 70000000 		.ascii	"SD OpenRoot Error\012\015\000"
 639 0460 008002E0 		.text
 640 0464 000006E0 		.align	2
 641 0468 08FF2000 		.global	fat_initialize
 643 0470 04FF2000 	fat_initialize:
 644 0474 74000000 	.LFB20:
 645              		.loc 1 1313 0
 646              		@ Function supports interworking.
 647              		@ args = 0, pretend = 0, frame = 0
 648 0095 000000   		@ frame_needed = 0, uses_anonymous_args = 0
 649              		str	lr, [sp, #-4]!
 650 0098 53442049 	.LCFI6:
 650      6E697420 
 650      4572726F 
 650      720A0D00 
 651              		.loc 1 1314 0
 652              		bl	sd_raw_init
 653 00a8 5344204F 		cmp	r0, #0
 653      70656E52 
 653      6F6F7420 
 653      4572726F 
 653      720A0D00 
 654              		bne	.L80
 655              		.loc 1 1316 0
 656              		ldr	r0, .L86
 657              		bl	rprintf
 658              	.L82:
 659              		b	.L82
 660              	.L80:
 661              		.loc 1 1320 0
 662              		bl	openroot
 663              		cmp	r0, #0
 664 0478 04E02DE5 		.loc 1 1322 0
 665              		ldrne	r0, .L86+4
 666              		blne	rprintf
 667 047c FEFFFFEB 	.L85:
 668 0480 000050E3 		.loc 1 1324 0
 669 0484 0200001A 		ldr	lr, [sp], #4
 670              		bx	lr
 671 0488 1C009FE5 	.L87:
 672 048c FEFFFFEB 		.align	2
 673              	.L86:
 674 0490 FEFFFFEA 		.word	.LC6
 675              		.word	.LC7
 676              	.LFE20:
 678 0498 000050E3 		.align	2
 679              		.global	mode_action
 681 04a0 FEFFFF1B 	mode_action:
 682              	.LFB17:
 683              		.loc 1 1150 0
 684 04a4 04E09DE4 		@ Function supports interworking.
 685 04a8 1EFF2FE1 		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 687              		stmfd	sp!, {r4, lr}
 688              	.LCFI7:
 689 04ac 98000000 	.L90:
 690 04b0 A8000000 		.loc 1 1155 0
 691              		ldr	r3, .L124
 692              		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 693              		cmp	r3, #1
 694              		.loc 1 1157 0
 695              		mov	r0, #0
 696              		mov	r1, r3
 697              		.loc 1 1155 0
 698              		bne	.L91
 699              		.loc 1 1157 0
 700              		bl	stat
 701              		.loc 1 1159 0
 702 04b4 10402DE9 		ldr	r3, .L124+4
 703              		ldr	r0, [r3, #0]
 704              		ldr	r3, .L124+8
 705              		ldr	r1, .L124+12
 706 04b8 EC319FE5 		ldrh	r2, [r3, #0]
 707 04bc 0030D3E5 		bl	fat16_write_file
 708 04c0 010053E3 		tst	r0, #32768
 709              		beq	.L93
 710 04c4 0000A0E3 	.LVL12:
 711 04c8 0310A0E1 	.L117:
 712              		.loc 1 1163 0
 713 04cc 2600001A 		mov	r0, #0
 714              		mov	r1, #1
 715 04d0 FEFFFFEB 		bl	stat
 716              		mov	r4, #0
 717 04d4 D4319FE5 	.LVL13:
 718 04d8 000093E5 	.L95:
 719 04dc D0319FE5 		.loc 1 1165 0
 720 04e0 D0119FE5 		mov	r0, #0
 721 04e4 B020D3E1 		mov	r1, r0
 722 04e8 FEFFFFEB 		bl	stat
 723 04ec 020910E3 		.loc 1 1164 0
 724 04f0 1600000A 		ldr	r3, .L124+16
 725              		add	r4, r4, #1
 726              		cmp	r4, r3
 727              		bne	.L95
 728 04f4 0000A0E3 		.loc 1 1166 0
 729 04f8 0110A0E3 		mov	r0, #1
 730 04fc FEFFFFEB 		mov	r1, r0
 731 0500 0040A0E3 		bl	stat
 732              		mov	r4, #0
 733              	.LVL14:
 734              	.L97:
 735 0504 0000A0E3 		.loc 1 1168 0
 736 0508 0010A0E1 		mov	r0, #1
 737 050c FEFFFFEB 		mov	r1, #0
 738              		bl	stat
 739 0510 A4319FE5 		.loc 1 1167 0
 740 0514 014084E2 		ldr	r3, .L124+16
 741 0518 030054E1 		add	r4, r4, #1
 742 051c F8FFFF1A 		cmp	r4, r3
 743              		bne	.L97
 744 0520 0100A0E3 		b	.L117
 745 0524 0010A0E1 	.LVL15:
 746 0528 FEFFFFEB 	.L93:
 747 052c 0040A0E3 		.loc 1 1172 0
 748              		bl	sd_raw_sync
 749              		.loc 1 1173 0
 750              		mov	r0, #0
 751 0530 0100A0E3 		mov	r1, r0
 752 0534 0010A0E3 		bl	stat
 753 0538 FEFFFFEB 		.loc 1 1174 0
 754              		ldr	r3, .L124
 755 053c 78319FE5 		mov	r2, #0
 756 0540 014084E2 		strb	r2, [r3, #0]
 757 0544 030054E1 	.L91:
 758 0548 F8FFFF1A 		.loc 1 1177 0
 759 054c E8FFFFEA 		ldr	r3, .L124+20
 760              		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 761              		cmp	r3, #1
 762              		.loc 1 1179 0
 763 0550 FEFFFFEB 		mov	r0, r3
 764              		mov	r1, r3
 765 0554 0000A0E3 		.loc 1 1177 0
 766 0558 0010A0E1 		bne	.L98
 767 055c FEFFFFEB 		.loc 1 1179 0
 768              		bl	stat
 769 0560 44319FE5 		.loc 1 1181 0
 770 0564 0020A0E3 		ldr	r3, .L124+4
 771 0568 0020C3E5 		ldr	r0, [r3, #0]
 772              		ldr	r3, .L124+8
 773              		ldr	r1, .L124+24
 774 056c 4C319FE5 		ldrh	r2, [r3, #0]
 775 0570 0030D3E5 		bl	fat16_write_file
 776 0574 010053E3 		tst	r0, #32768
 777              		beq	.L100
 778 0578 0300A0E1 	.LVL16:
 779 057c 0310A0E1 	.L120:
 780              		.loc 1 1185 0
 781 0580 2600001A 		mov	r0, #0
 782              		mov	r1, #1
 783 0584 FEFFFFEB 		bl	stat
 784              		mov	r4, #0
 785 0588 20319FE5 	.LVL17:
 786 058c 000093E5 	.L102:
 787 0590 1C319FE5 		.loc 1 1187 0
 788 0594 28119FE5 		mov	r0, #0
 789 0598 B020D3E1 		mov	r1, r0
 790 059c FEFFFFEB 		bl	stat
 791 05a0 020910E3 		.loc 1 1186 0
 792 05a4 1600000A 		ldr	r3, .L124+16
 793              		add	r4, r4, #1
 794              		cmp	r4, r3
 795              		bne	.L102
 796 05a8 0000A0E3 		.loc 1 1188 0
 797 05ac 0110A0E3 		mov	r0, #1
 798 05b0 FEFFFFEB 		mov	r1, r0
 799 05b4 0040A0E3 		bl	stat
 800              		mov	r4, #0
 801              	.LVL18:
 802              	.L104:
 803 05b8 0000A0E3 		.loc 1 1190 0
 804 05bc 0010A0E1 		mov	r0, #1
 805 05c0 FEFFFFEB 		mov	r1, #0
 806              		bl	stat
 807 05c4 F0309FE5 		.loc 1 1189 0
 808 05c8 014084E2 		ldr	r3, .L124+16
 809 05cc 030054E1 		add	r4, r4, #1
 810 05d0 F8FFFF1A 		cmp	r4, r3
 811              		bne	.L104
 812 05d4 0100A0E3 		b	.L120
 813 05d8 0010A0E1 	.LVL19:
 814 05dc FEFFFFEB 	.L100:
 815 05e0 0040A0E3 		.loc 1 1194 0
 816              		bl	sd_raw_sync
 817              		.loc 1 1195 0
 818              		mov	r0, #1
 819 05e4 0100A0E3 		mov	r1, #0
 820 05e8 0010A0E3 		bl	stat
 821 05ec FEFFFFEB 		.loc 1 1196 0
 822              		ldr	r3, .L124+20
 823 05f0 C4309FE5 		mov	r2, #0
 824 05f4 014084E2 		strb	r2, [r3, #0]
 825 05f8 030054E1 	.L98:
 826 05fc F8FFFF1A 		.loc 1 1199 0
 827 0600 E8FFFFEA 		ldr	r3, .L124+28
 828              		ldr	r3, [r3, #0]
 829              		tst	r3, #8
 830              		bne	.L90
 831 0604 FEFFFFEB 		.loc 1 1203 0
 832              		ldr	r3, .L124+32
 833 0608 0100A0E3 		ldrh	r1, [r3, #0]
 834 060c 0010A0E3 		ldr	r3, .L124+36
 835 0610 FEFFFFEB 		mov	r2, r1, asl #16
 836              		cmp	r3, r2, asr #16
 837 0614 A4309FE5 		.loc 1 1210 0
 838 0618 0020A0E3 		sublt	r2, r1, #512
 839 061c 0020C3E5 		ldr	r0, .L124+4
 840              		.loc 1 1201 0
 841              		sub	r3, r3, #512
 842 0620 A0309FE5 		.loc 1 1210 0
 843 0624 003093E5 		movlt	r2, r2, asl #16
 844 0628 080013E3 		.loc 1 1201 0
 845 062c A1FFFF1A 		str	r3, [r3, #-4075]
 846              		.loc 1 1205 0
 847 0630 94309FE5 		movge	r2, r2, lsr #16
 848 0634 B010D3E1 		ldrge	r0, [r0, #0]
 849 0638 90309FE5 		ldrge	r1, .L124+12
 850 063c 0128A0E1 		.loc 1 1210 0
 851 0640 420853E1 		movlt	r2, r2, lsr #16
 852              		ldrlt	r0, [r0, #0]
 853 0644 022C41B2 		ldrlt	r1, .L124+24
 854 0648 60009FE5 		bl	fat16_write_file
 855              		.loc 1 1211 0
 856 064c 023C43E2 		bl	sd_raw_sync
 857              	.L122:
 858 0650 0228A0B1 		.loc 1 1215 0
 859              		mov	r0, #0
 860 0654 EB3F03E5 		mov	r1, #1
 861              		bl	stat
 862 0658 2228A0A1 		.loc 1 1217 0
 863 065c 000090A5 		mov	r0, #0
 864 0660 50109FA5 		mov	r1, r0
 865              		bl	stat
 866 0664 2228A0B1 		.loc 1 1218 0
 867 0668 000090B5 		mov	r0, #1
 868 066c 50109FB5 		mov	r1, r0
 869 0670 FEFFFFEB 		bl	stat
 870              		.loc 1 1220 0
 871 0674 FEFFFFEB 		mov	r0, #1
 872              		mov	r1, #0
 873              		bl	stat
 874 0678 0000A0E3 		b	.L122
 875 067c 0110A0E3 	.L125:
 876 0680 FEFFFFEB 		.align	2
 877              	.L124:
 878 0684 0000A0E3 		.word	log_array1
 879 0688 0010A0E1 		.word	handle
 880 068c FEFFFFEB 		.word	stringSize
 881              		.word	RX_array1
 882 0690 0100A0E3 		.word	500000
 883 0694 0010A0E1 		.word	log_array2
 884 0698 FEFFFFEB 		.word	RX_array2
 885              		.word	-536707072
 886 069c 0100A0E3 		.word	RX_in
 887 06a0 0010A0E3 		.word	511
 888 06a4 FEFFFFEB 	.LFE17:
 890              		.section	.rodata.str1.4
 891              		.align	2
 892              	.LC8:
 893 06ac 00000000 		.ascii	"MODE 2\012\015\000"
 894 06b0 00000000 		.global	__divsi3
 895 06b4 00000000 		.text
 896 06b8 00000000 		.align	2
 897 06bc 20A10700 		.global	mode_2
 899 06c4 00000000 	mode_2:
 900 06c8 008002E0 	.LFB16:
 901 06cc 00000000 		.loc 1 1125 0
 902 06d0 FF010000 		@ Function supports interworking.
 903              		@ args = 0, pretend = 0, frame = 0
 904              		@ frame_needed = 0, uses_anonymous_args = 0
 905              		stmfd	sp!, {r4, lr}
 906              	.LCFI8:
 907              		.loc 1 1126 0
 908 00bc 4D4F4445 		ldr	r0, .L128
 908      20320A0D 
 908      00
 909              		bl	rprintf
 910              		.loc 1 1127 0
 911              		bl	enableIRQ
 912              		.loc 1 1129 0
 913              		mvn	ip, #0
 914              		ldr	r3, [ip, #-4083]
 915              		bic	r3, r3, #16
 916              		str	r3, [ip, #-4083]
 917              		.loc 1 1139 0
 918              		ldr	r3, .L128+4
 919              		.loc 1 1131 0
 920 06d4 10402DE9 		ldr	r2, [ip, #-4079]
 921              		.loc 1 1139 0
 922              		ldr	r1, [r3, #0]
 923 06d8 7C009FE5 		.loc 1 1131 0
 924 06dc FEFFFFEB 		orr	r2, r2, #16
 925              		.loc 1 1133 0
 926 06e0 FEFFFFEB 		mov	r3, #36
 927              		.loc 1 1131 0
 928 06e4 00C0E0E3 		str	r2, [ip, #-4079]
 929 06e8 F33F1CE5 		.loc 1 1133 0
 930 06ec 1030C3E3 		str	r3, [ip, #-3575]
 931 06f0 F33F0CE5 		.loc 1 1135 0
 932              		ldr	r3, .L128+8
 933 06f4 64309FE5 		.loc 1 1137 0
 934              		ldr	r4, .L128+12
 935 06f8 EF2F1CE5 		.loc 1 1135 0
 936              		str	r3, [ip, #-3831]
 937 06fc 001093E5 		.loc 1 1137 0
 938              		mov	r3, #2
 939 0700 102082E3 		str	r3, [r4, #4]
 940              		.loc 1 1138 0
 941 0704 2430A0E3 		add	r3, r3, #1
 942              		str	r3, [r4, #20]
 943 0708 EF2F0CE5 		.loc 1 1139 0
 944              		mov	r0, #58982400
 945 070c F73D0CE5 		bl	__divsi3
 946              		.loc 1 1145 0
 947 0710 4C309FE5 		ldr	r3, .L128+16
 948              		mov	r2, #512
 949 0714 4C409FE5 		str	r2, [r3, #0]
 950              		.loc 1 1141 0
 951 0718 F73E0CE5 		mov	r3, #0
 952              		.loc 1 1139 0
 953 071c 0230A0E3 		str	r0, [r4, #24]
 954 0720 043084E5 		.loc 1 1141 0
 955              		str	r3, [r4, #12]
 956 0724 013083E2 		.loc 1 1143 0
 957 0728 143084E5 		add	r3, r3, #1
 958              		str	r3, [r4, #4]
 959 072c E107A0E3 		.loc 1 1147 0
 960 0730 FEFFFFEB 		ldmfd	sp!, {r4, lr}
 961              		.loc 1 1146 0
 962 0734 30309FE5 		b	mode_action
 963 0738 022CA0E3 	.L129:
 964 073c 002083E5 		.align	2
 965              	.L128:
 966 0740 0030A0E3 		.word	.LC8
 967              		.word	freq
 968 0744 180084E5 		.word	MODE2ISR
 969              		.word	-536854528
 970 0748 0C3084E5 		.word	stringSize
 971              	.LFE16:
 973 0750 043084E5 		.align	2
 974              		.global	setup_uart0
 976              	setup_uart0:
 977 0758 FEFFFFEA 	.LFB11:
 978              		.loc 1 852 0
 979              		@ Function supports interworking.
 980              		@ args = 0, pretend = 0, frame = 0
 981 075c BC000000 		@ frame_needed = 0, uses_anonymous_args = 0
 982 0760 00000000 	.LVL20:
 983 0764 00000000 		.loc 1 853 0
 984 0768 004000E0 		ldr	r3, .L157
 985 076c 00000000 		.loc 1 854 0
 986              		ldr	r2, .L157+4
 987              		.loc 1 853 0
 988              		str	r0, [r3, #0]
 989              		.loc 1 856 0
 990              		cmp	r0, #1200
 991              		.loc 1 854 0
 992              		mvn	r3, #124
 993              		.loc 1 852 0
 994              		stmfd	sp!, {r4, r5, r6, lr}
 995              	.LCFI9:
 996              		.loc 1 854 0
 997              		strb	r3, [r2, #12]
 998              		.loc 1 852 0
 999 0770 60319FE5 		and	r5, r1, #255
 1000              		.loc 1 858 0
 1001 0774 60219FE5 		addeq	r3, r3, #137
 1002              		.loc 1 856 0
 1003 0778 000083E5 		beq	.L156
 1004              	.LVL21:
 1005 077c 4B0E50E3 		.loc 1 861 0
 1006              		cmp	r0, #2400
 1007 0780 7C30E0E3 		bne	.L134
 1008              		.loc 1 863 0
 1009 0784 70402DE9 		mov	r3, #6
 1010              	.L156:
 1011              		strb	r3, [r2, #4]
 1012 0788 0C30C2E5 		.loc 1 864 0
 1013              		mov	r3, #0
 1014 078c FF5001E2 		b	.L154
 1015              	.L134:
 1016 0790 89308302 		.loc 1 866 0
 1017              		cmp	r0, #4800
 1018 0794 0200000A 		.loc 1 868 0
 1019              		moveq	r3, #3
 1020              		.loc 1 866 0
 1021 0798 960E50E3 		beq	.L156
 1022 079c 0300001A 		.loc 1 871 0
 1023              		cmp	r0, #9600
 1024 07a0 0630A0E3 		.loc 1 873 0
 1025              		moveq	r3, #1
 1026 07a4 0430C2E5 		streqb	r3, [r2, #4]
 1027              		.loc 1 874 0
 1028 07a8 0030A0E3 		mvneq	r3, #127
 1029 07ac 1C0000EA 		.loc 1 871 0
 1030              		beq	.L154
 1031              		.loc 1 876 0
 1032 07b0 4B0D50E3 		cmp	r0, #19200
 1033              		.loc 1 878 0
 1034 07b4 0330A003 		moveq	r3, #0
 1035              		streqb	r3, [r2, #4]
 1036 07b8 F9FFFF0A 		.loc 1 879 0
 1037              		mvneq	r3, #63
 1038 07bc 960D50E3 		.loc 1 876 0
 1039              		beq	.L154
 1040 07c0 0130A003 		.loc 1 881 0
 1041 07c4 0430C205 		cmp	r0, #38400
 1042              		.loc 1 883 0
 1043 07c8 7F30E003 		moveq	r3, #0
 1044              		streqb	r3, [r2, #4]
 1045 07cc 1400000A 		.loc 1 884 0
 1046              		addeq	r3, r3, #96
 1047 07d0 4B0C50E3 		.loc 1 881 0
 1048              		beq	.L154
 1049 07d4 0030A003 		.loc 1 886 0
 1050 07d8 0430C205 		cmp	r0, #57600
 1051              		.loc 1 888 0
 1052 07dc 3F30E003 		moveq	r3, #0
 1053              		streqb	r3, [r2, #4]
 1054 07e0 0F00000A 		.loc 1 889 0
 1055              		addeq	r3, r3, #64
 1056 07e4 960C50E3 		.loc 1 886 0
 1057              		beq	.L154
 1058 07e8 0030A003 		.loc 1 891 0
 1059 07ec 0430C205 		ldr	r3, .L157+8
 1060              		cmp	r0, r3
 1061 07f0 60308302 		bne	.L133
 1062              		.loc 1 893 0
 1063 07f4 0A00000A 		mov	r3, #0
 1064              		strb	r3, [r2, #4]
 1065 07f8 E10C50E3 		.loc 1 894 0
 1066              		add	r3, r3, #32
 1067 07fc 0030A003 	.L154:
 1068 0800 0430C205 		strb	r3, [r2, #0]
 1069              	.L133:
 1070 0804 40308302 		.loc 1 897 0
 1071              		ldr	r4, .L157+4
 1072 0808 0500000A 		mov	r6, #1
 1073              		.loc 1 898 0
 1074 080c CC309FE5 		mov	r3, #3
 1075 0810 030050E1 		.loc 1 900 0
 1076 0814 0300001A 		cmp	r5, #1
 1077              		.loc 1 897 0
 1078 0818 0030A0E3 		strb	r6, [r4, #8]
 1079 081c 0430C2E5 		.loc 1 898 0
 1080              		strb	r3, [r4, #12]
 1081 0820 203083E2 		.loc 1 900 0
 1082              		bne	.L147
 1083 0824 0030C2E5 		.loc 1 902 0
 1084              		bl	enableIRQ
 1085              	.LVL22:
 1086 0828 AC409FE5 		.loc 1 903 0
 1087 082c 0160A0E3 		mvn	r2, #0
 1088              		ldr	r3, [r2, #-4083]
 1089 0830 0330A0E3 		bic	r3, r3, #64
 1090              		str	r3, [r2, #-4083]
 1091 0834 010055E3 		.loc 1 904 0
 1092              		ldr	r3, [r2, #-4079]
 1093 0838 0860C4E5 		orr	r3, r3, #64
 1094              		str	r3, [r2, #-4079]
 1095 083c 0C30C4E5 		.loc 1 905 0
 1096              		mov	r3, #38
 1097 0840 0C00001A 		str	r3, [r2, #-3579]
 1098              		.loc 1 906 0
 1099 0844 FEFFFFEB 		ldr	r3, .L157+12
 1100              		str	r3, [r2, #-3835]
 1101              		b	.L155
 1102 0848 0020E0E3 	.LVL23:
 1103 084c F33F12E5 	.L147:
 1104 0850 4030C3E3 		.loc 1 909 0
 1105 0854 F33F02E5 		cmp	r5, #2
 1106              		bne	.L150
 1107 0858 EF3F12E5 		.loc 1 911 0
 1108 085c 403083E3 		bl	enableIRQ
 1109 0860 EF3F02E5 	.LVL24:
 1110              		.loc 1 912 0
 1111 0864 2630A0E3 		mvn	r2, #0
 1112 0868 FB3D02E5 		ldr	r3, [r2, #-4083]
 1113              		bic	r3, r3, #64
 1114 086c 70309FE5 		str	r3, [r2, #-4083]
 1115 0870 FB3E02E5 		.loc 1 913 0
 1116 0874 140000EA 		ldr	r3, [r2, #-4079]
 1117              		orr	r3, r3, #64
 1118              		str	r3, [r2, #-4079]
 1119              		.loc 1 914 0
 1120 0878 020055E3 		mov	r3, #38
 1121 087c 0D00001A 		str	r3, [r2, #-3575]
 1122              		.loc 1 915 0
 1123 0880 FEFFFFEB 		ldr	r3, .L157+16
 1124              		str	r3, [r2, #-3831]
 1125              		.loc 1 916 0
 1126 0884 0020E0E3 		strb	r6, [r4, #4]
 1127 0888 F33F12E5 		b	.L153
 1128 088c 4030C3E3 	.LVL25:
 1129 0890 F33F02E5 	.L150:
 1130              		.loc 1 918 0
 1131 0894 EF3F12E5 		cmp	r5, #0
 1132 0898 403083E3 		bne	.L153
 1133 089c EF3F02E5 		.loc 1 920 0
 1134              		mov	r2, #64
 1135 08a0 2630A0E3 		mvn	r3, #0
 1136 08a4 F73D02E5 		str	r2, [r3, #-4075]
 1137              	.L155:
 1138 08a8 38309FE5 		.loc 1 921 0
 1139 08ac F73E02E5 		strb	r5, [r4, #4]
 1140              	.L153:
 1141 08b0 0460C4E5 		.loc 1 923 0
 1142 08b4 050000EA 		ldmfd	sp!, {r4, r5, r6, lr}
 1143              		bx	lr
 1144              	.L158:
 1145              		.align	2
 1146 08b8 000055E3 	.L157:
 1147 08bc 0300001A 		.word	baud
 1148              		.word	-536821760
 1149 08c0 4020A0E3 		.word	115200
 1150 08c4 0030E0E3 		.word	UART0ISR
 1151 08c8 EB2F03E5 		.word	UART0ISR_2
 1152              	.LFE11:
 1154 08cc 0450C4E5 		.section	.rodata.str1.4
 1155              		.align	2
 1156              	.LC9:
 1157 08d0 7040BDE8 		.ascii	"MODE 1\012\015\000"
 1158 08d4 1EFF2FE1 		.text
 1159              		.align	2
 1160              		.global	mode_1
 1162 08d8 10000000 	mode_1:
 1163 08dc 00C000E0 	.LFB15:
 1164 08e0 00C20100 		.loc 1 1115 0
 1165 08e4 00000000 		@ Function supports interworking.
 1166 08e8 00000000 		@ args = 0, pretend = 0, frame = 0
 1167              		@ frame_needed = 0, uses_anonymous_args = 0
 1168              		str	lr, [sp, #-4]!
 1169              	.LCFI10:
 1170 00c5 000000   		.loc 1 1116 0
 1171              		ldr	r0, .L161
 1172 00c8 4D4F4445 		bl	rprintf
 1172      20310A0D 
 1172      00
 1173              		.loc 1 1118 0
 1174              		ldr	r3, .L161+4
 1175              		mov	r1, #2
 1176              		ldr	r0, [r3, #0]
 1177              		bl	setup_uart0
 1178              		.loc 1 1119 0
 1179              		ldr	r3, .L161+8
 1180              		ldrsh	r3, [r3, #0]
 1181              		ldr	r2, .L161+12
 1182              		add	r3, r3, #2
 1183 08ec 04E02DE5 		str	r3, [r2, #0]
 1184              		.loc 1 1122 0
 1185              		ldr	lr, [sp], #4
 1186 08f0 2C009FE5 		.loc 1 1121 0
 1187 08f4 FEFFFFEB 		b	mode_action
 1188              	.L162:
 1189 08f8 28309FE5 		.align	2
 1190 08fc 0210A0E3 	.L161:
 1191 0900 000093E5 		.word	.LC9
 1192 0904 FEFFFFEB 		.word	baud
 1193              		.word	frame
 1194 0908 1C309FE5 		.word	stringSize
 1195 090c F030D3E1 	.LFE15:
 1197 0914 023083E2 		.section	.rodata.str1.4
 1198 0918 003082E5 		.align	2
 1199              	.LC10:
 1200 091c 04E09DE4 		.ascii	"MODE 0\012\015\000"
 1201              		.text
 1202 0920 FEFFFFEA 		.align	2
 1203              		.global	mode_0
 1205              	mode_0:
 1206 0924 C8000000 	.LFB14:
 1207 0928 10000000 		.loc 1 1105 0
 1208 092c 14000000 		@ Function supports interworking.
 1209 0930 00000000 		@ args = 0, pretend = 0, frame = 0
 1210              		@ frame_needed = 0, uses_anonymous_args = 0
 1211              		str	lr, [sp, #-4]!
 1212              	.LCFI11:
 1213 00d1 000000   		.loc 1 1106 0
 1214              		ldr	r0, .L165
 1215 00d4 4D4F4445 		bl	rprintf
 1215      20300A0D 
 1215      00
 1216              		.loc 1 1107 0
 1217              		ldr	r3, .L165+4
 1218              		mov	r1, #1
 1219              		ldr	r0, [r3, #0]
 1220              		bl	setup_uart0
 1221              		.loc 1 1108 0
 1222              		ldr	r3, .L165+8
 1223              		mov	r2, #512
 1224              		str	r2, [r3, #0]
 1225              		.loc 1 1112 0
 1226 0934 04E02DE5 		ldr	lr, [sp], #4
 1227              		.loc 1 1109 0
 1228              		b	mode_action
 1229 0938 24009FE5 	.L166:
 1230 093c FEFFFFEB 		.align	2
 1231              	.L165:
 1232 0940 20309FE5 		.word	.LC10
 1233 0944 0110A0E3 		.word	baud
 1234 0948 000093E5 		.word	stringSize
 1235 094c FEFFFFEB 	.LFE14:
 1237 0950 14309FE5 		.align	2
 1239 0958 002083E5 	MODE2ISR:
 1240              	.LFB7:
 1241 095c 04E09DE4 		.loc 1 273 0
 1242              		@ Function supports interworking.
 1243 0960 FEFFFFEA 		@ args = 0, pretend = 0, frame = 56
 1244              		@ frame_needed = 0, uses_anonymous_args = 0
 1245              		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 1246              	.LCFI12:
 1247 0964 D4000000 		.loc 1 280 0
 1248 0968 10000000 		ldr	r3, .L343
 1249 096c 00000000 		mov	r2, #1
 1250              		str	r2, [r3, #0]
 1251              		.loc 1 273 0
 1252              		sub	sp, sp, #56
 1253              	.LCFI13:
 1254              		.loc 1 280 0
 1255              		mov	r2, #0
 1256              	.LVL26:
 1257              	.L168:
 1258              		.loc 1 284 0
 1259              		mov	r1, #0
 1260 0970 F0412DE9 		add	r3, sp, #2
 1261              		strb	r1, [r2, r3]
 1262              		.loc 1 282 0
 1263 0974 D43B9FE5 		add	r2, r2, #1
 1264 0978 0120A0E3 		cmp	r2, #50
 1265 097c 002083E5 		bne	.L168
 1266              		.loc 1 289 0
 1267 0980 38D04DE2 		ldr	r3, .L343+4
 1268              		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1269              		cmp	r3, #89
 1270 0984 0020A0E3 		movne	r4, r1
 1271              	.LVL27:
 1272              		bne	.L172
 1273              		.loc 1 291 0
 1274 0988 0010A0E3 		ldr	r2, .L343+8
 1275 098c 02308DE2 	.LVL28:
 1276 0990 0310C2E7 		ldr	r3, .L343+12
 1277              		str	r3, [r2, #0]
 1278 0994 012082E2 		.loc 1 292 0
 1279 0998 320052E3 		ldr	r3, [r2, #0]
 1280 099c F9FFFF1A 		orr	r3, r3, #16777216
 1281              		str	r3, [r2, #0]
 1282 09a0 AC3B9FE5 	.L173:
 1283 09a4 0030D3E5 		.loc 1 295 0
 1284 09a8 590053E3 		ldr	r0, .L343+8
 1285 09ac 0140A011 		ldr	r2, [r0, #4]
 1286              		.loc 1 293 0
 1287 09b0 4100001A 		cmp	r2, #0
 1288              		bge	.L173
 1289 09b4 9C2B9FE5 		.loc 1 302 0
 1290              		ldr	r3, .L343+16
 1291 09b8 9C3B9FE5 		.loc 1 297 0
 1292 09bc 003082E5 		ldr	r1, .L343+20
 1293              	.LVL29:
 1294 09c0 003092E5 		.loc 1 302 0
 1295 09c4 013483E3 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1296 09c8 003082E5 		.loc 1 297 0
 1297              		and	r1, r2, r1
 1298              		.loc 1 300 0
 1299 09cc 840B9FE5 		mov	r4, #0
 1300 09d0 042090E5 	.LVL30:
 1301              		.loc 1 302 0
 1302 09d4 000052E3 		cmp	r3, #89
 1303 09d8 FBFFFFAA 		.loc 1 300 0
 1304              		str	r4, [r0, #0]
 1305 09dc 7C3B9FE5 		.loc 1 298 0
 1306              		mov	r0, r1, lsr #6
 1307 09e0 7C1B9FE5 	.LVL31:
 1308              		.loc 1 302 0
 1309              		bne	.L175
 1310 09e4 0030D3E5 		.loc 1 304 0
 1311              		mov	r1, #10
 1312 09e8 011002E0 	.LVL32:
 1313              		add	r2, sp, #52
 1314 09ec 0040A0E3 		bl	itoa
 1315              	.LVL33:
 1316              		.loc 1 305 0
 1317 09f0 590053E3 		ldrb	r2, [sp, #52]	@ zero_extendqisi2
 1318              		sub	r3, r2, #48
 1319 09f4 004080E5 		cmp	r3, #9
 1320              		.loc 1 307 0
 1321 09f8 2103A0E1 		strlsb	r2, [sp, #2]
 1322              		.loc 1 310 0
 1323              		ldrb	r2, [sp, #53]	@ zero_extendqisi2
 1324 09fc 2800001A 		sub	r3, r2, #48
 1325              		.loc 1 305 0
 1326 0a00 0A10A0E3 		movhi	r0, r4
 1327              	.LVL34:
 1328 0a04 34208DE2 		.loc 1 307 0
 1329 0a08 FEFFFFEB 		movls	r0, #1
 1330              		.loc 1 310 0
 1331              		cmp	r3, #9
 1332 0a0c 3420DDE5 		.loc 1 312 0
 1333 0a10 303042E2 		addls	r1, sp, #56
 1334 0a14 090053E3 		addls	r3, r1, r0
 1335              		strlsb	r2, [r3, #-54]
 1336 0a18 0220CD95 		.loc 1 315 0
 1337              		ldrb	r2, [sp, #54]	@ zero_extendqisi2
 1338 0a1c 3520DDE5 		sub	r3, r2, #48
 1339 0a20 303042E2 		.loc 1 313 0
 1340              		addls	r0, r0, #1
 1341 0a24 0400A081 		.loc 1 315 0
 1342              		cmp	r3, #9
 1343              		.loc 1 317 0
 1344 0a28 0100A093 		addls	ip, sp, #56
 1345              		addls	r3, ip, r0
 1346 0a2c 090053E3 		strlsb	r2, [r3, #-54]
 1347              		.loc 1 320 0
 1348 0a30 38108D92 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1349 0a34 00308190 		sub	r3, r2, #48
 1350 0a38 36204395 		.loc 1 318 0
 1351              		addls	r0, r0, #1
 1352 0a3c 3620DDE5 		.loc 1 320 0
 1353 0a40 303042E2 		cmp	r3, #9
 1354              		.loc 1 322 0
 1355 0a44 01008092 		addls	r1, sp, #56
 1356              		addls	r3, r1, r0
 1357 0a48 090053E3 		strlsb	r2, [r3, #-54]
 1358              		.loc 1 323 0
 1359 0a4c 38C08D92 		addls	r0, r0, #1
 1360 0a50 00308C90 		.loc 1 326 0
 1361 0a54 36204395 		mov	r2, #0
 1362              		add	ip, sp, #56
 1363 0a58 3720DDE5 		add	r3, ip, r0
 1364 0a5c 303042E2 		.loc 1 327 0
 1365              		add	r4, r0, #1
 1366 0a60 01008092 	.LVL35:
 1367              		.loc 1 333 0
 1368 0a64 090053E3 		mov	r1, r2
 1369              	.LVL36:
 1370 0a68 38108D92 		.loc 1 326 0
 1371 0a6c 00308190 		strb	r2, [r3, #-54]
 1372 0a70 36204395 		.loc 1 330 0
 1373              		strb	r2, [sp, #52]
 1374 0a74 01008092 		.loc 1 331 0
 1375              		strb	r2, [sp, #53]
 1376 0a78 0020A0E3 		.loc 1 332 0
 1377 0a7c 38C08DE2 		strb	r2, [sp, #54]
 1378 0a80 00308CE0 		.loc 1 333 0
 1379              		strb	r2, [sp, #55]
 1380 0a84 014080E2 		b	.L172
 1381              	.LVL37:
 1382              	.L175:
 1383 0a88 0210A0E1 		.loc 1 337 0
 1384              		cmp	r3, #78
 1385              		.loc 1 340 0
 1386 0a8c 362043E5 		moveq	r3, r0, lsr #8
 1387              		streqb	r3, [sp, #2]
 1388 0a90 3420CDE5 		.loc 1 342 0
 1389              		streqb	r0, [sp, #3]
 1390 0a94 3520CDE5 		moveq	r1, r4
 1391              		moveq	r4, #2
 1392 0a98 3620CDE5 	.LVL38:
 1393              	.L172:
 1394 0a9c 3720CDE5 		.loc 1 348 0
 1395 0aa0 050000EA 		ldr	r3, .L343+24
 1396              		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1397              		cmp	r3, #89
 1398              		bne	.L188
 1399 0aa4 4E0053E3 		.loc 1 350 0
 1400              		ldr	r2, .L343+28
 1401 0aa8 2034A001 	.LVL39:
 1402 0aac 0230CD05 		ldr	r3, .L343+12
 1403              		str	r3, [r2, #0]
 1404 0ab0 0300CD05 		.loc 1 351 0
 1405 0ab4 0410A001 		ldr	r3, [r2, #0]
 1406 0ab8 0240A003 		orr	r3, r3, #16777216
 1407              		str	r3, [r2, #0]
 1408              		b	.L190
 1409              	.L191:
 1410 0abc A43A9FE5 		.loc 1 354 0
 1411 0ac0 0030D3E5 		ldr	r3, .L343+28
 1412 0ac4 590053E3 		ldr	r1, [r3, #4]
 1413 0ac8 4700001A 	.L190:
 1414              		.loc 1 352 0
 1415 0acc 982A9FE5 		cmp	r1, #0
 1416              		bge	.L191
 1417 0ad0 843A9FE5 		.loc 1 361 0
 1418 0ad4 003082E5 		ldr	r3, .L343+16
 1419              		.loc 1 356 0
 1420 0ad8 003092E5 		bic	r1, r1, #63
 1421 0adc 013483E3 		.loc 1 361 0
 1422 0ae0 003082E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1423 0ae4 010000EA 		.loc 1 356 0
 1424              		mov	r1, r1, asl #16
 1425              		.loc 1 359 0
 1426 0ae8 7C3A9FE5 		ldr	r3, .L343+28
 1427 0aec 041093E5 		.loc 1 356 0
 1428              		mov	r1, r1, lsr #16
 1429              		.loc 1 359 0
 1430 0af0 000051E3 		mov	r5, #0
 1431 0af4 FBFFFFAA 		.loc 1 361 0
 1432              		cmp	r2, #89
 1433 0af8 603A9FE5 		.loc 1 359 0
 1434              		str	r5, [r3, #0]
 1435 0afc 3F10C1E3 		.loc 1 357 0
 1436              		mov	r0, r1, lsr #6
 1437 0b00 0020D3E5 	.LVL40:
 1438              		.loc 1 361 0
 1439 0b04 0118A0E1 		bne	.L193
 1440              		.loc 1 363 0
 1441 0b08 5C3A9FE5 		mov	r1, #10
 1442              	.LVL41:
 1443 0b0c 2118A0E1 		add	r2, sp, #52
 1444              		bl	itoa
 1445 0b10 0050A0E3 	.LVL42:
 1446              		.loc 1 364 0
 1447 0b14 590052E3 		ldrb	r2, [sp, #52]	@ zero_extendqisi2
 1448              		sub	r3, r2, #48
 1449 0b18 005083E5 		cmp	r3, #9
 1450              		.loc 1 366 0
 1451 0b1c 2103A0E1 		addls	r1, sp, #56
 1452              		addls	r3, r1, r4
 1453              		strlsb	r2, [r3, #-54]
 1454 0b20 2800001A 		.loc 1 369 0
 1455              		ldrb	r2, [sp, #53]	@ zero_extendqisi2
 1456 0b24 0A10A0E3 		sub	r3, r2, #48
 1457              		.loc 1 367 0
 1458 0b28 34208DE2 		addls	r4, r4, #1
 1459 0b2c FEFFFFEB 		.loc 1 369 0
 1460              		cmp	r3, #9
 1461              		.loc 1 371 0
 1462 0b30 3420DDE5 		addls	ip, sp, #56
 1463 0b34 303042E2 		addls	r3, ip, r4
 1464 0b38 090053E3 		strlsb	r2, [r3, #-54]
 1465              		.loc 1 374 0
 1466 0b3c 38108D92 		ldrb	r2, [sp, #54]	@ zero_extendqisi2
 1467 0b40 04308190 		sub	r3, r2, #48
 1468 0b44 36204395 		.loc 1 372 0
 1469              		addls	r4, r4, #1
 1470 0b48 3520DDE5 		.loc 1 374 0
 1471 0b4c 303042E2 		cmp	r3, #9
 1472              		.loc 1 376 0
 1473 0b50 01408492 		addls	r1, sp, #56
 1474              		addls	r3, r1, r4
 1475 0b54 090053E3 		strlsb	r2, [r3, #-54]
 1476              		.loc 1 379 0
 1477 0b58 38C08D92 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1478 0b5c 04308C90 		sub	r3, r2, #48
 1479 0b60 36204395 		.loc 1 377 0
 1480              		addls	r4, r4, #1
 1481 0b64 3620DDE5 		.loc 1 379 0
 1482 0b68 303042E2 		cmp	r3, #9
 1483              		.loc 1 381 0
 1484 0b6c 01408492 		addls	ip, sp, #56
 1485              		addls	r3, ip, r4
 1486 0b70 090053E3 		strlsb	r2, [r3, #-54]
 1487              		.loc 1 382 0
 1488 0b74 38108D92 		addls	r4, r4, #1
 1489 0b78 04308190 		.loc 1 385 0
 1490 0b7c 36204395 		add	r2, sp, #56
 1491              		add	r3, r2, r4
 1492 0b80 3720DDE5 		.loc 1 392 0
 1493 0b84 303042E2 		mov	r1, r5
 1494              	.LVL43:
 1495 0b88 01408492 		.loc 1 386 0
 1496              		add	r4, r4, #1
 1497 0b8c 090053E3 		.loc 1 385 0
 1498              		strb	r5, [r3, #-54]
 1499 0b90 38C08D92 		.loc 1 389 0
 1500 0b94 04308C90 		strb	r5, [sp, #52]
 1501 0b98 36204395 		.loc 1 390 0
 1502              		strb	r5, [sp, #53]
 1503 0b9c 01408492 		.loc 1 391 0
 1504              		strb	r5, [sp, #54]
 1505 0ba0 38208DE2 		.loc 1 392 0
 1506 0ba4 043082E0 		strb	r5, [sp, #55]
 1507              		b	.L188
 1508 0ba8 0510A0E1 	.LVL44:
 1509              	.L193:
 1510              		.loc 1 396 0
 1511 0bac 014084E2 		cmp	r2, #78
 1512              		bne	.L188
 1513 0bb0 365043E5 		.loc 1 399 0
 1514              		add	ip, sp, #56
 1515 0bb4 3450CDE5 		add	r3, ip, r4
 1516              		mov	r2, r0, lsr #8
 1517 0bb8 3550CDE5 		.loc 1 401 0
 1518              		strb	r0, [r3, #-53]
 1519 0bbc 3650CDE5 		.loc 1 399 0
 1520              		strb	r2, [r3, #-54]
 1521 0bc0 3750CDE5 		.loc 1 402 0
 1522 0bc4 080000EA 		add	r4, r4, #2
 1523              		mov	r1, r5
 1524              	.LVL45:
 1525              	.L188:
 1526 0bc8 4E0052E3 		.loc 1 407 0
 1527 0bcc 0600001A 		ldr	r3, .L343+32
 1528              		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1529 0bd0 38C08DE2 		cmp	r3, #89
 1530 0bd4 04308CE0 		bne	.L204
 1531 0bd8 2024A0E1 		.loc 1 409 0
 1532              		ldr	r2, .L343+28
 1533 0bdc 350043E5 	.LVL46:
 1534              		ldr	r3, .L343+36
 1535 0be0 362043E5 		str	r3, [r2, #0]
 1536              		.loc 1 410 0
 1537 0be4 024084E2 		ldr	r3, [r2, #0]
 1538 0be8 0510A0E1 		orr	r3, r3, #16777216
 1539              		str	r3, [r2, #0]
 1540              		b	.L206
 1541              	.L207:
 1542 0bec 7C399FE5 		.loc 1 413 0
 1543 0bf0 0030D3E5 		ldr	r3, .L343+28
 1544 0bf4 590053E3 		ldr	r1, [r3, #4]
 1545 0bf8 4700001A 	.L206:
 1546              		.loc 1 411 0
 1547 0bfc 68299FE5 		cmp	r1, #0
 1548              		bge	.L207
 1549 0c00 6C399FE5 		.loc 1 420 0
 1550 0c04 003082E5 		ldr	r3, .L343+16
 1551              		.loc 1 415 0
 1552 0c08 003092E5 		bic	r1, r1, #63
 1553 0c0c 013483E3 		.loc 1 420 0
 1554 0c10 003082E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1555 0c14 010000EA 		.loc 1 415 0
 1556              		mov	r1, r1, asl #16
 1557              		.loc 1 418 0
 1558 0c18 4C399FE5 		ldr	r3, .L343+28
 1559 0c1c 041093E5 		.loc 1 415 0
 1560              		mov	r1, r1, lsr #16
 1561              		.loc 1 418 0
 1562 0c20 000051E3 		mov	r5, #0
 1563 0c24 FBFFFFAA 		.loc 1 420 0
 1564              		cmp	r2, #89
 1565 0c28 30399FE5 		.loc 1 418 0
 1566              		str	r5, [r3, #0]
 1567 0c2c 3F10C1E3 		.loc 1 416 0
 1568              		mov	r0, r1, lsr #6
 1569 0c30 0020D3E5 	.LVL47:
 1570              		.loc 1 420 0
 1571 0c34 0118A0E1 		bne	.L209
 1572              		.loc 1 422 0
 1573 0c38 2C399FE5 		mov	r1, #10
 1574              	.LVL48:
 1575 0c3c 2118A0E1 		add	r2, sp, #52
 1576              		bl	itoa
 1577 0c40 0050A0E3 	.LVL49:
 1578              		.loc 1 423 0
 1579 0c44 590052E3 		ldrb	r2, [sp, #52]	@ zero_extendqisi2
 1580              		sub	r3, r2, #48
 1581 0c48 005083E5 		cmp	r3, #9
 1582              		.loc 1 425 0
 1583 0c4c 2103A0E1 		addls	r1, sp, #56
 1584              		addls	r3, r1, r4
 1585              		strlsb	r2, [r3, #-54]
 1586 0c50 2800001A 		.loc 1 428 0
 1587              		ldrb	r2, [sp, #53]	@ zero_extendqisi2
 1588 0c54 0A10A0E3 		sub	r3, r2, #48
 1589              		.loc 1 426 0
 1590 0c58 34208DE2 		addls	r4, r4, #1
 1591 0c5c FEFFFFEB 		.loc 1 428 0
 1592              		cmp	r3, #9
 1593              		.loc 1 430 0
 1594 0c60 3420DDE5 		addls	ip, sp, #56
 1595 0c64 303042E2 		addls	r3, ip, r4
 1596 0c68 090053E3 		strlsb	r2, [r3, #-54]
 1597              		.loc 1 433 0
 1598 0c6c 38108D92 		ldrb	r2, [sp, #54]	@ zero_extendqisi2
 1599 0c70 04308190 		sub	r3, r2, #48
 1600 0c74 36204395 		.loc 1 431 0
 1601              		addls	r4, r4, #1
 1602 0c78 3520DDE5 		.loc 1 433 0
 1603 0c7c 303042E2 		cmp	r3, #9
 1604              		.loc 1 435 0
 1605 0c80 01408492 		addls	r1, sp, #56
 1606              		addls	r3, r1, r4
 1607 0c84 090053E3 		strlsb	r2, [r3, #-54]
 1608              		.loc 1 438 0
 1609 0c88 38C08D92 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1610 0c8c 04308C90 		sub	r3, r2, #48
 1611 0c90 36204395 		.loc 1 436 0
 1612              		addls	r4, r4, #1
 1613 0c94 3620DDE5 		.loc 1 438 0
 1614 0c98 303042E2 		cmp	r3, #9
 1615              		.loc 1 440 0
 1616 0c9c 01408492 		addls	ip, sp, #56
 1617              		addls	r3, ip, r4
 1618 0ca0 090053E3 		strlsb	r2, [r3, #-54]
 1619              		.loc 1 441 0
 1620 0ca4 38108D92 		addls	r4, r4, #1
 1621 0ca8 04308190 		.loc 1 444 0
 1622 0cac 36204395 		add	r2, sp, #56
 1623              		add	r3, r2, r4
 1624 0cb0 3720DDE5 		.loc 1 451 0
 1625 0cb4 303042E2 		mov	r1, r5
 1626              	.LVL50:
 1627 0cb8 01408492 		.loc 1 445 0
 1628              		add	r4, r4, #1
 1629 0cbc 090053E3 		.loc 1 444 0
 1630              		strb	r5, [r3, #-54]
 1631 0cc0 38C08D92 		.loc 1 448 0
 1632 0cc4 04308C90 		strb	r5, [sp, #52]
 1633 0cc8 36204395 		.loc 1 449 0
 1634              		strb	r5, [sp, #53]
 1635 0ccc 01408492 		.loc 1 450 0
 1636              		strb	r5, [sp, #54]
 1637 0cd0 38208DE2 		.loc 1 451 0
 1638 0cd4 043082E0 		strb	r5, [sp, #55]
 1639              		b	.L204
 1640 0cd8 0510A0E1 	.LVL51:
 1641              	.L209:
 1642              		.loc 1 455 0
 1643 0cdc 014084E2 		cmp	r2, #78
 1644              		bne	.L204
 1645 0ce0 365043E5 		.loc 1 458 0
 1646              		add	ip, sp, #56
 1647 0ce4 3450CDE5 		add	r3, ip, r4
 1648              		mov	r2, r0, lsr #8
 1649 0ce8 3550CDE5 		.loc 1 460 0
 1650              		strb	r0, [r3, #-53]
 1651 0cec 3650CDE5 		.loc 1 458 0
 1652              		strb	r2, [r3, #-54]
 1653 0cf0 3750CDE5 		.loc 1 461 0
 1654 0cf4 080000EA 		add	r4, r4, #2
 1655              		mov	r1, r5
 1656              	.LVL52:
 1657              	.L204:
 1658 0cf8 4E0052E3 		.loc 1 466 0
 1659 0cfc 0600001A 		ldr	r3, .L343+40
 1660              		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1661 0d00 38C08DE2 		cmp	r3, #89
 1662 0d04 04308CE0 		bne	.L220
 1663 0d08 2024A0E1 		.loc 1 468 0
 1664              		ldr	r2, .L343+28
 1665 0d0c 350043E5 	.LVL53:
 1666              		ldr	r3, .L343+44
 1667 0d10 362043E5 		str	r3, [r2, #0]
 1668              		.loc 1 469 0
 1669 0d14 024084E2 		ldr	r3, [r2, #0]
 1670 0d18 0510A0E1 		orr	r3, r3, #16777216
 1671              		str	r3, [r2, #0]
 1672              		b	.L222
 1673              	.L223:
 1674 0d1c 54389FE5 		.loc 1 472 0
 1675 0d20 0030D3E5 		ldr	r3, .L343+28
 1676 0d24 590053E3 		ldr	r1, [r3, #4]
 1677 0d28 4700001A 	.L222:
 1678              		.loc 1 470 0
 1679 0d2c 38289FE5 		cmp	r1, #0
 1680              		bge	.L223
 1681 0d30 44389FE5 		.loc 1 479 0
 1682 0d34 003082E5 		ldr	r3, .L343+16
 1683              		.loc 1 474 0
 1684 0d38 003092E5 		bic	r1, r1, #63
 1685 0d3c 013483E3 		.loc 1 479 0
 1686 0d40 003082E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1687 0d44 010000EA 		.loc 1 474 0
 1688              		mov	r1, r1, asl #16
 1689              		.loc 1 477 0
 1690 0d48 1C389FE5 		ldr	r3, .L343+28
 1691 0d4c 041093E5 		.loc 1 474 0
 1692              		mov	r1, r1, lsr #16
 1693              		.loc 1 477 0
 1694 0d50 000051E3 		mov	r5, #0
 1695 0d54 FBFFFFAA 		.loc 1 479 0
 1696              		cmp	r2, #89
 1697 0d58 00389FE5 		.loc 1 477 0
 1698              		str	r5, [r3, #0]
 1699 0d5c 3F10C1E3 		.loc 1 475 0
 1700              		mov	r0, r1, lsr #6
 1701 0d60 0020D3E5 	.LVL54:
 1702              		.loc 1 479 0
 1703 0d64 0118A0E1 		bne	.L225
 1704              		.loc 1 481 0
 1705 0d68 FC379FE5 		mov	r1, #10
 1706              	.LVL55:
 1707 0d6c 2118A0E1 		add	r2, sp, #52
 1708              		bl	itoa
 1709 0d70 0050A0E3 	.LVL56:
 1710              		.loc 1 482 0
 1711 0d74 590052E3 		ldrb	r2, [sp, #52]	@ zero_extendqisi2
 1712              		sub	r3, r2, #48
 1713 0d78 005083E5 		cmp	r3, #9
 1714              		.loc 1 484 0
 1715 0d7c 2103A0E1 		addls	r1, sp, #56
 1716              		addls	r3, r1, r4
 1717              		strlsb	r2, [r3, #-54]
 1718 0d80 2800001A 		.loc 1 487 0
 1719              		ldrb	r2, [sp, #53]	@ zero_extendqisi2
 1720 0d84 0A10A0E3 		sub	r3, r2, #48
 1721              		.loc 1 485 0
 1722 0d88 34208DE2 		addls	r4, r4, #1
 1723 0d8c FEFFFFEB 		.loc 1 487 0
 1724              		cmp	r3, #9
 1725              		.loc 1 489 0
 1726 0d90 3420DDE5 		addls	ip, sp, #56
 1727 0d94 303042E2 		addls	r3, ip, r4
 1728 0d98 090053E3 		strlsb	r2, [r3, #-54]
 1729              		.loc 1 492 0
 1730 0d9c 38108D92 		ldrb	r2, [sp, #54]	@ zero_extendqisi2
 1731 0da0 04308190 		sub	r3, r2, #48
 1732 0da4 36204395 		.loc 1 490 0
 1733              		addls	r4, r4, #1
 1734 0da8 3520DDE5 		.loc 1 492 0
 1735 0dac 303042E2 		cmp	r3, #9
 1736              		.loc 1 494 0
 1737 0db0 01408492 		addls	r1, sp, #56
 1738              		addls	r3, r1, r4
 1739 0db4 090053E3 		strlsb	r2, [r3, #-54]
 1740              		.loc 1 497 0
 1741 0db8 38C08D92 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1742 0dbc 04308C90 		sub	r3, r2, #48
 1743 0dc0 36204395 		.loc 1 495 0
 1744              		addls	r4, r4, #1
 1745 0dc4 3620DDE5 		.loc 1 497 0
 1746 0dc8 303042E2 		cmp	r3, #9
 1747              		.loc 1 499 0
 1748 0dcc 01408492 		addls	ip, sp, #56
 1749              		addls	r3, ip, r4
 1750 0dd0 090053E3 		strlsb	r2, [r3, #-54]
 1751              		.loc 1 500 0
 1752 0dd4 38108D92 		addls	r4, r4, #1
 1753 0dd8 04308190 		.loc 1 503 0
 1754 0ddc 36204395 		add	r2, sp, #56
 1755              		add	r3, r2, r4
 1756 0de0 3720DDE5 		.loc 1 510 0
 1757 0de4 303042E2 		mov	r1, r5
 1758              	.LVL57:
 1759 0de8 01408492 		.loc 1 504 0
 1760              		add	r4, r4, #1
 1761 0dec 090053E3 		.loc 1 503 0
 1762              		strb	r5, [r3, #-54]
 1763 0df0 38C08D92 		.loc 1 507 0
 1764 0df4 04308C90 		strb	r5, [sp, #52]
 1765 0df8 36204395 		.loc 1 508 0
 1766              		strb	r5, [sp, #53]
 1767 0dfc 01408492 		.loc 1 509 0
 1768              		strb	r5, [sp, #54]
 1769 0e00 38208DE2 		.loc 1 510 0
 1770 0e04 043082E0 		strb	r5, [sp, #55]
 1771              		b	.L220
 1772 0e08 0510A0E1 	.LVL58:
 1773              	.L225:
 1774              		.loc 1 514 0
 1775 0e0c 014084E2 		cmp	r2, #78
 1776              		bne	.L220
 1777 0e10 365043E5 		.loc 1 517 0
 1778              		add	ip, sp, #56
 1779 0e14 3450CDE5 		add	r3, ip, r4
 1780              		mov	r2, r0, lsr #8
 1781 0e18 3550CDE5 		.loc 1 519 0
 1782              		strb	r0, [r3, #-53]
 1783 0e1c 3650CDE5 		.loc 1 517 0
 1784              		strb	r2, [r3, #-54]
 1785 0e20 3750CDE5 		.loc 1 520 0
 1786 0e24 080000EA 		add	r4, r4, #2
 1787              		mov	r1, r5
 1788              	.LVL59:
 1789              	.L220:
 1790 0e28 4E0052E3 		.loc 1 525 0
 1791 0e2c 0600001A 		ldr	r3, .L343+48
 1792              		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1793 0e30 38C08DE2 		cmp	r3, #89
 1794 0e34 04308CE0 		bne	.L236
 1795 0e38 2024A0E1 		.loc 1 527 0
 1796              		ldr	r2, .L343+8
 1797 0e3c 350043E5 	.LVL60:
 1798              		ldr	r3, .L343+36
 1799 0e40 362043E5 		str	r3, [r2, #0]
 1800              		.loc 1 528 0
 1801 0e44 024084E2 		ldr	r3, [r2, #0]
 1802 0e48 0510A0E1 		orr	r3, r3, #16777216
 1803              		str	r3, [r2, #0]
 1804              		b	.L238
 1805              	.L239:
 1806 0e4c 2C379FE5 		.loc 1 531 0
 1807 0e50 0030D3E5 		ldr	r3, .L343+8
 1808 0e54 590053E3 		ldr	r1, [r3, #4]
 1809 0e58 4700001A 	.L238:
 1810              		.loc 1 529 0
 1811 0e5c F4269FE5 		cmp	r1, #0
 1812              		bge	.L239
 1813 0e60 0C379FE5 		.loc 1 538 0
 1814 0e64 003082E5 		ldr	r3, .L343+16
 1815              		.loc 1 533 0
 1816 0e68 003092E5 		bic	r1, r1, #63
 1817 0e6c 013483E3 		.loc 1 538 0
 1818 0e70 003082E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1819 0e74 010000EA 		.loc 1 533 0
 1820              		mov	r1, r1, asl #16
 1821              		.loc 1 536 0
 1822 0e78 D8369FE5 		ldr	r3, .L343+8
 1823 0e7c 041093E5 		.loc 1 533 0
 1824              		mov	r1, r1, lsr #16
 1825              		.loc 1 536 0
 1826 0e80 000051E3 		mov	r5, #0
 1827 0e84 FBFFFFAA 		.loc 1 538 0
 1828              		cmp	r2, #89
 1829 0e88 D0369FE5 		.loc 1 536 0
 1830              		str	r5, [r3, #0]
 1831 0e8c 3F10C1E3 		.loc 1 534 0
 1832              		mov	r0, r1, lsr #6
 1833 0e90 0020D3E5 	.LVL61:
 1834              		.loc 1 538 0
 1835 0e94 0118A0E1 		bne	.L241
 1836              		.loc 1 540 0
 1837 0e98 B8369FE5 		mov	r1, #10
 1838              	.LVL62:
 1839 0e9c 2118A0E1 		add	r2, sp, #52
 1840              		bl	itoa
 1841 0ea0 0050A0E3 	.LVL63:
 1842              		.loc 1 541 0
 1843 0ea4 590052E3 		ldrb	r2, [sp, #52]	@ zero_extendqisi2
 1844              		sub	r3, r2, #48
 1845 0ea8 005083E5 		cmp	r3, #9
 1846              		.loc 1 543 0
 1847 0eac 2103A0E1 		addls	r1, sp, #56
 1848              		addls	r3, r1, r4
 1849              		strlsb	r2, [r3, #-54]
 1850 0eb0 2800001A 		.loc 1 546 0
 1851              		ldrb	r2, [sp, #53]	@ zero_extendqisi2
 1852 0eb4 0A10A0E3 		sub	r3, r2, #48
 1853              		.loc 1 544 0
 1854 0eb8 34208DE2 		addls	r4, r4, #1
 1855 0ebc FEFFFFEB 		.loc 1 546 0
 1856              		cmp	r3, #9
 1857              		.loc 1 548 0
 1858 0ec0 3420DDE5 		addls	ip, sp, #56
 1859 0ec4 303042E2 		addls	r3, ip, r4
 1860 0ec8 090053E3 		strlsb	r2, [r3, #-54]
 1861              		.loc 1 551 0
 1862 0ecc 38108D92 		ldrb	r2, [sp, #54]	@ zero_extendqisi2
 1863 0ed0 04308190 		sub	r3, r2, #48
 1864 0ed4 36204395 		.loc 1 549 0
 1865              		addls	r4, r4, #1
 1866 0ed8 3520DDE5 		.loc 1 551 0
 1867 0edc 303042E2 		cmp	r3, #9
 1868              		.loc 1 553 0
 1869 0ee0 01408492 		addls	r1, sp, #56
 1870              		addls	r3, r1, r4
 1871 0ee4 090053E3 		strlsb	r2, [r3, #-54]
 1872              		.loc 1 556 0
 1873 0ee8 38C08D92 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1874 0eec 04308C90 		sub	r3, r2, #48
 1875 0ef0 36204395 		.loc 1 554 0
 1876              		addls	r4, r4, #1
 1877 0ef4 3620DDE5 		.loc 1 556 0
 1878 0ef8 303042E2 		cmp	r3, #9
 1879              		.loc 1 558 0
 1880 0efc 01408492 		addls	ip, sp, #56
 1881              		addls	r3, ip, r4
 1882 0f00 090053E3 		strlsb	r2, [r3, #-54]
 1883              		.loc 1 559 0
 1884 0f04 38108D92 		addls	r4, r4, #1
 1885 0f08 04308190 		.loc 1 562 0
 1886 0f0c 36204395 		add	r2, sp, #56
 1887              		add	r3, r2, r4
 1888 0f10 3720DDE5 		.loc 1 569 0
 1889 0f14 303042E2 		mov	r1, r5
 1890              	.LVL64:
 1891 0f18 01408492 		.loc 1 563 0
 1892              		add	r4, r4, #1
 1893 0f1c 090053E3 		.loc 1 562 0
 1894              		strb	r5, [r3, #-54]
 1895 0f20 38C08D92 		.loc 1 566 0
 1896 0f24 04308C90 		strb	r5, [sp, #52]
 1897 0f28 36204395 		.loc 1 567 0
 1898              		strb	r5, [sp, #53]
 1899 0f2c 01408492 		.loc 1 568 0
 1900              		strb	r5, [sp, #54]
 1901 0f30 38208DE2 		.loc 1 569 0
 1902 0f34 043082E0 		strb	r5, [sp, #55]
 1903              		b	.L236
 1904 0f38 0510A0E1 	.LVL65:
 1905              	.L241:
 1906              		.loc 1 573 0
 1907 0f3c 014084E2 		cmp	r2, #78
 1908              		bne	.L236
 1909 0f40 365043E5 		.loc 1 576 0
 1910              		add	ip, sp, #56
 1911 0f44 3450CDE5 		add	r3, ip, r4
 1912              		mov	r2, r0, lsr #8
 1913 0f48 3550CDE5 		.loc 1 578 0
 1914              		strb	r0, [r3, #-53]
 1915 0f4c 3650CDE5 		.loc 1 576 0
 1916              		strb	r2, [r3, #-54]
 1917 0f50 3750CDE5 		.loc 1 579 0
 1918 0f54 080000EA 		add	r4, r4, #2
 1919              		mov	r1, r5
 1920              	.LVL66:
 1921              	.L236:
 1922 0f58 4E0052E3 		.loc 1 584 0
 1923 0f5c 0600001A 		ldr	r3, .L343+52
 1924              		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1925 0f60 38C08DE2 		cmp	r3, #89
 1926 0f64 04308CE0 		bne	.L252
 1927 0f68 2024A0E1 		.loc 1 586 0
 1928              		ldr	r2, .L343+28
 1929 0f6c 350043E5 	.LVL67:
 1930              		ldr	r3, .L343+56
 1931 0f70 362043E5 		str	r3, [r2, #0]
 1932              		.loc 1 587 0
 1933 0f74 024084E2 		ldr	r3, [r2, #0]
 1934 0f78 0510A0E1 		orr	r3, r3, #16777216
 1935              		str	r3, [r2, #0]
 1936              		b	.L254
 1937              	.L255:
 1938 0f7c 00369FE5 		.loc 1 590 0
 1939 0f80 0030D3E5 		ldr	r3, .L343+28
 1940 0f84 590053E3 		ldr	r1, [r3, #4]
 1941 0f88 4700001A 	.L254:
 1942              		.loc 1 588 0
 1943 0f8c D8259FE5 		cmp	r1, #0
 1944              		bge	.L255
 1945 0f90 F0359FE5 		.loc 1 597 0
 1946 0f94 003082E5 		ldr	r3, .L343+16
 1947              		.loc 1 592 0
 1948 0f98 003092E5 		bic	r1, r1, #63
 1949 0f9c 013483E3 		.loc 1 597 0
 1950 0fa0 003082E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1951 0fa4 010000EA 		.loc 1 592 0
 1952              		mov	r1, r1, asl #16
 1953              		.loc 1 595 0
 1954 0fa8 BC359FE5 		ldr	r3, .L343+28
 1955 0fac 041093E5 		.loc 1 592 0
 1956              		mov	r1, r1, lsr #16
 1957              		.loc 1 595 0
 1958 0fb0 000051E3 		mov	r5, #0
 1959 0fb4 FBFFFFAA 		.loc 1 597 0
 1960              		cmp	r2, #89
 1961 0fb8 A0359FE5 		.loc 1 595 0
 1962              		str	r5, [r3, #0]
 1963 0fbc 3F10C1E3 		.loc 1 593 0
 1964              		mov	r0, r1, lsr #6
 1965 0fc0 0020D3E5 	.LVL68:
 1966              		.loc 1 597 0
 1967 0fc4 0118A0E1 		bne	.L257
 1968              		.loc 1 599 0
 1969 0fc8 9C359FE5 		mov	r1, #10
 1970              	.LVL69:
 1971 0fcc 2118A0E1 		add	r2, sp, #52
 1972              		bl	itoa
 1973 0fd0 0050A0E3 	.LVL70:
 1974              		.loc 1 600 0
 1975 0fd4 590052E3 		ldrb	r2, [sp, #52]	@ zero_extendqisi2
 1976              		sub	r3, r2, #48
 1977 0fd8 005083E5 		cmp	r3, #9
 1978              		.loc 1 602 0
 1979 0fdc 2103A0E1 		addls	r1, sp, #56
 1980              		addls	r3, r1, r4
 1981              		strlsb	r2, [r3, #-54]
 1982 0fe0 2800001A 		.loc 1 605 0
 1983              		ldrb	r2, [sp, #53]	@ zero_extendqisi2
 1984 0fe4 0A10A0E3 		sub	r3, r2, #48
 1985              		.loc 1 603 0
 1986 0fe8 34208DE2 		addls	r4, r4, #1
 1987 0fec FEFFFFEB 		.loc 1 605 0
 1988              		cmp	r3, #9
 1989              		.loc 1 607 0
 1990 0ff0 3420DDE5 		addls	ip, sp, #56
 1991 0ff4 303042E2 		addls	r3, ip, r4
 1992 0ff8 090053E3 		strlsb	r2, [r3, #-54]
 1993              		.loc 1 610 0
 1994 0ffc 38108D92 		ldrb	r2, [sp, #54]	@ zero_extendqisi2
 1995 1000 04308190 		sub	r3, r2, #48
 1996 1004 36204395 		.loc 1 608 0
 1997              		addls	r4, r4, #1
 1998 1008 3520DDE5 		.loc 1 610 0
 1999 100c 303042E2 		cmp	r3, #9
 2000              		.loc 1 612 0
 2001 1010 01408492 		addls	r1, sp, #56
 2002              		addls	r3, r1, r4
 2003 1014 090053E3 		strlsb	r2, [r3, #-54]
 2004              		.loc 1 615 0
 2005 1018 38C08D92 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 2006 101c 04308C90 		sub	r3, r2, #48
 2007 1020 36204395 		.loc 1 613 0
 2008              		addls	r4, r4, #1
 2009 1024 3620DDE5 		.loc 1 615 0
 2010 1028 303042E2 		cmp	r3, #9
 2011              		.loc 1 617 0
 2012 102c 01408492 		addls	ip, sp, #56
 2013              		addls	r3, ip, r4
 2014 1030 090053E3 		strlsb	r2, [r3, #-54]
 2015              		.loc 1 618 0
 2016 1034 38108D92 		addls	r4, r4, #1
 2017 1038 04308190 		.loc 1 621 0
 2018 103c 36204395 		add	r2, sp, #56
 2019              		add	r3, r2, r4
 2020 1040 3720DDE5 		.loc 1 628 0
 2021 1044 303042E2 		mov	r1, r5
 2022              	.LVL71:
 2023 1048 01408492 		.loc 1 622 0
 2024              		add	r4, r4, #1
 2025 104c 090053E3 		.loc 1 621 0
 2026              		strb	r5, [r3, #-54]
 2027 1050 38C08D92 		.loc 1 625 0
 2028 1054 04308C90 		strb	r5, [sp, #52]
 2029 1058 36204395 		.loc 1 626 0
 2030              		strb	r5, [sp, #53]
 2031 105c 01408492 		.loc 1 627 0
 2032              		strb	r5, [sp, #54]
 2033 1060 38208DE2 		.loc 1 628 0
 2034 1064 043082E0 		strb	r5, [sp, #55]
 2035              		b	.L252
 2036 1068 0510A0E1 	.LVL72:
 2037              	.L257:
 2038              		.loc 1 632 0
 2039 106c 014084E2 		cmp	r2, #78
 2040              		bne	.L252
 2041 1070 365043E5 		.loc 1 635 0
 2042              		add	ip, sp, #56
 2043 1074 3450CDE5 		add	r3, ip, r4
 2044              		mov	r2, r0, lsr #8
 2045 1078 3550CDE5 		.loc 1 637 0
 2046              		strb	r0, [r3, #-53]
 2047 107c 3650CDE5 		.loc 1 635 0
 2048              		strb	r2, [r3, #-54]
 2049 1080 3750CDE5 		.loc 1 638 0
 2050 1084 080000EA 		add	r4, r4, #2
 2051              		mov	r1, r5
 2052              	.LVL73:
 2053              	.L252:
 2054 1088 4E0052E3 		.loc 1 643 0
 2055 108c 0600001A 		ldr	r3, .L343+60
 2056              		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2057 1090 38C08DE2 		cmp	r3, #89
 2058 1094 04308CE0 		bne	.L268
 2059 1098 2024A0E1 		.loc 1 645 0
 2060              		ldr	r2, .L343+8
 2061 109c 350043E5 	.LVL74:
 2062              		ldr	r3, .L343+64
 2063 10a0 362043E5 		str	r3, [r2, #0]
 2064              		.loc 1 646 0
 2065 10a4 024084E2 		ldr	r3, [r2, #0]
 2066 10a8 0510A0E1 		orr	r3, r3, #16777216
 2067              		str	r3, [r2, #0]
 2068              		b	.L270
 2069              	.L271:
 2070 10ac D8349FE5 		.loc 1 649 0
 2071 10b0 0030D3E5 		ldr	r3, .L343+8
 2072 10b4 590053E3 		ldr	r1, [r3, #4]
 2073 10b8 4700001A 	.L270:
 2074              		.loc 1 647 0
 2075 10bc 94249FE5 		cmp	r1, #0
 2076              		bge	.L271
 2077 10c0 C8349FE5 		.loc 1 656 0
 2078 10c4 003082E5 		ldr	r3, .L343+16
 2079              		.loc 1 651 0
 2080 10c8 003092E5 		bic	r1, r1, #63
 2081 10cc 013483E3 		.loc 1 656 0
 2082 10d0 003082E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2083 10d4 010000EA 		.loc 1 651 0
 2084              		mov	r1, r1, asl #16
 2085              		.loc 1 654 0
 2086 10d8 78349FE5 		ldr	r3, .L343+8
 2087 10dc 041093E5 		.loc 1 651 0
 2088              		mov	r1, r1, lsr #16
 2089              		.loc 1 654 0
 2090 10e0 000051E3 		mov	r5, #0
 2091 10e4 FBFFFFAA 		.loc 1 656 0
 2092              		cmp	r2, #89
 2093 10e8 70349FE5 		.loc 1 654 0
 2094              		str	r5, [r3, #0]
 2095 10ec 3F10C1E3 		.loc 1 652 0
 2096              		mov	r0, r1, lsr #6
 2097 10f0 0020D3E5 	.LVL75:
 2098              		.loc 1 656 0
 2099 10f4 0118A0E1 		bne	.L273
 2100              		.loc 1 658 0
 2101 10f8 58349FE5 		mov	r1, #10
 2102              	.LVL76:
 2103 10fc 2118A0E1 		add	r2, sp, #52
 2104              		bl	itoa
 2105 1100 0050A0E3 	.LVL77:
 2106              		.loc 1 659 0
 2107 1104 590052E3 		ldrb	r2, [sp, #52]	@ zero_extendqisi2
 2108              		sub	r3, r2, #48
 2109 1108 005083E5 		cmp	r3, #9
 2110              		.loc 1 661 0
 2111 110c 2103A0E1 		addls	r1, sp, #56
 2112              		addls	r3, r1, r4
 2113              		strlsb	r2, [r3, #-54]
 2114 1110 2800001A 		.loc 1 664 0
 2115              		ldrb	r2, [sp, #53]	@ zero_extendqisi2
 2116 1114 0A10A0E3 		sub	r3, r2, #48
 2117              		.loc 1 662 0
 2118 1118 34208DE2 		addls	r4, r4, #1
 2119 111c FEFFFFEB 		.loc 1 664 0
 2120              		cmp	r3, #9
 2121              		.loc 1 666 0
 2122 1120 3420DDE5 		addls	ip, sp, #56
 2123 1124 303042E2 		addls	r3, ip, r4
 2124 1128 090053E3 		strlsb	r2, [r3, #-54]
 2125              		.loc 1 669 0
 2126 112c 38108D92 		ldrb	r2, [sp, #54]	@ zero_extendqisi2
 2127 1130 04308190 		sub	r3, r2, #48
 2128 1134 36204395 		.loc 1 667 0
 2129              		addls	r4, r4, #1
 2130 1138 3520DDE5 		.loc 1 669 0
 2131 113c 303042E2 		cmp	r3, #9
 2132              		.loc 1 671 0
 2133 1140 01408492 		addls	r1, sp, #56
 2134              		addls	r3, r1, r4
 2135 1144 090053E3 		strlsb	r2, [r3, #-54]
 2136              		.loc 1 674 0
 2137 1148 38C08D92 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 2138 114c 04308C90 		sub	r3, r2, #48
 2139 1150 36204395 		.loc 1 672 0
 2140              		addls	r4, r4, #1
 2141 1154 3620DDE5 		.loc 1 674 0
 2142 1158 303042E2 		cmp	r3, #9
 2143              		.loc 1 676 0
 2144 115c 01408492 		addls	ip, sp, #56
 2145              		addls	r3, ip, r4
 2146 1160 090053E3 		strlsb	r2, [r3, #-54]
 2147              		.loc 1 677 0
 2148 1164 38108D92 		addls	r4, r4, #1
 2149 1168 04308190 		.loc 1 680 0
 2150 116c 36204395 		add	r2, sp, #56
 2151              		add	r3, r2, r4
 2152 1170 3720DDE5 		.loc 1 687 0
 2153 1174 303042E2 		mov	r1, r5
 2154              	.LVL78:
 2155 1178 01408492 		.loc 1 681 0
 2156              		add	r4, r4, #1
 2157 117c 090053E3 		.loc 1 680 0
 2158              		strb	r5, [r3, #-54]
 2159 1180 38C08D92 		.loc 1 684 0
 2160 1184 04308C90 		strb	r5, [sp, #52]
 2161 1188 36204395 		.loc 1 685 0
 2162              		strb	r5, [sp, #53]
 2163 118c 01408492 		.loc 1 686 0
 2164              		strb	r5, [sp, #54]
 2165 1190 38208DE2 		.loc 1 687 0
 2166 1194 043082E0 		strb	r5, [sp, #55]
 2167              		b	.L268
 2168 1198 0510A0E1 	.LVL79:
 2169              	.L273:
 2170              		.loc 1 691 0
 2171 119c 014084E2 		cmp	r2, #78
 2172              		bne	.L268
 2173 11a0 365043E5 		.loc 1 694 0
 2174              		add	ip, sp, #56
 2175 11a4 3450CDE5 		add	r3, ip, r4
 2176              		mov	r2, r0, lsr #8
 2177 11a8 3550CDE5 		.loc 1 696 0
 2178              		strb	r0, [r3, #-53]
 2179 11ac 3650CDE5 		.loc 1 694 0
 2180              		strb	r2, [r3, #-54]
 2181 11b0 3750CDE5 		.loc 1 697 0
 2182 11b4 080000EA 		add	r4, r4, #2
 2183              		mov	r1, r5
 2184              	.LVL80:
 2185              	.L268:
 2186 11b8 4E0052E3 		.loc 1 702 0
 2187 11bc 0600001A 		ldr	r3, .L343+68
 2188              		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2189 11c0 38C08DE2 		cmp	r3, #89
 2190 11c4 04308CE0 		bne	.L284
 2191 11c8 2024A0E1 		.loc 1 704 0
 2192              		ldr	r2, .L343+8
 2193 11cc 350043E5 	.LVL81:
 2194              		ldr	r3, .L343+72
 2195 11d0 362043E5 		str	r3, [r2, #0]
 2196              		.loc 1 705 0
 2197 11d4 024084E2 		ldr	r3, [r2, #0]
 2198 11d8 0510A0E1 		orr	r3, r3, #16777216
 2199              		str	r3, [r2, #0]
 2200              		b	.L286
 2201              	.L287:
 2202 11dc B0339FE5 		.loc 1 708 0
 2203 11e0 0030D3E5 		ldr	r3, .L343+8
 2204 11e4 590053E3 		ldr	r1, [r3, #4]
 2205 11e8 4000001A 	.L286:
 2206              		.loc 1 706 0
 2207 11ec 64239FE5 		cmp	r1, #0
 2208              		bge	.L287
 2209 11f0 A0339FE5 		.loc 1 715 0
 2210 11f4 003082E5 		ldr	r3, .L343+16
 2211              		.loc 1 711 0
 2212 11f8 003092E5 		ldr	r2, .L343+20
 2213 11fc 013483E3 		.loc 1 715 0
 2214 1200 003082E5 		ldrb	ip, [r3, #0]	@ zero_extendqisi2
 2215 1204 010000EA 		.loc 1 713 0
 2216              		ldr	r3, .L343+8
 2217              		.loc 1 711 0
 2218 1208 48339FE5 		and	r2, r1, r2
 2219 120c 041093E5 		.loc 1 713 0
 2220              		mov	r5, #0
 2221              		.loc 1 715 0
 2222 1210 000051E3 		cmp	ip, #89
 2223 1214 FBFFFFAA 		.loc 1 713 0
 2224              		str	r5, [r3, #0]
 2225 1218 40339FE5 		.loc 1 711 0
 2226              		mov	r0, r2, asr #6
 2227 121c 40239FE5 	.LVL82:
 2228              		.loc 1 715 0
 2229 1220 00C0D3E5 		bne	.L289
 2230              		.loc 1 717 0
 2231 1224 2C339FE5 		mov	r1, #10
 2232              	.LVL83:
 2233 1228 022001E0 		add	r2, sp, #52
 2234              		bl	itoa
 2235 122c 0050A0E3 	.LVL84:
 2236              		.loc 1 718 0
 2237 1230 59005CE3 		ldrb	r2, [sp, #52]	@ zero_extendqisi2
 2238              		sub	r3, r2, #48
 2239 1234 005083E5 		cmp	r3, #9
 2240              		.loc 1 720 0
 2241 1238 4203A0E1 		addls	r1, sp, #56
 2242              		addls	r3, r1, r4
 2243              		strlsb	r2, [r3, #-54]
 2244 123c 2300001A 		.loc 1 723 0
 2245              		ldrb	r2, [sp, #53]	@ zero_extendqisi2
 2246 1240 0A10A0E3 		sub	r3, r2, #48
 2247              		.loc 1 721 0
 2248 1244 34208DE2 		addls	r4, r4, #1
 2249 1248 FEFFFFEB 		.loc 1 723 0
 2250              		cmp	r3, #9
 2251              		.loc 1 725 0
 2252 124c 3420DDE5 		addls	ip, sp, #56
 2253 1250 303042E2 		addls	r3, ip, r4
 2254 1254 090053E3 		strlsb	r2, [r3, #-54]
 2255              		.loc 1 728 0
 2256 1258 38108D92 		ldrb	r2, [sp, #54]	@ zero_extendqisi2
 2257 125c 04308190 		sub	r3, r2, #48
 2258 1260 36204395 		.loc 1 726 0
 2259              		addls	r4, r4, #1
 2260 1264 3520DDE5 		.loc 1 728 0
 2261 1268 303042E2 		cmp	r3, #9
 2262              		.loc 1 730 0
 2263 126c 01408492 		addls	r1, sp, #56
 2264              		addls	r3, r1, r4
 2265 1270 090053E3 		strlsb	r2, [r3, #-54]
 2266              		.loc 1 733 0
 2267 1274 38C08D92 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 2268 1278 04308C90 		sub	r3, r2, #48
 2269 127c 36204395 		.loc 1 731 0
 2270              		addls	r4, r4, #1
 2271 1280 3620DDE5 		.loc 1 733 0
 2272 1284 303042E2 		cmp	r3, #9
 2273              		.loc 1 735 0
 2274 1288 01408492 		addls	ip, sp, #56
 2275              		addls	r3, ip, r4
 2276 128c 090053E3 		.loc 1 739 0
 2277              		add	r1, sp, #56
 2278 1290 38108D92 		.loc 1 736 0
 2279 1294 04308190 		addls	r4, r4, #1
 2280 1298 36204395 		.loc 1 735 0
 2281              		strlsb	r2, [r3, #-54]
 2282 129c 3720DDE5 		.loc 1 739 0
 2283 12a0 303042E2 		add	r3, r1, r4
 2284              		.loc 1 740 0
 2285 12a4 01408492 		add	r4, r4, #1
 2286              		.loc 1 739 0
 2287 12a8 090053E3 		strb	r5, [r3, #-54]
 2288              		b	.L284
 2289 12ac 38C08D92 	.LVL85:
 2290 12b0 04308C90 	.L289:
 2291              		.loc 1 750 0
 2292 12b4 38108DE2 		cmp	ip, #78
 2293              		bne	.L284
 2294 12b8 01408492 		.loc 1 753 0
 2295              		add	r2, sp, #56
 2296 12bc 36204395 		add	r3, r2, r4
 2297              		mov	r2, r0, lsr #8
 2298 12c0 043081E0 		.loc 1 755 0
 2299              		strb	r0, [r3, #-53]
 2300 12c4 014084E2 		.loc 1 753 0
 2301              		strb	r2, [r3, #-54]
 2302 12c8 365043E5 		.loc 1 756 0
 2303 12cc 070000EA 		add	r4, r4, #2
 2304              	.LVL86:
 2305              	.L284:
 2306              		ldr	r3, .L343+76
 2307 12d0 4E005CE3 		ldrb	r8, [r3, #0]	@ zero_extendqisi2
 2308 12d4 0500001A 		ldr	r3, .L343+80
 2309              		ldrh	r0, [r3, #0]
 2310 12d8 38208DE2 	.LVL87:
 2311 12dc 043082E0 		ldr	r3, .L343+84
 2312 12e0 2024A0E1 		ldrb	r7, [r3, #0]	@ zero_extendqisi2
 2313              		mov	r6, #0
 2314 12e4 350043E5 	.LVL88:
 2315              		b	.L300
 2316 12e8 362043E5 	.LVL89:
 2317              	.L301:
 2318 12ec 024084E2 		.loc 1 763 0
 2319              		cmp	r1, #512
 2320              		.loc 1 775 0
 2321 12f0 A4329FE5 		mov	r0, lr, lsr #16
 2322 12f4 0080D3E5 		add	r3, sp, #2
 2323 12f8 A0329FE5 		.loc 1 763 0
 2324 12fc B000D3E1 		bge	.L302
 2325              		.loc 1 765 0
 2326 1300 9C329FE5 		ldrb	r2, [r6, r3]	@ zero_extendqisi2
 2327 1304 0070D3E5 		.loc 1 768 0
 2328 1308 0060A0E3 		cmp	ip, #33554432
 2329              		.loc 1 765 0
 2330 130c 100000EA 		ldr	r3, .L343+88
 2331              		.loc 1 768 0
 2332              		mov	r0, ip, lsr #16
 2333              		moveq	r7, #1
 2334 1310 020C51E3 		.loc 1 765 0
 2335              		strb	r2, [r3, r1]
 2336 1314 2E08A0E1 		b	.L304
 2337 1318 02308DE2 	.L302:
 2338              		.loc 1 772 0
 2339 131c 060000AA 		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 2340              		.loc 1 775 0
 2341 1320 0320D6E7 		cmp	lr, #67108864
 2342              		.loc 1 772 0
 2343 1324 02045CE3 		strb	r3, [r5, #-512]
 2344              		.loc 1 775 0
 2345 1328 78329FE5 		moveq	r8, #1
 2346              		moveq	r0, #0
 2347 132c 2C08A0E1 	.L304:
 2348 1330 0170A003 		.loc 1 761 0
 2349              		add	r6, r6, #1
 2350 1334 0120C3E7 	.LVL90:
 2351 1338 040000EA 	.L300:
 2352              		add	r3, r0, #1
 2353              		.loc 1 773 0
 2354 133c 0330D6E7 		mov	lr, r3, asl #16
 2355              		mov	r2, r0, asl #16
 2356 1340 01035EE3 	.LVL91:
 2357              		.loc 1 772 0
 2358 1344 003245E5 		ldr	r3, .L343+92
 2359              		.loc 1 763 0
 2360 1348 0180A003 		mov	r1, r2, asr #16
 2361 134c 0000A003 	.LVL92:
 2362              		.loc 1 761 0
 2363              		cmp	r6, r4
 2364 1350 016086E2 		.loc 1 766 0
 2365              		mov	ip, lr
 2366              		.loc 1 772 0
 2367 1354 013080E2 		add	r5, r1, r3
 2368              		.loc 1 761 0
 2369 1358 03E8A0E1 		blt	.L301
 2370 135c 0028A0E1 		ldr	r3, .L343+76
 2371              		strb	r8, [r3, #0]
 2372              		ldr	r3, .L343+80
 2373 1360 44329FE5 		mov	r2, r2, lsr #16
 2374              		strh	r2, [r3, #0]	@ movhi
 2375 1364 4218A0E1 		ldr	r3, .L343+84
 2376              		.loc 1 782 0
 2377              		cmp	r1, #512
 2378 1368 040056E1 		.loc 1 761 0
 2379              		strb	r7, [r3, #0]
 2380 136c 0EC0A0E1 		ldr	r3, .L343+16
 2381              		.loc 1 782 0
 2382 1370 035081E0 		bge	.L308
 2383              		.loc 1 784 0
 2384 1374 E5FFFFBA 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2385 1378 1C329FE5 		cmp	r3, #78
 2386 137c 0080C3E5 		moveq	r2, #36
 2387 1380 18329FE5 		beq	.L339
 2388 1384 2228A0E1 		.loc 1 785 0
 2389 1388 B020C3E1 		cmp	r3, #89
 2390 138c 10329FE5 		bne	.L312
 2391              		mov	r2, #13
 2392 1390 020C51E3 	.L339:
 2393              		ldr	r3, .L343+88
 2394 1394 0070C3E5 		strb	r2, [r3, r1]
 2395 1398 C0319FE5 	.L312:
 2396              		.loc 1 786 0
 2397 139c 160000AA 		add	r3, r0, #1
 2398              		mov	r3, r3, asl #16
 2399 13a0 0030D3E5 		mov	r3, r3, lsr #16
 2400 13a4 4E0053E3 		.loc 1 788 0
 2401 13a8 2420A003 		mov	r2, r3, asl #16
 2402 13ac 0200000A 		mov	r1, r2, asr #16
 2403              		.loc 1 786 0
 2404 13b0 590053E3 		ldr	r2, .L343+80
 2405 13b4 0200001A 		.loc 1 788 0
 2406 13b8 0D20A0E3 		cmp	r1, #512
 2407              		.loc 1 786 0
 2408 13bc E4319FE5 		strh	r3, [r2, #0]	@ movhi
 2409 13c0 0120C3E7 		.loc 1 788 0
 2410              		bne	.L314
 2411              		ldr	r3, .L343+84
 2412 13c4 013080E2 		mov	r2, #1
 2413 13c8 0338A0E1 		mov	r0, r1
 2414 13cc 2338A0E1 		strb	r2, [r3, #0]
 2415              		b	.L316
 2416 13d0 0328A0E1 	.L308:
 2417 13d4 4218A0E1 		.loc 1 793 0
 2418              		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2419 13d8 C0219FE5 		cmp	r3, #78
 2420              		ldreq	r3, .L343+92
 2421 13dc 020C51E3 		moveq	r2, #36
 2422              		addeq	r3, r1, r3
 2423 13e0 B030C2E1 		beq	.L340
 2424              	.L317:
 2425 13e4 1E00001A 		.loc 1 794 0
 2426 13e8 B4319FE5 		cmp	r3, #89
 2427 13ec 0120A0E3 		bne	.L319
 2428 13f0 0100A0E1 		ldr	r3, .L343+92
 2429 13f4 0020C3E5 		mov	r2, #13
 2430 13f8 340000EA 		add	r3, r1, r3
 2431              	.L340:
 2432              		strb	r2, [r3, #-512]
 2433 13fc 0030D3E5 	.L319:
 2434 1400 4E0053E3 		.loc 1 795 0
 2435 1404 A0319F05 		add	r3, r0, #1
 2436 1408 2420A003 		mov	r3, r3, asl #16
 2437 140c 03308100 		mov	r3, r3, lsr #16
 2438 1410 0400000A 		ldr	r1, .L343+80
 2439              		.loc 1 797 0
 2440              		cmp	r3, #1024
 2441 1414 590053E3 		.loc 1 795 0
 2442 1418 0300001A 		strh	r3, [r1, #0]	@ movhi
 2443 141c 88319FE5 		.loc 1 797 0
 2444 1420 0D20A0E3 		bne	.L314
 2445 1424 033081E0 		.loc 1 799 0
 2446              		ldr	r3, .L343+76
 2447 1428 002243E5 		mov	r2, #1
 2448              		strb	r2, [r3, #0]
 2449              		.loc 1 800 0
 2450 142c 013080E2 		mov	r0, #0
 2451 1430 0338A0E1 		mov	r3, #0	@ movhi
 2452 1434 2338A0E1 		strh	r3, [r1, #0]	@ movhi
 2453 1438 60119FE5 		b	.L322
 2454              	.L314:
 2455 143c 010B53E3 		.loc 1 803 0
 2456              		ldr	r2, .L343+80
 2457 1440 B030C1E1 		ldrsh	r3, [r2, #0]
 2458              		cmp	r3, #512
 2459 1444 0600001A 		ldrh	r0, [r2, #0]
 2460              		bge	.L316
 2461 1448 4C319FE5 	.L322:
 2462 144c 0120A0E3 		.loc 1 805 0
 2463 1450 0020C3E5 		ldr	r3, .L343+16
 2464              		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2465 1454 0000A0E3 		cmp	r3, #78
 2466 1458 0030A0E3 		moveq	r1, r0, asl #16
 2467 145c B030C1E1 		moveq	r2, #36
 2468 1460 040000EA 		beq	.L341
 2469              		.loc 1 806 0
 2470              		cmp	r3, #89
 2471 1464 34219FE5 		bne	.L325
 2472 1468 F030D2E1 		mov	r1, r0, asl #16
 2473 146c 020C53E3 		mov	r2, #10
 2474 1470 B000D2E1 	.L341:
 2475 1474 150000AA 		ldr	r3, .L343+88
 2476              		strb	r2, [r3, r1, asr #16]
 2477              	.L325:
 2478 1478 E0309FE5 		.loc 1 807 0
 2479 147c 0030D3E5 		add	r3, r0, #1
 2480 1480 4E0053E3 		mov	r3, r3, asl #16
 2481 1484 0018A001 		mov	r3, r3, lsr #16
 2482 1488 2420A003 		ldr	r2, .L343+80
 2483 148c 0300000A 		.loc 1 809 0
 2484              		cmp	r3, #512
 2485 1490 590053E3 		.loc 1 807 0
 2486 1494 0300001A 		strh	r3, [r2, #0]	@ movhi
 2487 1498 0018A0E1 		.loc 1 809 0
 2488 149c 0A20A0E3 		ldreq	r3, .L343+84
 2489              		moveq	r2, #1
 2490 14a0 00319FE5 		streqb	r2, [r3, #0]
 2491 14a4 4128C3E7 		b	.L327
 2492              	.L316:
 2493              		.loc 1 814 0
 2494 14a8 013080E2 		ldr	r3, .L343+16
 2495 14ac 0338A0E1 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2496 14b0 2338A0E1 		cmp	r3, #78
 2497 14b4 E4209FE5 		ldreq	r2, .L343+92
 2498              		moveq	r3, r0, asl #16
 2499 14b8 020C53E3 		addeq	r2, r2, r3, asr #16
 2500              		moveq	r3, #36
 2501 14bc B030C2E1 		beq	.L342
 2502              	.L329:
 2503 14c0 DC309F05 		.loc 1 815 0
 2504 14c4 0120A003 		cmp	r3, #89
 2505 14c8 0020C305 		bne	.L331
 2506 14cc 190000EA 		ldr	r2, .L343+92
 2507              		mov	r3, r0, asl #16
 2508              		add	r2, r2, r3, asr #16
 2509 14d0 88309FE5 		mov	r3, #10
 2510 14d4 0030D3E5 	.L342:
 2511 14d8 4E0053E3 		strb	r3, [r2, #-512]
 2512 14dc C8209F05 	.L331:
 2513 14e0 0038A001 		.loc 1 816 0
 2514 14e4 43288200 		add	r3, r0, #1
 2515 14e8 2430A003 		mov	r3, r3, asl #16
 2516 14ec 0500000A 		mov	r3, r3, lsr #16
 2517              		ldr	r1, .L343+80
 2518              		.loc 1 818 0
 2519 14f0 590053E3 		cmp	r3, #1024
 2520 14f4 0400001A 		.loc 1 816 0
 2521 14f8 AC209FE5 		strh	r3, [r1, #0]	@ movhi
 2522 14fc 0038A0E1 		.loc 1 820 0
 2523 1500 432882E0 		ldreq	r3, .L343+76
 2524 1504 0A30A0E3 		moveq	r2, #1
 2525              		.loc 1 821 0
 2526 1508 003242E5 		moveq	ip, #0	@ movhi
 2527              		.loc 1 820 0
 2528              		streqb	r2, [r3, #0]
 2529 150c 013080E2 		.loc 1 821 0
 2530 1510 0338A0E1 		streqh	ip, [r1, #0]	@ movhi
 2531 1514 2338A0E1 	.L327:
 2532 1518 80109FE5 		.loc 1 825 0
 2533              		mov	r2, #0
 2534 151c 010B53E3 		mvn	r3, #0
 2535              		str	r2, [r3, #-4047]
 2536 1520 B030C1E1 		.loc 1 826 0
 2537              		add	sp, sp, #56
 2538 1524 70309F05 		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 2539 1528 0120A003 		bx	lr
 2540              	.L344:
 2541 152c 00C0A003 		.align	2
 2542              	.L343:
 2543 1530 0020C305 		.word	-536854528
 2544              		.word	ad1_3
 2545 1534 B0C0C101 		.word	-536477696
 2546              		.word	2162440
 2547              		.word	asc
 2548 1538 0020A0E3 		.word	65472
 2549 153c 0030E0E3 		.word	ad0_3
 2550 1540 CF2F03E5 		.word	-536657920
 2551              		.word	ad0_2
 2552 1544 38D08DE2 		.word	2162436
 2553 1548 F041BDE8 		.word	ad0_1
 2554 154c 1EFF2FE1 		.word	2162434
 2555              		.word	ad1_2
 2556              		.word	ad0_4
 2557              		.word	2162448
 2558 1550 004000E0 		.word	ad1_7
 2559 1554 04000000 		.word	2162560
 2560 1558 000006E0 		.word	ad1_6
 2561 155c 08FF2000 		.word	2162496
 2562 1560 05000000 		.word	log_array2
 2563 1564 C0FF0000 		.word	RX_in
 2564 1568 06000000 		.word	log_array1
 2565 156c 004003E0 		.word	RX_array1
 2566 1570 07000000 		.word	RX_array2
 2567 1574 04FF2000 	.LFE7:
 2569 157c 02FF2000 		.section	.rodata.str1.4
 2570 1580 09000000 		.align	2
 2571 1584 0A000000 	.LC11:
 2572 1588 10FF2000 		.ascii	"LOGCON.txt\000"
 2573 158c 0B000000 		.align	2
 2574 1590 80FF2000 	.LC12:
 2575 1594 0C000000 		.ascii	"Error creating LOGCON.txt, locking up...\012\015\000"
 2576 1598 40FF2000 		.align	2
 2577 159c 00000000 	.LC13:
 2578 15a0 00000000 		.ascii	"MODE = 0\015\012ASCII = N\015\012Baud = 4\015\012Fr"
 2579 15a4 00000000 		.ascii	"equency = 100\015\012Trigger Character = $\015\012T"
 2580 15a8 00000000 		.ascii	"ext Frame = 100\015\012AD1.3 = N\015\012AD0.3 = N\015"
 2581 15ac 00000000 		.ascii	"\012AD0.2 = N\015\012AD0.1 = N\015\012AD1.2 = N\015"
 2582              		.ascii	"\012AD0.4 = N\015\012AD1.7 = N\015\012AD1.6 = N\015"
 2583              		.ascii	"\012Saftey On = Y\015\012\000"
 2584              		.align	2
 2585 00dd 000000   	.LC14:
 2586              		.ascii	"mode = %d\012\015\000"
 2587 00e0 4C4F4743 		.align	2
 2587      4F4E2E74 
 2587      787400
 2588 00eb 00       	.LC15:
 2589              		.ascii	"asc = %c\012\015\000"
 2590 00ec 4572726F 		.align	2
 2590      72206372 
 2590      65617469 
 2590      6E67204C 
 2590      4F47434F 
 2591 0117 00       	.LC16:
 2592              		.ascii	"baud = %d\012\015\000"
 2593 0118 4D4F4445 		.align	2
 2593      203D2030 
 2593      0D0A4153 
 2593      43494920 
 2593      3D204E0D 
 2594 0139 65717565 	.LC17:
 2594      6E637920 
 2594      3D203130 
 2594      300D0A54 
 2594      72696767 
 2595 0160 65787420 		.ascii	"freq = %d\012\015\000"
 2595      4672616D 
 2595      65203D20 
 2595      3130300D 
 2595      0A414431 
 2596 0186 0A414430 		.align	2
 2596      2E32203D 
 2596      204E0D0A 
 2596      4144302E 
 2596      31203D20 
 2597 01a7 0A414430 	.LC18:
 2597      2E34203D 
 2597      204E0D0A 
 2597      4144312E 
 2597      37203D20 
 2598 01c8 0A536166 		.ascii	"trig = %c\012\015\000"
 2598      74657920 
 2598      4F6E203D 
 2598      20590D0A 
 2598      00
 2599 01d9 000000   		.align	2
 2600              	.LC19:
 2601 01dc 6D6F6465 		.ascii	"frame = %d\012\015\000"
 2601      203D2025 
 2601      640A0D00 
 2602              		.align	2
 2603              	.LC20:
 2604 01e8 61736320 		.ascii	"ad1_3 = %c\012\015\000"
 2604      3D202563 
 2604      0A0D00
 2605 01f3 00       		.align	2
 2606              	.LC21:
 2607 01f4 62617564 		.ascii	"ad0_3 = %c\012\015\000"
 2607      203D2025 
 2607      640A0D00 
 2608              		.align	2
 2609              	.LC22:
 2610 0200 66726571 		.ascii	"ad0_2 = %c\012\015\000"
 2610      203D2025 
 2610      640A0D00 
 2611              		.align	2
 2612              	.LC23:
 2613 020c 74726967 		.ascii	"ad0_1 = %c\012\015\000"
 2613      203D2025 
 2613      630A0D00 
 2614              		.align	2
 2615              	.LC24:
 2616 0218 6672616D 		.ascii	"ad1_2 = %c\012\015\000"
 2616      65203D20 
 2616      25640A0D 
 2616      00
 2617 0225 000000   		.align	2
 2618              	.LC25:
 2619 0228 6164315F 		.ascii	"ad0_4 = %c\012\015\000"
 2619      33203D20 
 2619      25630A0D 
 2619      00
 2620 0235 000000   		.align	2
 2621              	.LC26:
 2622 0238 6164305F 		.ascii	"ad1_7 = %c\012\015\000"
 2622      33203D20 
 2622      25630A0D 
 2622      00
 2623 0245 000000   		.align	2
 2624              	.LC27:
 2625 0248 6164305F 		.ascii	"ad1_6 = %c\012\015\000"
 2625      32203D20 
 2625      25630A0D 
 2625      00
 2626 0255 000000   		.align	2
 2627              	.LC28:
 2628 0258 6164305F 		.ascii	"safety = %c\012\015\000"
 2628      31203D20 
 2628      25630A0D 
 2628      00
 2629 0265 000000   		.text
 2630              		.align	2
 2631 0268 6164315F 		.global	Log_init
 2631      32203D20 
 2631      25630A0D 
 2631      00
 2633              	Log_init:
 2634 0278 6164305F 	.LFB13:
 2634      34203D20 
 2634      25630A0D 
 2634      00
 2635 0285 000000   		.loc 1 939 0
 2636              		@ Function supports interworking.
 2637 0288 6164315F 		@ args = 0, pretend = 0, frame = 0
 2637      37203D20 
 2637      25630A0D 
 2637      00
 2638 0295 000000   		@ frame_needed = 0, uses_anonymous_args = 0
 2639              		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 2640 0298 6164315F 	.LCFI14:
 2640      36203D20 
 2640      25630A0D 
 2640      00
 2641 02a5 000000   		.loc 1 944 0
 2642              		ldr	r0, .L465
 2643 02a8 73616665 		bl	root_file_exists
 2643      7479203D 
 2643      2025630A 
 2643      0D00
 2644              		cmp	r0, #0
 2645              		ldr	r5, .L465+4
 2646              		beq	.L346
 2647              		.loc 1 947 0
 2648              		ldr	r0, .L465
 2649              		bl	root_open
 2650              		.loc 1 948 0
 2651              		ldr	r4, .L465+8
 2652              		mov	r2, #512
 2653              		mov	r1, r4
 2654 15b0 F0412DE9 		.loc 1 947 0
 2655              		str	r0, [r5, #0]
 2656              		.loc 1 948 0
 2657 15b4 80059FE5 		bl	fat16_read_file
 2658 15b8 FEFFFFEB 		mov	r2, r0, asl #16
 2659 15bc 000050E3 		mov	r2, r2, asr #16
 2660 15c0 78559FE5 		.loc 1 949 0
 2661 15c4 0F00000A 		mov	r3, #0
 2662              		strb	r3, [r4, r2]
 2663 15c8 6C059FE5 		.loc 1 948 0
 2664 15cc FEFFFFEB 		ldr	r3, .L465+12
 2665              		.loc 1 950 0
 2666 15d0 6C459FE5 		ldr	r0, [r5, #0]
 2667 15d4 022CA0E3 		.loc 1 948 0
 2668 15d8 0410A0E1 		str	r2, [r3, #0]
 2669              		.loc 1 950 0
 2670 15dc 000085E5 		bl	fat16_close_file
 2671              		b	.L348
 2672 15e0 FEFFFFEB 	.L346:
 2673 15e4 0028A0E1 		.loc 1 955 0
 2674 15e8 4228A0E1 		ldr	r0, .L465
 2675              		bl	root_open_new
 2676 15ec 0030A0E3 		.loc 1 956 0
 2677 15f0 0230C4E7 		cmp	r0, #0
 2678              		.loc 1 955 0
 2679 15f4 4C359FE5 		str	r0, [r5, #0]
 2680              		.loc 1 956 0
 2681 15f8 000095E5 		bne	.L349
 2682              		.loc 1 958 0
 2683 15fc 002083E5 		ldr	r0, .L465+16
 2684              		bl	rprintf
 2685 1600 FEFFFFEB 	.L351:
 2686 1604 250000EA 		.loc 1 961 0
 2687              		mov	r1, #1
 2688              		mov	r0, #0
 2689 1608 2C059FE5 		bl	stat
 2690 160c FEFFFFEB 		.loc 1 962 0
 2691              		mov	r0, #50
 2692 1610 000050E3 		bl	delay_ms
 2693              		.loc 1 963 0
 2694 1614 000085E5 		mov	r0, #0
 2695              		mov	r1, r0
 2696 1618 1200001A 		bl	stat
 2697              		.loc 1 964 0
 2698 161c 28059FE5 		mov	r0, #1
 2699 1620 FEFFFFEB 		mov	r1, r0
 2700              		bl	stat
 2701              		.loc 1 965 0
 2702 1624 0110A0E3 		mov	r0, #50
 2703 1628 0000A0E3 		bl	delay_ms
 2704 162c FEFFFFEB 		.loc 1 966 0
 2705              		mov	r0, #1
 2706 1630 3200A0E3 		mov	r1, #0
 2707 1634 FEFFFFEB 		bl	stat
 2708              		b	.L351
 2709 1638 0000A0E3 	.L349:
 2710 163c 0010A0E1 		.loc 1 970 0
 2711 1640 FEFFFFEB 		ldr	r1, .L465+20
 2712              		ldr	r0, .L465+8
 2713 1644 0100A0E3 		bl	strcpy
 2714 1648 0010A0E1 		.loc 1 971 0
 2715 164c FEFFFFEB 		ldr	r0, .L465+8
 2716              		bl	strlen
 2717 1650 3200A0E3 		ldr	ip, .L465+12
 2718 1654 FEFFFFEB 		mov	r3, r0
 2719              		.loc 1 972 0
 2720 1658 0100A0E3 		mov	r2, r0, asl #16
 2721 165c 0010A0E3 		mov	r2, r2, lsr #16
 2722 1660 FEFFFFEB 		ldr	r1, .L465+8
 2723 1664 EEFFFFEA 		.loc 1 971 0
 2724              		str	r3, [ip, #0]
 2725              		.loc 1 972 0
 2726 1668 E0149FE5 		ldr	r0, [r5, #0]
 2727 166c D0049FE5 		bl	fat16_write_file
 2728 1670 FEFFFFEB 		.loc 1 973 0
 2729              		bl	sd_raw_sync
 2730 1674 C8049FE5 	.L348:
 2731 1678 FEFFFFEB 		mov	r7, #0
 2732 167c C4C49FE5 	.LVL93:
 2733 1680 0030A0E1 		ldr	r5, .L465+8
 2734              		mov	r8, r7
 2735 1684 0028A0E1 	.LVL94:
 2736 1688 2228A0E1 		mov	r6, r7
 2737 168c B0149FE5 	.LVL95:
 2738              		mov	r4, r7
 2739 1690 00308CE5 	.LVL96:
 2740              		b	.L352
 2741 1694 000095E5 	.LVL97:
 2742 1698 FEFFFFEB 	.L353:
 2743              		.loc 1 979 0
 2744 169c FEFFFFEB 		ldrb	r1, [r5, #0]	@ zero_extendqisi2
 2745              		cmp	r1, #10
 2746 16a0 0070A0E3 		bne	.L354
 2747              		.loc 1 982 0
 2748 16a4 98549FE5 		add	r6, r6, #1
 2749 16a8 0780A0E1 		.loc 1 983 0
 2750              		cmp	r6, #1
 2751 16ac 0760A0E1 		bne	.L356
 2752              		.loc 1 985 0
 2753 16b0 0740A0E1 		ldrb	r3, [r5, #-2]	@ zero_extendqisi2
 2754              		sub	r3, r3, #48
 2755 16b4 C60000EA 		and	r3, r3, #255
 2756              		ldr	r2, .L465+24
 2757              		.loc 1 986 0
 2758              		ldr	r0, .L465+28
 2759 16b8 0010D5E5 		mov	r1, r3
 2760 16bc 0A0051E3 		.loc 1 985 0
 2761 16c0 C100001A 		strb	r3, [r2, #0]
 2762              		b	.L460
 2763 16c4 016086E2 	.L356:
 2764              		.loc 1 988 0
 2765 16c8 010056E3 		cmp	r6, #2
 2766 16cc 0700001A 		.loc 1 990 0
 2767              		ldreqb	r2, [r5, #-2]	@ zero_extendqisi2
 2768 16d0 023055E5 		.loc 1 991 0
 2769 16d4 303043E2 		ldreq	r0, .L465+32
 2770 16d8 FF3003E2 		.loc 1 990 0
 2771 16dc 70249FE5 		ldreq	r3, .L465+36
 2772              		.loc 1 991 0
 2773 16e0 70049FE5 		moveq	r1, r2
 2774 16e4 0310A0E1 		beq	.L464
 2775              	.L358:
 2776 16e8 0030C2E5 		.loc 1 993 0
 2777 16ec B50000EA 		cmp	r6, #3
 2778              		bne	.L360
 2779              		.loc 1 995 0
 2780 16f0 020056E3 		ldrb	r3, [r5, #-2]	@ zero_extendqisi2
 2781              		cmp	r3, #49
 2782 16f4 02205505 		moveq	r2, #1200
 2783              		beq	.L459
 2784 16f8 5C049F05 		.loc 1 996 0
 2785              		cmp	r3, #50
 2786 16fc 5C349F05 		moveq	r2, #2400
 2787              		beq	.L459
 2788 1700 0210A001 		.loc 1 997 0
 2789 1704 4300000A 		cmp	r3, #51
 2790              		moveq	r2, #4800
 2791              		beq	.L459
 2792 1708 030056E3 		.loc 1 998 0
 2793 170c 1E00001A 		cmp	r3, #52
 2794              		moveq	r2, #9600
 2795 1710 023055E5 		beq	.L459
 2796 1714 310053E3 		.loc 1 999 0
 2797 1718 4B2EA003 		cmp	r3, #53
 2798 171c 1400000A 		moveq	r2, #19200
 2799              		beq	.L459
 2800 1720 320053E3 		.loc 1 1000 0
 2801 1724 962EA003 		cmp	r3, #54
 2802 1728 1100000A 		moveq	r2, #38400
 2803              		beq	.L459
 2804 172c 330053E3 		.loc 1 1001 0
 2805 1730 4B2DA003 		cmp	r3, #55
 2806 1734 0E00000A 		moveq	r2, #57600
 2807              		beq	.L459
 2808 1738 340053E3 		.loc 1 1002 0
 2809 173c 962DA003 		cmp	r3, #56
 2810 1740 0B00000A 		bne	.L364
 2811              		ldr	r2, .L465+40
 2812 1744 350053E3 	.L459:
 2813 1748 4B2CA003 		ldr	r3, .L465+44
 2814 174c 0800000A 		str	r2, [r3, #0]
 2815              	.L364:
 2816 1750 360053E3 		.loc 1 1004 0
 2817 1754 962CA003 		ldr	r3, .L465+44
 2818 1758 0500000A 		ldr	r0, .L465+48
 2819              		ldr	r1, [r3, #0]
 2820 175c 370053E3 		b	.L460
 2821 1760 E12CA003 	.L360:
 2822 1764 0200000A 		.loc 1 1006 0
 2823              		cmp	r6, #4
 2824 1768 380053E3 		bne	.L378
 2825 176c 0200001A 		.loc 1 1008 0
 2826 1770 EC239FE5 		ldrb	r3, [r5, #-3]	@ zero_extendqisi2
 2827              		ldrb	r2, [r5, #-2]	@ zero_extendqisi2
 2828 1774 EC339FE5 		mla	r2, r3, r1, r2
 2829 1778 002083E5 		.loc 1 1009 0
 2830              		ldrb	r1, [r5, #-4]	@ zero_extendqisi2
 2831              		.loc 1 1008 0
 2832 177c E4339FE5 		ldr	ip, .L465+52
 2833 1780 E4039FE5 		.loc 1 1009 0
 2834 1784 001093E5 		sub	r3, r1, #48
 2835 1788 8E0000EA 		.loc 1 1008 0
 2836              		sub	r0, r2, #528
 2837              		.loc 1 1009 0
 2838 178c 040056E3 		cmp	r3, #9
 2839 1790 1A00001A 		.loc 1 1008 0
 2840              		str	r0, [ip, #0]
 2841 1794 033055E5 		.loc 1 1009 0
 2842 1798 022055E5 		bhi	.L380
 2843 179c 932122E0 		.loc 1 1011 0
 2844              		mov	r3, #100
 2845 17a0 041055E5 		mul	r3, r1, r3
 2846              		.loc 1 1012 0
 2847 17a4 C4C39FE5 		ldrb	r1, [r5, #-5]	@ zero_extendqisi2
 2848              		.loc 1 1011 0
 2849 17a8 303041E2 		sub	r3, r3, #4800
 2850              		.loc 1 1012 0
 2851 17ac 210E42E2 		sub	r2, r1, #48
 2852              		.loc 1 1011 0
 2853 17b0 090053E3 		add	r3, r0, r3
 2854              		.loc 1 1012 0
 2855 17b4 00008CE5 		cmp	r2, #9
 2856              		.loc 1 1011 0
 2857 17b8 0C00008A 		str	r3, [ip, #0]
 2858              		.loc 1 1012 0
 2859 17bc 6430A0E3 		subls	r3, r3, #47872
 2860 17c0 910303E0 		subls	r3, r3, #128
 2861              		movls	r2, #1000
 2862 17c4 051055E5 		mlals	r3, r1, r2, r3
 2863              		strls	r3, [ip, #0]
 2864 17c8 4B3D43E2 	.L380:
 2865              		.loc 1 1014 0
 2866 17cc 302041E2 		ldr	r3, .L465+52
 2867              		ldr	r0, .L465+56
 2868 17d0 033080E0 		ldr	r1, [r3, #0]
 2869              		b	.L460
 2870 17d4 090052E3 	.L378:
 2871              		.loc 1 1016 0
 2872 17d8 00308CE5 		cmp	r6, #5
 2873              		bne	.L383
 2874 17dc BB3C4392 		.loc 1 1018 0
 2875 17e0 80304392 		ldrb	r2, [r5, #-2]	@ zero_extendqisi2
 2876 17e4 FA2FA093 		.loc 1 1020 0
 2877 17e8 91322390 		ldr	r0, .L465+60
 2878 17ec 00308C95 		.loc 1 1018 0
 2879              		ldr	r3, .L465+64
 2880              		.loc 1 1020 0
 2881 17f0 78339FE5 		mov	r1, r2
 2882 17f4 78039FE5 	.L464:
 2883 17f8 001093E5 		.loc 1 1018 0
 2884 17fc 710000EA 		strb	r2, [r3, #0]
 2885              		b	.L460
 2886              	.L383:
 2887 1800 050056E3 		.loc 1 1022 0
 2888 1804 0500001A 		cmp	r6, #6
 2889              		bne	.L385
 2890 1808 022055E5 		.loc 1 1024 0
 2891              		ldrb	r2, [r5, #-2]	@ zero_extendqisi2
 2892 180c 64039FE5 		ldrb	r3, [r5, #-3]	@ zero_extendqisi2
 2893              		mla	r1, r3, r1, r2
 2894 1810 64339FE5 		ldrb	r2, [r5, #-4]	@ zero_extendqisi2
 2895              		mov	r3, #100
 2896 1814 0210A0E1 		mla	r3, r2, r3, r1
 2897              		sub	r3, r3, #5312
 2898              		sub	r3, r3, #16
 2899 1818 0020C3E5 		mov	r3, r3, asl #16
 2900 181c 690000EA 		.loc 1 1025 0
 2901              		ldr	r0, .L465+68
 2902              		.loc 1 1024 0
 2903 1820 060056E3 		mov	r3, r3, lsr #16
 2904 1824 1200001A 		ldr	r1, .L465+72
 2905              		.loc 1 1025 0
 2906 1828 022055E5 		mov	r2, r3, asl #16
 2907 182c 033055E5 		cmp	r0, r2, asr #16
 2908 1830 932121E0 		.loc 1 1024 0
 2909 1834 042055E5 		strh	r3, [r1, #0]	@ movhi
 2910 1838 6430A0E3 		.loc 1 1025 0
 2911 183c 921323E0 		strlth	r0, [r1, #0]	@ movhi
 2912 1840 533D43E2 		.loc 1 1026 0
 2913 1844 103043E2 		ldr	r0, .L465+76
 2914 1848 0338A0E1 		ldrsh	r1, [r1, #0]
 2915              		b	.L460
 2916 184c 2C039FE5 	.L385:
 2917              		.loc 1 1028 0
 2918 1850 2338A0E1 		cmp	r6, #7
 2919 1854 28139FE5 		bne	.L389
 2920              		.loc 1 1030 0
 2921 1858 0328A0E1 		ldrb	r1, [r5, #-2]	@ zero_extendqisi2
 2922 185c 420850E1 		ldr	r3, .L465+80
 2923              		.loc 1 1031 0
 2924 1860 B030C1E1 		cmp	r1, #89
 2925              		.loc 1 1030 0
 2926 1864 B000C1B1 		strb	r1, [r3, #0]
 2927              		.loc 1 1032 0
 2928 1868 18039FE5 		ldr	r0, .L465+84
 2929 186c F010D1E1 		.loc 1 1031 0
 2930 1870 540000EA 		addeq	r3, r4, #1
 2931              		andeq	r4, r3, #255
 2932              		b	.L460
 2933 1874 070056E3 	.L389:
 2934 1878 0700001A 		.loc 1 1034 0
 2935              		cmp	r6, #8
 2936 187c 021055E5 		bne	.L393
 2937 1880 04339FE5 		.loc 1 1036 0
 2938              		ldrb	r1, [r5, #-2]	@ zero_extendqisi2
 2939 1884 590051E3 		ldr	r3, .L465+88
 2940              		.loc 1 1037 0
 2941 1888 0010C3E5 		cmp	r1, #89
 2942              		.loc 1 1036 0
 2943 188c FC029FE5 		strb	r1, [r3, #0]
 2944              		.loc 1 1038 0
 2945 1890 01308402 		ldr	r0, .L465+92
 2946 1894 FF400302 		.loc 1 1037 0
 2947 1898 4A0000EA 		addeq	r3, r4, #1
 2948              		andeq	r4, r3, #255
 2949              		b	.L460
 2950 189c 080056E3 	.L393:
 2951 18a0 0700001A 		.loc 1 1040 0
 2952              		cmp	r6, #9
 2953 18a4 021055E5 		bne	.L397
 2954 18a8 E4329FE5 		.loc 1 1042 0
 2955              		ldrb	r1, [r5, #-2]	@ zero_extendqisi2
 2956 18ac 590051E3 		ldr	r3, .L465+96
 2957              		.loc 1 1043 0
 2958 18b0 0010C3E5 		cmp	r1, #89
 2959              		.loc 1 1042 0
 2960 18b4 DC029FE5 		strb	r1, [r3, #0]
 2961              		.loc 1 1044 0
 2962 18b8 01308402 		ldr	r0, .L465+100
 2963 18bc FF400302 		.loc 1 1043 0
 2964 18c0 400000EA 		addeq	r3, r4, #1
 2965              		andeq	r4, r3, #255
 2966              		b	.L460
 2967 18c4 090056E3 	.L397:
 2968 18c8 0700001A 		.loc 1 1046 0
 2969              		cmp	r6, #10
 2970 18cc 021055E5 		bne	.L401
 2971 18d0 C4329FE5 		.loc 1 1048 0
 2972              		ldrb	r1, [r5, #-2]	@ zero_extendqisi2
 2973 18d4 590051E3 		ldr	r3, .L465+104
 2974              		.loc 1 1049 0
 2975 18d8 0010C3E5 		cmp	r1, #89
 2976              		.loc 1 1048 0
 2977 18dc BC029FE5 		strb	r1, [r3, #0]
 2978              		.loc 1 1050 0
 2979 18e0 01308402 		ldr	r0, .L465+108
 2980 18e4 FF400302 		.loc 1 1049 0
 2981 18e8 360000EA 		addeq	r3, r4, #1
 2982              		andeq	r4, r3, #255
 2983              		b	.L460
 2984 18ec 0A0056E3 	.L401:
 2985 18f0 0700001A 		.loc 1 1052 0
 2986              		cmp	r6, #11
 2987 18f4 021055E5 		bne	.L405
 2988 18f8 A4329FE5 		.loc 1 1054 0
 2989              		ldrb	r1, [r5, #-2]	@ zero_extendqisi2
 2990 18fc 590051E3 		ldr	r3, .L465+112
 2991              		.loc 1 1055 0
 2992 1900 0010C3E5 		cmp	r1, #89
 2993              		.loc 1 1054 0
 2994 1904 9C029FE5 		strb	r1, [r3, #0]
 2995              		.loc 1 1056 0
 2996 1908 01308402 		ldr	r0, .L465+116
 2997 190c FF400302 		.loc 1 1055 0
 2998 1910 2C0000EA 		addeq	r3, r4, #1
 2999              		andeq	r4, r3, #255
 3000              		b	.L460
 3001 1914 0B0056E3 	.L405:
 3002 1918 0700001A 		.loc 1 1058 0
 3003              		cmp	r6, #12
 3004 191c 021055E5 		bne	.L409
 3005 1920 84329FE5 		.loc 1 1060 0
 3006              		ldrb	r1, [r5, #-2]	@ zero_extendqisi2
 3007 1924 590051E3 		ldr	r3, .L465+120
 3008              		.loc 1 1061 0
 3009 1928 0010C3E5 		cmp	r1, #89
 3010              		.loc 1 1060 0
 3011 192c 7C029FE5 		strb	r1, [r3, #0]
 3012              		.loc 1 1062 0
 3013 1930 01308402 		ldr	r0, .L465+124
 3014 1934 FF400302 		.loc 1 1061 0
 3015 1938 220000EA 		addeq	r3, r4, #1
 3016              		andeq	r4, r3, #255
 3017              		b	.L460
 3018 193c 0C0056E3 	.L409:
 3019 1940 0700001A 		.loc 1 1064 0
 3020              		cmp	r6, #13
 3021 1944 021055E5 		bne	.L413
 3022 1948 64329FE5 		.loc 1 1066 0
 3023              		ldrb	r1, [r5, #-2]	@ zero_extendqisi2
 3024 194c 590051E3 		ldr	r3, .L465+128
 3025              		.loc 1 1067 0
 3026 1950 0010C3E5 		cmp	r1, #89
 3027              		.loc 1 1066 0
 3028 1954 5C029FE5 		strb	r1, [r3, #0]
 3029              		.loc 1 1068 0
 3030 1958 01308402 		ldr	r0, .L465+132
 3031 195c FF400302 		.loc 1 1067 0
 3032 1960 180000EA 		addeq	r3, r4, #1
 3033              		andeq	r4, r3, #255
 3034              		b	.L460
 3035 1964 0D0056E3 	.L413:
 3036 1968 0700001A 		.loc 1 1070 0
 3037              		cmp	r6, #14
 3038 196c 021055E5 		bne	.L417
 3039 1970 44329FE5 		.loc 1 1072 0
 3040              		ldrb	r1, [r5, #-2]	@ zero_extendqisi2
 3041 1974 590051E3 		ldr	r3, .L465+136
 3042              		.loc 1 1073 0
 3043 1978 0010C3E5 		cmp	r1, #89
 3044              		.loc 1 1072 0
 3045 197c 3C029FE5 		strb	r1, [r3, #0]
 3046              		.loc 1 1074 0
 3047 1980 01308402 		ldr	r0, .L465+140
 3048 1984 FF400302 		.loc 1 1073 0
 3049 1988 0E0000EA 		addeq	r3, r4, #1
 3050              		andeq	r4, r3, #255
 3051              		b	.L460
 3052 198c 0E0056E3 	.L417:
 3053 1990 0700001A 		.loc 1 1076 0
 3054              		cmp	r6, #15
 3055 1994 021055E5 		bne	.L354
 3056 1998 24329FE5 		.loc 1 1078 0
 3057              		ldrb	r8, [r5, #-2]	@ zero_extendqisi2
 3058 199c 590051E3 		.loc 1 1079 0
 3059              		ldr	r0, .L465+144
 3060 19a0 0010C3E5 		mov	r1, r8
 3061              	.L460:
 3062 19a4 1C029FE5 		bl	rprintf
 3063              	.L354:
 3064 19a8 01308402 		.loc 1 976 0
 3065 19ac FF400302 		add	r7, r7, #1
 3066 19b0 040000EA 		add	r5, r5, #1
 3067              	.LVL98:
 3068              	.L352:
 3069 19b4 0F0056E3 		ldr	r3, .L465+12
 3070 19b8 0300001A 		ldr	r3, [r3, #0]
 3071              		cmp	r7, r3
 3072 19bc 028055E5 		blt	.L353
 3073              		.loc 1 1084 0
 3074 19c0 04029FE5 		cmp	r8, #89
 3075 19c4 0810A0E1 		bne	.L423
 3076              		.loc 1 1086 0
 3077 19c8 FEFFFFEB 		cmp	r4, #10
 3078              		bne	.L425
 3079              		ldr	r2, .L465+52
 3080 19cc 017087E2 		ldr	r3, [r2, #0]
 3081 19d0 015085E2 		cmp	r3, #150
 3082              		movgt	r3, #150
 3083              		bgt	.L461
 3084 19d4 6C319FE5 		b	.L458
 3085 19d8 003093E5 	.L425:
 3086 19dc 030057E1 		.loc 1 1087 0
 3087 19e0 34FFFFBA 		cmp	r4, #9
 3088              		bne	.L429
 3089 19e4 590058E3 		ldr	r2, .L465+52
 3090 19e8 4D00001A 		ldr	r3, [r2, #0]
 3091              		cmp	r3, #166
 3092 19ec 0A0054E3 		ble	.L458
 3093 19f0 0500001A 		mov	r3, #166
 3094 19f4 74219FE5 	.L461:
 3095 19f8 003092E5 		str	r3, [r2, #0]
 3096 19fc 960053E3 		b	.L458
 3097 1a00 9630A0C3 	.L429:
 3098 1a04 070000CA 		.loc 1 1088 0
 3099 1a08 490000EA 		cmp	r4, #8
 3100              		bne	.L432
 3101              		ldr	r2, .L465+52
 3102 1a0c 090054E3 		ldr	r3, [r2, #0]
 3103 1a10 0600001A 		cmp	r3, #187
 3104 1a14 54219FE5 		movgt	r3, #187
 3105 1a18 003092E5 		bgt	.L461
 3106 1a1c A60053E3 		b	.L458
 3107 1a20 430000DA 	.L432:
 3108 1a24 A630A0E3 		.loc 1 1089 0
 3109              		cmp	r4, #7
 3110 1a28 003082E5 		bne	.L435
 3111 1a2c 400000EA 		ldr	r2, .L465+52
 3112              		ldr	r3, [r2, #0]
 3113              		cmp	r3, #214
 3114 1a30 080054E3 		movgt	r3, #214
 3115 1a34 0500001A 		bgt	.L461
 3116 1a38 30219FE5 		b	.L458
 3117 1a3c 003092E5 	.L435:
 3118 1a40 BB0053E3 		.loc 1 1090 0
 3119 1a44 BB30A0C3 		cmp	r4, #6
 3120 1a48 F6FFFFCA 		bne	.L438
 3121 1a4c 380000EA 		ldr	r2, .L465+52
 3122              		ldr	r3, [r2, #0]
 3123              		cmp	r3, #250
 3124 1a50 070054E3 		movgt	r3, #250
 3125 1a54 0500001A 		bgt	.L461
 3126 1a58 10219FE5 		b	.L458
 3127 1a5c 003092E5 	.L438:
 3128 1a60 D60053E3 		.loc 1 1091 0
 3129 1a64 D630A0C3 		cmp	r4, #5
 3130 1a68 EEFFFFCA 		bne	.L441
 3131 1a6c 300000EA 		ldr	r2, .L465+52
 3132              		ldr	r3, [r2, #0]
 3133              		cmp	r3, #300
 3134 1a70 060054E3 		movgt	r3, #300
 3135 1a74 0500001A 		bgt	.L461
 3136 1a78 F0209FE5 		b	.L458
 3137 1a7c 003092E5 	.L441:
 3138 1a80 FA0053E3 		.loc 1 1092 0
 3139 1a84 FA30A0C3 		cmp	r4, #4
 3140 1a88 E6FFFFCA 		ldreq	r1, .L465+52
 3141 1a8c 280000EA 		ldreq	r2, .L465+148
 3142              		beq	.L463
 3143              	.L444:
 3144 1a90 050054E3 		.loc 1 1093 0
 3145 1a94 0500001A 		cmp	r4, #3
 3146 1a98 D0209FE5 		bne	.L447
 3147 1a9c 003092E5 		ldr	r2, .L465+52
 3148 1aa0 4B0F53E3 		ldr	r3, [r2, #0]
 3149 1aa4 4B3FA0C3 		cmp	r3, #500
 3150 1aa8 DEFFFFCA 		movgt	r3, #500
 3151 1aac 200000EA 		bgt	.L461
 3152              		b	.L458
 3153              	.L447:
 3154 1ab0 040054E3 		.loc 1 1094 0
 3155 1ab4 B4109F05 		cmp	r4, #2
 3156 1ab8 10219F05 		ldreq	r1, .L465+52
 3157 1abc 0F00000A 		ldreq	r2, .L465+152
 3158              		beq	.L463
 3159              	.L450:
 3160 1ac0 030054E3 		.loc 1 1095 0
 3161 1ac4 0500001A 		cmp	r4, #1
 3162 1ac8 A0209FE5 		bne	.L453
 3163 1acc 003092E5 		ldr	r1, .L465+52
 3164 1ad0 7D0F53E3 		ldr	r2, .L465+156
 3165 1ad4 7D3FA0C3 	.L463:
 3166 1ad8 D2FFFFCA 		ldr	r3, [r1, #0]
 3167 1adc 140000EA 		cmp	r3, r2
 3168              		strgt	r2, [r1, #0]
 3169              		b	.L458
 3170 1ae0 020054E3 	.L453:
 3171 1ae4 84109F05 		.loc 1 1096 0
 3172 1ae8 E4209F05 		cmp	r4, #0
 3173 1aec 0300000A 		ldreq	r3, .L465+52
 3174              		moveq	r2, #100
 3175              		streq	r2, [r3, #0]
 3176 1af0 010054E3 		b	.L458
 3177 1af4 0500001A 	.L423:
 3178 1af8 70109FE5 		.loc 1 1099 0
 3179 1afc D4209FE5 		cmp	r8, #84
 3180              		bne	.L458
 3181 1b00 003091E5 		.loc 1 1101 0
 3182 1b04 020053E1 		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 3183 1b08 002081C5 		.loc 1 1099 0
 3184 1b0c 080000EA 		b	test
 3185              	.L458:
 3186              		.loc 1 1101 0
 3187 1b10 000054E3 		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 3188 1b14 54309F05 		bx	lr
 3189 1b18 6420A003 	.L466:
 3190 1b1c 00208305 		.align	2
 3191 1b20 030000EA 	.L465:
 3192              		.word	.LC11
 3193              		.word	fd
 3194 1b24 540058E3 		.word	stringBuf
 3195 1b28 0100001A 		.word	stringSize
 3196              		.word	.LC12
 3197 1b2c F041BDE8 		.word	.LC13
 3198              		.word	mode
 3199 1b30 FEFFFFEA 		.word	.LC14
 3200              		.word	.LC15
 3201              		.word	asc
 3202 1b34 F041BDE8 		.word	115200
 3203 1b38 1EFF2FE1 		.word	baud
 3204              		.word	.LC16
 3205              		.word	freq
 3206              		.word	.LC17
 3207 1b3c E0000000 		.word	.LC18
 3208 1b40 00000000 		.word	trig
 3209 1b44 00000000 		.word	510
 3210 1b48 00000000 		.word	frame
 3211 1b4c EC000000 		.word	.LC19
 3212 1b50 18010000 		.word	ad1_3
 3213 1b54 05000000 		.word	.LC20
 3214 1b58 DC010000 		.word	ad0_3
 3215 1b5c E8010000 		.word	.LC21
 3216 1b60 05000000 		.word	ad0_2
 3217 1b64 00C20100 		.word	.LC22
 3218 1b68 10000000 		.word	ad0_1
 3219 1b6c F4010000 		.word	.LC23
 3220 1b70 00000000 		.word	ad1_2
 3221 1b74 00020000 		.word	.LC24
 3222 1b78 0C020000 		.word	ad0_4
 3223 1b7c 16000000 		.word	.LC25
 3224 1b80 FE010000 		.word	ad1_7
 3225 1b84 14000000 		.word	.LC26
 3226 1b88 18020000 		.word	ad1_6
 3227 1b8c 04000000 		.word	.LC27
 3228 1b90 28020000 		.word	.LC28
 3229 1b94 06000000 		.word	375
 3230 1b98 38020000 		.word	750
 3231 1b9c 07000000 		.word	1500
 3232 1ba0 48020000 	.LFE13:
 3234 1ba8 58020000 		.align	2
 3235 1bac 09000000 		.global	Initialize
 3237 1bb4 0A000000 	Initialize:
 3238 1bb8 78020000 	.LFB3:
 3239 1bbc 0B000000 		.loc 1 178 0
 3240 1bc0 88020000 		@ Function supports interworking.
 3241 1bc4 0C000000 		@ args = 0, pretend = 0, frame = 0
 3242 1bc8 98020000 		@ frame_needed = 0, uses_anonymous_args = 0
 3243 1bcc A8020000 		str	lr, [sp, #-4]!
 3244 1bd0 77010000 	.LCFI15:
 3245 1bd4 EE020000 		.loc 1 179 0
 3246 1bd8 DC050000 		ldr	r0, .L469
 3247              		bl	rprintf_devopen
 3248              		.loc 1 181 0
 3249              		ldr	r2, .L469+4
 3250              		ldr	r3, .L469+8
 3251              		str	r3, [r2, #0]
 3252              		.loc 1 182 0
 3253              		ldr	r3, .L469+12
 3254              		str	r3, [r2, #4]
 3255              		.loc 1 183 0
 3256              		sub	r2, r2, #16384
 3257              		ldr	r3, [r2, #8]
 3258 1bdc 04E02DE5 		orr	r3, r3, #2176
 3259              		orr	r3, r3, #4
 3260              		str	r3, [r2, #8]
 3261 1be0 4C009FE5 		.loc 1 186 0
 3262 1be4 FEFFFFEB 		ldr	r1, .L469+16
 3263              		.loc 1 184 0
 3264 1be8 48209FE5 		mov	r3, #128
 3265 1bec 48309FE5 		str	r3, [r2, #4]
 3266 1bf0 003082E5 		.loc 1 186 0
 3267              		mov	r3, #8
 3268 1bf4 44309FE5 		strb	r3, [r1, #0]
 3269 1bf8 043082E5 		.loc 1 187 0
 3270              		add	r3, r3, #40
 3271 1bfc 012942E2 		strb	r3, [r1, #0]
 3272 1c00 083092E5 		.loc 1 189 0
 3273 1c04 223D83E3 		ldr	lr, [sp], #4
 3274 1c08 043083E3 		bx	lr
 3275 1c0c 083082E5 	.L470:
 3276              		.align	2
 3277 1c10 2C109FE5 	.L469:
 3278              		.word	putc_serial0
 3279 1c14 8030A0E3 		.word	-536690688
 3280 1c18 043082E5 		.word	-818604795
 3281              		.word	356784129
 3282 1c1c 0830A0E3 		.word	-536739840
 3283 1c20 0030C1E5 	.LFE3:
 3285 1c24 283083E2 		.section	.rodata.str1.4
 3286 1c28 0030C1E5 		.align	2
 3287              	.LC29:
 3288 1c2c 04E09DE4 		.ascii	"LOGtest2%02d.txt\000"
 3289 1c30 1EFF2FE1 		.align	2
 3290              	.LC30:
 3291              		.ascii	"Too Many Logs!\012\015\000"
 3292              		.align	2
 3293 1c34 00000000 	.LC31:
 3294 1c38 00C002E0 		.ascii	"LOG%02d.txt\000"
 3295 1c3c 051535CF 		.text
 3296 1c40 01184415 		.align	2
 3297 1c44 000002E0 		.global	main
 3299              	main:
 3300              	.LFB2:
 3301 02b6 0000     		.loc 1 106 0
 3302              		@ Function supports interworking.
 3303 02b8 4C4F4774 		@ args = 0, pretend = 0, frame = 32
 3303      65737432 
 3303      25303264 
 3303      2E747874 
 3303      00
 3304 02c9 000000   		@ frame_needed = 0, uses_anonymous_args = 0
 3305              		stmfd	sp!, {r4, r5, lr}
 3306 02cc 546F6F20 	.LCFI16:
 3306      4D616E79 
 3306      204C6F67 
 3306      73210A0D 
 3306      00
 3307 02dd 000000   		sub	sp, sp, #32
 3308              	.LCFI17:
 3309 02e0 4C4F4725 		.loc 1 111 0
 3309      3032642E 
 3309      74787400 
 3310              		bl	enableFIQ
 3311              		.loc 1 113 0
 3312              		bl	Initialize
 3313              		.loc 1 115 0
 3314              		bl	fat_initialize
 3315              		.loc 1 117 0
 3316              		mov	r0, #9600
 3317              		mov	r1, #0
 3318              		bl	setup_uart0
 3319              		mov	r4, #0
 3320 1c48 30402DE9 	.LVL99:
 3321              	.L472:
 3322 1c4c 20D04DE2 		.loc 1 122 0
 3323              		mov	r1, #1
 3324              		mov	r0, #0
 3325 1c50 FEFFFFEB 		bl	stat
 3326              		.loc 1 123 0
 3327 1c54 FEFFFFEB 		mov	r0, #50
 3328              		bl	delay_ms
 3329 1c58 FEFFFFEB 		.loc 1 124 0
 3330              		mov	r0, #0
 3331 1c5c 960DA0E3 		mov	r1, r0
 3332 1c60 0010A0E3 		bl	stat
 3333 1c64 FEFFFFEB 		.loc 1 125 0
 3334 1c68 0040A0E3 		mov	r0, #1
 3335              		mov	r1, r0
 3336              		bl	stat
 3337              		.loc 1 126 0
 3338 1c6c 0110A0E3 		mov	r0, #50
 3339 1c70 0000A0E3 		bl	delay_ms
 3340 1c74 FEFFFFEB 		.loc 1 120 0
 3341              		add	r4, r4, #1
 3342 1c78 3200A0E3 		.loc 1 127 0
 3343 1c7c FEFFFFEB 		mov	r0, #1
 3344              		mov	r1, #0
 3345 1c80 0000A0E3 		bl	stat
 3346 1c84 0010A0E1 		.loc 1 120 0
 3347 1c88 FEFFFFEB 		cmp	r4, #5
 3348              		bne	.L472
 3349 1c8c 0100A0E3 		.loc 1 130 0
 3350 1c90 0010A0E1 		bl	SPI1_Init
 3351 1c94 FEFFFFEB 		.loc 1 131 0
 3352              		mov	r0, #170
 3353 1c98 3200A0E3 		bl	SPI1_Write
 3354 1c9c FEFFFFEB 		.loc 1 132 0
 3355              		mov	r0, #85
 3356 1ca0 014084E2 		bl	SPI1_Write
 3357              		.loc 1 134 0
 3358 1ca4 0100A0E3 		bl	Log_init
 3359 1ca8 0010A0E3 		.loc 1 137 0
 3360 1cac FEFFFFEB 		mov	r0, sp
 3361              		ldr	r1, .L489
 3362 1cb0 050054E3 		mov	r2, #1
 3363 1cb4 ECFFFF1A 		bl	string_printf
 3364              		mov	r5, #1
 3365 1cb8 FEFFFFEB 	.LVL100:
 3366              		b	.L474
 3367 1cbc AA00A0E3 	.LVL101:
 3368 1cc0 FEFFFFEB 	.L475:
 3369              		.loc 1 141 0
 3370 1cc4 5500A0E3 		cmp	r5, #250
 3371 1cc8 FEFFFFEB 		bne	.L476
 3372              	.LVL102:
 3373 1ccc FEFFFFEB 		.loc 1 143 0
 3374              		ldr	r0, .L489+4
 3375 1cd0 0D00A0E1 		bl	rprintf
 3376 1cd4 D8109FE5 	.L478:
 3377 1cd8 0120A0E3 		.loc 1 146 0
 3378 1cdc FEFFFFEB 		mov	r0, #0
 3379 1ce0 0150A0E3 		mov	r1, #1
 3380              		bl	stat
 3381 1ce4 150000EA 		.loc 1 147 0
 3382              		mov	r0, #1
 3383              		mov	r1, r0
 3384              		bl	stat
 3385 1ce8 FA0055E3 		.loc 1 148 0
 3386 1cec 1200001A 		mov	r0, #1000
 3387              		bl	delay_ms
 3388              		.loc 1 149 0
 3389 1cf0 C0009FE5 		mov	r0, #0
 3390 1cf4 FEFFFFEB 		mov	r1, r0
 3391              		bl	stat
 3392              		.loc 1 150 0
 3393 1cf8 0000A0E3 		mov	r0, #1
 3394 1cfc 0110A0E3 		mov	r1, #0
 3395 1d00 FEFFFFEB 		bl	stat
 3396              		.loc 1 151 0
 3397 1d04 0100A0E3 		mov	r0, #1000
 3398 1d08 0010A0E1 		bl	delay_ms
 3399 1d0c FEFFFFEB 		b	.L478
 3400              	.LVL103:
 3401 1d10 FA0FA0E3 	.L476:
 3402 1d14 FEFFFFEB 		.loc 1 155 0
 3403              		bl	string_printf
 3404 1d18 0000A0E3 	.LVL104:
 3405 1d1c 0010A0E1 	.L474:
 3406 1d20 FEFFFFEB 		.loc 1 138 0
 3407              		mov	r0, sp
 3408 1d24 0100A0E3 		bl	root_file_exists
 3409 1d28 0010A0E3 		.loc 1 140 0
 3410 1d2c FEFFFFEB 		add	r5, r5, #1
 3411              		.loc 1 138 0
 3412 1d30 FA0FA0E3 		cmp	r0, #0
 3413 1d34 FEFFFFEB 		mov	r4, sp
 3414 1d38 EEFFFFEA 	.LVL105:
 3415              		.loc 1 155 0
 3416              		ldr	r1, .L489+8
 3417              		mov	r2, r5
 3418 1d3c FEFFFFEB 		mov	r0, sp
 3419              		.loc 1 138 0
 3420              		bne	.L475
 3421              	.LVL106:
 3422 1d40 0D00A0E1 		.loc 1 158 0
 3423 1d44 FEFFFFEB 		bl	root_open_new
 3424              	.LVL107:
 3425 1d48 015085E2 		ldr	r3, .L489+12
 3426              		str	r0, [r3, #0]
 3427 1d4c 000050E3 		.loc 1 161 0
 3428 1d50 0D40A0E1 		bl	sd_raw_sync
 3429              		.loc 1 163 0
 3430              		ldr	r3, .L489+16
 3431 1d54 60109FE5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3432 1d58 0520A0E1 		cmp	r3, #0
 3433 1d5c 0D00A0E1 		bne	.L480
 3434              		bl	mode_0
 3435 1d60 E0FFFF1A 		b	.L482
 3436              	.L480:
 3437              		.loc 1 164 0
 3438 1d64 FEFFFFEB 		cmp	r3, #1
 3439              		bne	.L483
 3440 1d68 50309FE5 		bl	mode_1
 3441 1d6c 000083E5 		b	.L482
 3442              	.L483:
 3443 1d70 FEFFFFEB 		.loc 1 165 0
 3444              		cmp	r3, #2
 3445 1d74 48309FE5 		bleq	mode_2
 3446 1d78 0030D3E5 	.L482:
 3447 1d7c 000053E3 		.loc 1 168 0
 3448 1d80 0100001A 		mov	r0, #0
 3449 1d84 FEFFFFEB 		add	sp, sp, #32
 3450 1d88 050000EA 		ldmfd	sp!, {r4, r5, lr}
 3451              		bx	lr
 3452              	.L490:
 3453 1d8c 010053E3 		.align	2
 3454 1d90 0100001A 	.L489:
 3455 1d94 FEFFFFEB 		.word	.LC29
 3456 1d98 010000EA 		.word	.LC30
 3457              		.word	.LC31
 3458              		.word	handle
 3459 1d9c 020053E3 		.word	mode
 3460 1da0 FEFFFF0B 	.LFE2:
 3462              		.global	log_array1
 3463 1da4 0000A0E3 		.bss
 3466 1db0 1EFF2FE1 	log_array1:
 3467              		.space	1
 3468              		.global	log_array2
 3471 1db8 CC020000 	log_array2:
 3472 1dbc E0020000 		.space	1
 3473 1dc0 00000000 		.global	RX_in
 3474 1dc4 05000000 		.align	1
 3477              	RX_in:
 3478              		.space	2
 3479              		.global	get_frame
 3482 0000 00       	get_frame:
 3483              		.space	1
 3484              		.data
 3485              		.align	2
 3488              	freq:
 3489              		.word	100
 3492              	ad1_3:
 3493 0002 0000     		.byte	78
 3496              	asc:
 3497              		.byte	78
 3500              	ad0_3:
 3501              		.byte	78
 3504 0000 64000000 	ad0_2:
 3505              		.byte	78
 3508 0004 4E       	ad0_1:
 3509              		.byte	78
 3512 0005 4E       	ad1_2:
 3513              		.byte	78
 3516 0006 4E       	ad0_4:
 3517              		.byte	78
 3520 0007 4E       	ad1_7:
 3521              		.byte	78
 3524 0008 4E       	ad1_6:
 3525              		.byte	78
 3526              		.align	2
 3529              	baud:
 3530              		.word	9600
 3531              		.align	1
 3534              	frame:
 3535              		.short	100
 3536 000b 4E       		.bss
 3537              	mode:
 3538              		.space	1
 3539              		.data
 3542              	trig:
 3543              		.byte	36
 3544              		.comm	RX_array1,512,1
 3545 0010 80250000 		.comm	RX_array2,512,1
 3546              		.comm	stringSize,4,4
 3547              		.comm	handle,4,4
 3548              		.comm	fd,4,4
 3549              		.comm	stringBuf,256,1
 3550 0014 6400     		.section	.debug_frame,"",%progbits
 3551              	.Lframe0:
 3552              		.4byte	.LECIE0-.LSCIE0
 3553 0005 00       	.LSCIE0:
 3554              		.4byte	0xffffffff
 3555              		.byte	0x1
 3556              		.ascii	"\000"
 3557              		.uleb128 0x1
 3558 0016 24       		.sleb128 -4
 3559              		.byte	0xe
 3560              		.byte	0xc
 3561              		.uleb128 0xd
 3562              		.uleb128 0x0
 3563              		.align	2
 3564              	.LECIE0:
 3915              	.LLST2:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:13     .text:00000000 feed
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:22     .text:00000000 $a
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:36     .text:00000018 $d
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:41     .text:0000001c UART0ISR
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:48     .text:0000001c $a
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:115    .text:000000b4 $d
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3492   .bss:00000002 RX_in
                            *COM*:00000200 RX_array2
                            *COM*:00000200 RX_array1
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3481   .bss:00000000 log_array1
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3486   .bss:00000001 log_array2
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:125    .text:000000cc UART0ISR_2
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:131    .text:000000cc $a
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:252    .text:000001e8 $d
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3557   .data:00000016 trig
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3497   .bss:00000004 get_frame
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3549   .data:00000014 frame
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:266    .text:0000020c SWI_Routine
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:275    .text:0000020c $a
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:281    .text:00000210 stat
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:323    .text:00000254 $d
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:329    .text:00000258 UNDEF_Routine
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:335    .text:00000258 $a
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:349    .text:00000270 FIQ_Routine
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:377    .text:000002a4 $d
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:383    .text:000002a8 delay_ms
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:392    .text:000002a8 $a
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:413    .text:000002cc $d
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:427    .text:000002d0 AD_conversion
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:435    .text:000002d0 $a
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:503    .text:00000360 $d
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:528    .text:00000374 test
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:534    .text:00000374 $a
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:631    .text:00000440 $d
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:658    .text:00000478 fat_initialize
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:664    .text:00000478 $a
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:689    .text:000004ac $d
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:696    .text:000004b4 mode_action
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:702    .text:000004b4 $a
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:893    .text:000006ac $d
                            *COM*:00000004 handle
                            *COM*:00000004 stringSize
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:914    .text:000006d4 mode_2
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:920    .text:000006d4 $a
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:981    .text:0000075c $d
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3503   .data:00000000 freq
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:1254   .text:00000970 MODE2ISR
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:991    .text:00000770 setup_uart0
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:999    .text:00000770 $a
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:1162   .text:000008d8 $d
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3544   .data:00000010 baud
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:1177   .text:000008ec mode_1
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:1183   .text:000008ec $a
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:1206   .text:00000924 $d
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:1220   .text:00000934 mode_0
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:1226   .text:00000934 $a
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:1247   .text:00000964 $d
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:1260   .text:00000970 $a
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:2558   .text:00001550 $d
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3507   .data:00000004 ad1_3
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3511   .data:00000005 asc
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3515   .data:00000006 ad0_3
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3519   .data:00000007 ad0_2
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3523   .data:00000008 ad0_1
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3527   .data:00000009 ad1_2
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3531   .data:0000000a ad0_4
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3535   .data:0000000b ad1_7
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3539   .data:0000000c ad1_6
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:2648   .text:000015b0 Log_init
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:2654   .text:000015b0 $a
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3207   .text:00001b3c $d
                            *COM*:00000004 fd
                            *COM*:00000100 stringBuf
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3552   .bss:00000005 mode
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3252   .text:00001bdc Initialize
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3258   .text:00001bdc $a
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3293   .text:00001c34 $d
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3314   .text:00001c48 main
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3320   .text:00001c48 $a
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3470   .text:00001db4 $d
C:\Users\nancyhd\AppData\Local\Temp/cc2Laaaa.s:3504   .data:00000000 $d

UNDEFINED SYMBOLS
rprintf
sd_raw_init
openroot
fat16_write_file
sd_raw_sync
__divsi3
enableIRQ
itoa
root_file_exists
root_open
fat16_read_file
fat16_close_file
root_open_new
strcpy
strlen
rprintf_devopen
putc_serial0
enableFIQ
SPI1_Init
SPI1_Write
string_printf
